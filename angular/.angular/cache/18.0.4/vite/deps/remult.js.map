{
  "version": 3,
  "sources": ["../../../../../../node_modules/@noble/hashes/_assert.js", "../../../../../../node_modules/@noble/hashes/_u64.js", "../../../../../../node_modules/@noble/hashes/crypto.js", "../../../../../../node_modules/@noble/hashes/utils.js", "../../../../../../node_modules/@noble/hashes/sha3.js", "../../../../../../node_modules/@paralleldrive/cuid2/src/index.js", "../../../../../../node_modules/@paralleldrive/cuid2/index.js", "../../../../../../node_modules/remult/esm/src/CompoundIdField.js", "../../../../../../node_modules/remult/esm/src/remult3/getEntityRef.js", "../../../../../../node_modules/remult/esm/src/remult3/relationInfoMember.js", "../../../../../../node_modules/remult/esm/src/filter/filter-interfaces.js", "../../../../../../node_modules/remult/esm/src/remult-static.js", "../../../../../../node_modules/remult/esm/src/remult3/repository-internals.js", "../../../../../../node_modules/remult/esm/src/remult-proxy.js", "../../../../../../node_modules/remult/esm/src/column.js", "../../../../../../node_modules/remult/esm/urlBuilder.js", "../../../../../../node_modules/remult/esm/src/remult3/remult3.js", "../../../../../../node_modules/remult/esm/src/buildRestDataProvider.js", "../../../../../../node_modules/remult/esm/src/data-providers/rest-data-provider.js", "../../../../../../node_modules/uuid/dist/esm-browser/rng.js", "../../../../../../node_modules/uuid/dist/esm-browser/regex.js", "../../../../../../node_modules/uuid/dist/esm-browser/validate.js", "../../../../../../node_modules/uuid/dist/esm-browser/stringify.js", "../../../../../../node_modules/uuid/dist/esm-browser/parse.js", "../../../../../../node_modules/uuid/dist/esm-browser/v35.js", "../../../../../../node_modules/uuid/dist/esm-browser/md5.js", "../../../../../../node_modules/uuid/dist/esm-browser/v3.js", "../../../../../../node_modules/uuid/dist/esm-browser/v4.js", "../../../../../../node_modules/uuid/dist/esm-browser/sha1.js", "../../../../../../node_modules/uuid/dist/esm-browser/v5.js", "../../../../../../node_modules/remult/esm/src/sort.js", "../../../../../../node_modules/remult/esm/src/live-query/SubscriptionChannel.js", "../../../../../../node_modules/remult/esm/src/live-query/LiveQueryClient.js", "../../../../../../node_modules/remult/esm/src/live-query/SseSubscriptionClient.js", "../../../../../../node_modules/remult/esm/src/server-action-info.js", "../../../../../../node_modules/remult/esm/server/initDataProvider.js", "../../../../../../node_modules/remult/esm/src/context.js", "../../../../../../node_modules/remult/esm/assign.js", "../../../../../../node_modules/remult/esm/inputTypes.js", "../../../../../../node_modules/remult/esm/src/valueConverters.js", "../../../../../../node_modules/remult/esm/src/remult3/__updateEntityBasedOnWhere.js", "../../../../../../node_modules/remult/esm/src/remult3/relation-loader.js", "../../../../../../node_modules/remult/esm/src/validators.js", "../../../../../../node_modules/remult/esm/src/remult3/addValidator.js", "../../../../../../node_modules/remult/esm/src/isOfType.js", "../../../../../../node_modules/remult/esm/src/remult3/RepositoryImplementation.js", "../../../../../../node_modules/remult/esm/src/data-providers/sql-database.js", "../../../../../../node_modules/remult/esm/src/filter/filter-consumer-bridge-to-sql-request.js", "../../../../../../node_modules/remult/esm/src/data-providers/array-entity-data-provider.js", "../../../../../../node_modules/remult/esm/src/remult3/entity.js", "../../../../../../node_modules/remult/esm/src/remult3/Fields.js", "../../../../../../node_modules/tslib/tslib.es6.mjs", "../../../../../../node_modules/remult/esm/src/remult3/IdEntity.js", "../../../../../../node_modules/remult/node_modules/reflect-metadata/Reflect.js", "../../../../../../node_modules/remult/esm/src/server-action.js", "../../../../../../node_modules/remult/esm/src/remult3/classDescribers.js", "../../../../../../node_modules/remult/esm/src/data-providers/in-memory-database.js", "../../../../../../node_modules/remult/esm/src/data-providers/web-sql-data-provider.js", "../../../../../../node_modules/remult/esm/src/data-providers/json-data-provider.js", "../../../../../../node_modules/remult/esm/src/data-providers/json-entity-opfs-storage.js", "../../../../../../node_modules/remult/esm/src/live-query/SubscriptionServer.js", "../../../../../../node_modules/remult/esm/index.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = exports.isBytes = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\nexports.bool = bool;\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexports.isBytes = isBytes;\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = { number, bool, bytes, hash, exists, output };\nexports.default = assert;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.byteSwap32 = exports.byteSwapIfBE = exports.byteSwap = exports.isLE = exports.rotl = exports.rotr = exports.createView = exports.u32 = exports.u8 = exports.isBytes = void 0;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\nconst _assert_js_1 = require(\"./_assert.js\");\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexports.isBytes = isBytes;\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexports.rotl = rotl;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nconst byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\nexports.byteSwap = byteSwap;\n// Conditionally byte swap if on a big-endian platform\nexports.byteSwapIfBE = exports.isLE ? (n) => n : (n) => (0, exports.byteSwap)(n);\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = (0, exports.byteSwap)(arr[i]);\n    }\n}\nexports.byteSwap32 = byteSwap32;\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    (0, _assert_js_1.bytes)(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nexports.utf8ToBytes = utf8ToBytes;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    (0, _assert_js_1.bytes)(data);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        (0, _assert_js_1.bytes)(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {\n        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\nexports.randomBytes = randomBytes;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        (0, _assert_js_1.number)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        if (!utils_js_1.isLE)\n            (0, utils_js_1.byteSwap32)(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!utils_js_1.isLE)\n            (0, utils_js_1.byteSwap32)(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0, _assert_js_1.exists)(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0, _assert_js_1.exists)(this, false);\n        (0, _assert_js_1.bytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0, _assert_js_1.number)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0, _assert_js_1.output)(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n", "/* global global, window, module */\nconst { sha3_512: sha3 } = require(\"@noble/hashes/sha3\");\n\nconst defaultLength = 24;\nconst bigLength = 32;\n\nconst createEntropy = (length = 4, random = Math.random) => {\n  let entropy = \"\";\n\n  while (entropy.length < length) {\n    entropy = entropy + Math.floor(random() * 36).toString(36);\n  }\n  return entropy;\n};\n\n/*\n * Adapted from https://github.com/juanelas/bigint-conversion\n * MIT License Copyright (c) 2018 Juan Hernández Serrano\n */\nfunction bufToBigInt(buf) {\n  let bits = 8n;\n\n  let value = 0n;\n  for (const i of buf.values()) {\n    const bi = BigInt(i);\n    value = (value << bits) + bi;\n  }\n  return value;\n}\n\nconst hash = (input = \"\") => {\n  // Drop the first character because it will bias the histogram\n  // to the left.\n  return bufToBigInt(sha3(input)).toString(36).slice(1);\n};\n\nconst alphabet = Array.from({ length: 26 }, (x, i) =>\n  String.fromCharCode(i + 97)\n);\n\nconst randomLetter = (random) =>\n  alphabet[Math.floor(random() * alphabet.length)];\n\n/*\nThis is a fingerprint of the host environment. It is used to help\nprevent collisions when generating ids in a distributed system.\nIf no global object is available, you can pass in your own, or fall back\non a random string.\n*/\nconst createFingerprint = ({\n  globalObj = typeof global !== \"undefined\"\n    ? global\n    : typeof window !== \"undefined\"\n    ? window\n    : {},\n  random = Math.random,\n} = {}) => {\n  const globals = Object.keys(globalObj).toString();\n  const sourceString = globals.length\n    ? globals + createEntropy(bigLength, random)\n    : createEntropy(bigLength, random);\n\n  return hash(sourceString).substring(0, bigLength);\n};\n\nconst createCounter = (count) => () => {\n  return count++;\n};\n\n// ~22k hosts before 50% chance of initial counter collision\n// with a remaining counter range of 9.0e+15 in JavaScript.\nconst initialCountMax = 476782367;\n\nconst init = ({\n  // Fallback if the user does not pass in a CSPRNG. This should be OK\n  // because we don't rely solely on the random number generator for entropy.\n  // We also use the host fingerprint, current time, and a session counter.\n  random = Math.random,\n  counter = createCounter(Math.floor(random() * initialCountMax)),\n  length = defaultLength,\n  fingerprint = createFingerprint({ random }),\n} = {}) => {\n  return function cuid2() {\n    const firstLetter = randomLetter(random);\n\n    // If we're lucky, the `.toString(36)` calls may reduce hashing rounds\n    // by shortening the input to the hash function a little.\n    const time = Date.now().toString(36);\n    const count = counter().toString(36);\n\n    // The salt should be long enough to be globally unique across the full\n    // length of the hash. For simplicity, we use the same length as the\n    // intended id output.\n    const salt = createEntropy(length, random);\n    const hashInput = `${time + salt + count + fingerprint}`;\n\n    return `${firstLetter + hash(hashInput).substring(1, length)}`;\n  };\n};\n\nconst createId = init();\n\nconst isCuid = (id, { minLength = 2, maxLength = bigLength } = {}) => {\n  const length = id.length;\n  const regex = /^[0-9a-z]+$/;\n\n  try {\n    if (\n      typeof id === \"string\" &&\n      length >= minLength &&\n      length <= maxLength &&\n      regex.test(id)\n    )\n      return true;\n  } finally {\n  }\n\n  return false;\n};\n\nmodule.exports.getConstants = () => ({ defaultLength, bigLength });\nmodule.exports.init = init;\nmodule.exports.createId = createId;\nmodule.exports.bufToBigInt = bufToBigInt;\nmodule.exports.createCounter = createCounter;\nmodule.exports.createFingerprint = createFingerprint;\nmodule.exports.isCuid = isCuid;\n", "const { createId, init, getConstants, isCuid } = require(\"./src/index\");\n\nmodule.exports.createId = createId;\nmodule.exports.init = init;\nmodule.exports.getConstants = getConstants;\nmodule.exports.isCuid = isCuid;\n", "export class CompoundIdField {\n    fields;\n    constructor(...columns) {\n        this.fields = columns;\n    }\n    apiUpdateAllowed(item) {\n        throw new Error('Method not implemented.');\n    }\n    displayValue(item) {\n        throw new Error('Method not implemented.');\n    }\n    includedInApi(item) {\n        throw new Error('Method not implemented.');\n    }\n    toInput(value, inputType) {\n        throw new Error('Method not implemented.');\n    }\n    fromInput(inputValue, inputType) {\n        throw new Error('Method not implemented.');\n    }\n    getDbName() {\n        return Promise.resolve('');\n    }\n    getId(instance) {\n        let get = (field) => {\n            return instance[field.key];\n        };\n        if (typeof instance === 'function') {\n            get = instance;\n        }\n        let r = '';\n        this.fields.forEach((c) => {\n            if (r.length > 0)\n                r += ',';\n            r += c.valueConverter.toJson(get(c));\n        });\n        return r;\n    }\n    options;\n    get valueConverter() {\n        throw new Error('cant get value converter of compound id');\n    }\n    target;\n    readonly;\n    allowNull;\n    dbReadOnly;\n    isServerExpression;\n    key;\n    caption;\n    inputType;\n    dbName;\n    valueType;\n    isEqualTo(value) {\n        let result = {};\n        let val = value.toString();\n        let id = val.split(',');\n        this.fields.forEach((c, i) => {\n            result[c.key] = c.valueConverter.fromJson(id[i]);\n        });\n        return result;\n    }\n}\n", "/**\n * Retrieves the EntityRef object associated with the specified entity instance.\n * The EntityRef provides methods for performing operations on the entity instance.\n * @param {entityType} entity - The entity instance.\n * @param {boolean} [throwException=true] - Indicates whether to throw an exception if the EntityRef object cannot be retrieved.\n * @returns {EntityRef<entityType>} The EntityRef object associated with the specified entity instance.\n * @throws {Error} If throwException is true and the EntityRef object cannot be retrieved.\n * @see [Active Record & EntityBase](https://remult.dev/docs/active-record)\n */\nexport function getEntityRef(entity, throwException = true) {\n    let x = entity[entityMember];\n    if (!x && throwException)\n        throw new Error('item ' +\n            (entity.constructor?.name || entity) +\n            ' was not initialized using a context');\n    return x;\n}\nexport const entityMember = Symbol.for('entityMember');\nexport const entityInfo = Symbol.for('entityInfo');\nexport const entityInfo_key = Symbol.for('entityInfo_key');\nexport function getEntitySettings(entity, throwError = true) {\n    if (entity === undefined)\n        if (throwError) {\n            throw new Error('Undefined is not an entity :)');\n        }\n        else\n            return undefined;\n    let info = entity[entityInfo];\n    if (!info && throwError)\n        throw new Error(entity.prototype.constructor.name +\n            \" is not a known entity, did you forget to set @Entity() or did you forget to add the '@' before the call to Entity?\");\n    return info;\n}\nexport function getEntityKey(entity) {\n    return entity[entityInfo_key];\n}\n", "import { CompoundIdField } from '../CompoundIdField.js';\nexport function relationInfoMemberInOptions(toEntityType, type) {\n    return {\n        [relationInfoMember]: {\n            toType: toEntityType,\n            type: type,\n        },\n    };\n}\nconst relationInfoMember = Symbol.for('relationInfo');\n/**\n * @deprecated\n */\nexport function getRelationInfo(options) {\n    return options?.[relationInfoMember];\n}\nconst fieldRelationInfo = Symbol.for('fieldRelationInfo');\nexport function getRelationFieldInfo(field) {\n    return field[fieldRelationInfo];\n}\nexport function verifyFieldRelationInfo(repo, remult, dp) {\n    for (const field of repo.fields.toArray()) {\n        const r = getRelationInfo(field.options);\n        if (r) {\n            if (!field[fieldRelationInfo]) {\n                const toEntity = r.toType();\n                const toRepo = remult.repo(toEntity, dp);\n                const options = field.options;\n                field[fieldRelationInfo] = {\n                    type: r.type,\n                    toEntity,\n                    options,\n                    toRepo,\n                    getFields: () => {\n                        let relationField = options.field;\n                        let relFields = {\n                            fields: options.fields,\n                            compoundIdField: undefined,\n                        };\n                        function buildError(what) {\n                            return Error(`Error for relation: \"${field.key}\" to \"${toRepo.metadata.key}\": ` +\n                                what);\n                        }\n                        let hasFields = () => relationField || relFields.fields;\n                        if (r.type === 'toMany' && !hasFields()) {\n                            for (const fieldInOtherRepo of toRepo.fields.toArray()) {\n                                if (!hasFields()) {\n                                    const reverseRel = getRelationFieldInfo(fieldInOtherRepo);\n                                    const relOp = fieldInOtherRepo.options;\n                                    if (reverseRel)\n                                        if (reverseRel.toEntity === repo.metadata.entityType)\n                                            if (reverseRel.type === 'reference') {\n                                                relationField = fieldInOtherRepo.key;\n                                            }\n                                            else if (reverseRel.type === 'toOne') {\n                                                if (relOp.field) {\n                                                    relationField = relOp.field;\n                                                }\n                                                else if (relOp.fields) {\n                                                    let fields = {};\n                                                    for (const key in relOp.fields) {\n                                                        if (Object.prototype.hasOwnProperty.call(relOp.fields, key)) {\n                                                            const keyInMyTable = relOp.fields[key];\n                                                            fields[keyInMyTable] = key;\n                                                        }\n                                                    }\n                                                    relFields.fields = fields;\n                                                }\n                                            }\n                                }\n                            }\n                            if (!hasFields())\n                                throw buildError(`No matching field found on target. Please specify field/fields`);\n                        }\n                        function requireField(field, meta) {\n                            const result = meta.fields.find(field);\n                            if (!result)\n                                throw buildError(`Field \"${field}\" was not found in \"${meta.key}\".`);\n                            return result;\n                        }\n                        if (r.type === 'reference') {\n                            relationField = field.key;\n                        }\n                        if (relationField) {\n                            if (r.type === 'toOne' || r.type === 'reference') {\n                                if (toRepo.metadata.idMetadata.field instanceof CompoundIdField) {\n                                    relFields.compoundIdField = relationField;\n                                }\n                                else\n                                    relFields.fields = {\n                                        [toRepo.metadata.idMetadata.field.key]: relationField,\n                                    };\n                            }\n                            else {\n                                if (repo.metadata.idMetadata.field instanceof CompoundIdField) {\n                                    relFields.compoundIdField = relationField;\n                                }\n                                else\n                                    relFields.fields = {\n                                        [relationField]: repo.metadata.idMetadata.field.key,\n                                    };\n                            }\n                        }\n                        for (const key in relFields.fields) {\n                            if (Object.prototype.hasOwnProperty.call(relFields.fields, key)) {\n                                requireField(key, toRepo.metadata);\n                                requireField(relFields.fields[key], repo.metadata);\n                            }\n                        }\n                        return relFields;\n                    },\n                };\n            }\n        }\n    }\n}\n", "import { getEntityRef, getEntitySettings } from '../remult3/getEntityRef.js';\nimport { getRelationFieldInfo } from '../remult3/relationInfoMember.js';\n/**\n * The `Filter` class is a helper class that focuses on filter-related concerns. It provides methods\n * for creating and applying filters in queries.\n */\nexport class Filter {\n    apply;\n    //@internal\n    static throwErrorIfFilterIsEmpty(where, methodName) {\n        if (Filter.isFilterEmpty(where)) {\n            throw {\n                message: `${methodName}: requires a filter to protect against accidental delete/update of all rows`,\n                httpStatusCode: 400,\n            };\n        }\n    }\n    //@internal\n    static isFilterEmpty(where) {\n        if (where.$and) {\n            for (const a of where.$and) {\n                if (!Filter.isFilterEmpty(a)) {\n                    return false;\n                }\n            }\n        }\n        if (where.$or) {\n            for (const a of where.$or) {\n                if (Filter.isFilterEmpty(a)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (Object.keys(where).filter((x) => !['$or', '$and'].includes(x)).length == 0) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Retrieves precise values for each property in a filter for an entity.\n     * @template entityType The type of the entity being filtered.\n     * @param metadata The metadata of the entity being filtered.\n     * @param filter The filter to analyze.\n     * @returns A promise that resolves to a FilterPreciseValues object containing the precise values for each property.\n     * @example\n     * const preciseValues = await Filter.getPreciseValues(meta, {\n     *   status: { $ne: 'active' },\n     *   $or: [\n     *     { customerId: [\"1\", \"2\"] },\n     *     { customerId: \"3\" }\n     *   ]\n     * });\n     * console.log(preciseValues);\n     * // Output:\n     * // {\n     * //   \"customerId\": [\"1\", \"2\", \"3\"], // Precise values inferred from the filter\n     * //   \"status\": undefined,           // Cannot infer precise values for 'status'\n     * // }\n    \n     */\n    static async getPreciseValues(metadata, filter) {\n        const result = new preciseValuesCollector();\n        await Filter.fromEntityFilter(metadata, filter).__applyToConsumer(result);\n        return result.preciseValues;\n    }\n    /**\n     * Retrieves precise values for each property in a filter for an entity.\n     * @template entityType The type of the entity being filtered.\n     * @param metadata The metadata of the entity being filtered.\n     * @param filter The filter to analyze.\n     * @returns A promise that resolves to a FilterPreciseValues object containing the precise values for each property.\n     * @example\n     * const preciseValues = await where.getPreciseValues();\n     * console.log(preciseValues);\n     * // Output:\n     * // {\n     * //   \"customerId\": [\"1\", \"2\", \"3\"], // Precise values inferred from the filter\n     * //   \"status\": undefined,           // Cannot infer precise values for 'status'\n     * // }\n    \n     */\n    async getPreciseValues() {\n        const result = new preciseValuesCollector();\n        await this.__applyToConsumer(result);\n        return result.preciseValues;\n    }\n    static createCustom(translator, key = '') {\n        let rawFilterInfo = { key: key, rawFilterTranslator: translator };\n        return Object.assign((x) => {\n            let z = {};\n            if (x == undefined)\n                x = {};\n            if (!rawFilterInfo.key)\n                throw 'Usage of custom filter before a key was assigned to it';\n            return {\n                [customUrlToken + rawFilterInfo.key]: x,\n            };\n        }, { rawFilterInfo });\n    }\n    /**\n     * Translates an `EntityFilter` to a plain JSON object that can be stored or transported.\n     *\n     * @template T The entity type for the filter.\n     * @param {EntityMetadata<T>} entityDefs The metadata of the entity associated with the filter.\n     * @param {EntityFilter<T>} where The `EntityFilter` to be translated.\n     * @returns {any} A plain JSON object representing the `EntityFilter`.\n     *\n     * @example\n     * // Assuming `Task` is an entity class\n     * const jsonFilter = Filter.entityFilterToJson(Task, { completed: true });\n     * // `jsonFilter` can now be stored or transported as JSON\n     */\n    static entityFilterToJson(entityDefs, where) {\n        return Filter.fromEntityFilter(entityDefs, where).toJson();\n    }\n    /**\n     * Translates a plain JSON object back into an `EntityFilter`.\n     *\n     * @template T The entity type for the filter.\n     * @param {EntityMetadata<T>} entityDefs The metadata of the entity associated with the filter.\n     * @param {any} packed The plain JSON object representing the `EntityFilter`.\n     * @returns {EntityFilter<T>} The reconstructed `EntityFilter`.\n     *\n     * @example\n     * // Assuming `Task` is an entity class and `jsonFilter` is a JSON object representing an EntityFilter\n     * const taskFilter = Filter.entityFilterFromJson(Task, jsonFilter);\n     * // Using the reconstructed `EntityFilter` in a query\n     * const tasks = await remult.repo(Task).find({ where: taskFilter });\n     * for (const task of tasks) {\n     *   // Do something for each task based on the filter\n     * }\n     */\n    static entityFilterFromJson(entityDefs, packed) {\n        return buildFilterFromRequestParameters(entityDefs, {\n            get: (key) => packed[key],\n        });\n    }\n    /**\n     * Converts an `EntityFilter` to a `Filter` that can be used by the `DataProvider`. This method is\n     * mainly used internally.\n     *\n     * @template T The entity type for the filter.\n     * @param {EntityMetadata<T>} entity The metadata of the entity associated with the filter.\n     * @param {EntityFilter<T>} whereItem The `EntityFilter` to be converted.\n     * @returns {Filter} A `Filter` instance that can be used by the `DataProvider`.\n     *\n     * @example\n     * // Assuming `Task` is an entity class and `taskFilter` is an EntityFilter\n     * const filter = Filter.fromEntityFilter(Task, taskFilter);\n     * // `filter` can now be used with the DataProvider\n     */\n    static fromEntityFilter(entity, whereItem) {\n        let result = [];\n        for (const key in whereItem) {\n            if (Object.prototype.hasOwnProperty.call(whereItem, key)) {\n                let fieldToFilter = whereItem[key];\n                {\n                    if (key == '$or') {\n                        result.push(new OrFilter(...fieldToFilter.map((x) => Filter.fromEntityFilter(entity, x))));\n                    }\n                    else if (key == '$and') {\n                        result.push(new AndFilter(...fieldToFilter.map((x) => Filter.fromEntityFilter(entity, x))));\n                    }\n                    else if (key.startsWith(customUrlToken)) {\n                        result.push(new Filter((x) => {\n                            x.custom(key.substring(customUrlToken.length), fieldToFilter);\n                        }));\n                    }\n                    else if (key == customDatabaseFilterToken) {\n                        result.push(new Filter((x) => x.databaseCustom(fieldToFilter)));\n                    }\n                    else {\n                        const field = entity.fields[key];\n                        const rel = getRelationFieldInfo(field);\n                        const op = field.options;\n                        let fh = rel?.type === 'toOne'\n                            ? op.fields\n                                ? new manyToOneFilterHelper(field, entity.fields, op)\n                                : new toOneFilterHelper(entity.fields[op.field])\n                            : new filterHelper(field);\n                        let found = false;\n                        if (fieldToFilter !== undefined && fieldToFilter != null) {\n                            if (fieldToFilter.$id !== undefined)\n                                fieldToFilter = fieldToFilter.$id;\n                            for (const key in fieldToFilter) {\n                                if (Object.prototype.hasOwnProperty.call(fieldToFilter, key)) {\n                                    const element = fieldToFilter[key];\n                                    switch (key) {\n                                        case '$gte':\n                                        case '>=':\n                                            result.push(fh.isGreaterOrEqualTo(element));\n                                            found = true;\n                                            break;\n                                        case '$gt':\n                                        case '>':\n                                            result.push(fh.isGreaterThan(element));\n                                            found = true;\n                                            break;\n                                        case '$lte':\n                                        case '<=':\n                                            result.push(fh.isLessOrEqualTo(element));\n                                            found = true;\n                                            break;\n                                        case '$lt':\n                                        case '<':\n                                            result.push(fh.isLessThan(element));\n                                            found = true;\n                                            break;\n                                        case '$ne':\n                                        case '!=':\n                                        case '$nin':\n                                            found = true;\n                                            if (Array.isArray(element)) {\n                                                result.push(fh.isNotIn(element));\n                                            }\n                                            else\n                                                result.push(fh.isDifferentFrom(element));\n                                            break;\n                                        case '$in':\n                                            found = true;\n                                            result.push(fh.isIn(element));\n                                            break;\n                                        case '$contains':\n                                            found = true;\n                                            result.push(fh.contains(element));\n                                            break;\n                                        case '$notContains':\n                                            found = true;\n                                            result.push(fh.notContains(element));\n                                            break;\n                                    }\n                                }\n                            }\n                            if (Array.isArray(fieldToFilter)) {\n                                found = true;\n                                result.push(fh.isIn(fieldToFilter));\n                            }\n                        }\n                        if (!found && fieldToFilter !== undefined) {\n                            result.push(fh.isEqualTo(fieldToFilter));\n                        }\n                    }\n                }\n            }\n        }\n        return new AndFilter(...result);\n    }\n    constructor(apply) {\n        this.apply = apply;\n    }\n    __applyToConsumer(add) {\n        this.apply(add);\n    }\n    /**\n     * Resolves an entity filter.\n     *\n     * This method takes a filter which can be either an instance of `EntityFilter`\n     * or a function that returns an instance of `EntityFilter` or a promise that\n     * resolves to an instance of `EntityFilter`. It then resolves the filter if it\n     * is a function and returns the resulting `EntityFilter`.\n     *\n     * @template entityType The type of the entity that the filter applies to.\n     * @param {EntityFilter<entityType> | (() => EntityFilter<entityType> | Promise<EntityFilter<entityType>>)} filter The filter to resolve.\n     * @returns {Promise<EntityFilter<entityType>>} The resolved entity filter.\n     */\n    static async resolve(filter) {\n        if (typeof filter === 'function')\n            return await filter();\n        return filter;\n    }\n    toJson() {\n        let r = new FilterSerializer();\n        this.__applyToConsumer(r);\n        return r.result;\n    }\n    //@internal\n    static async translateCustomWhere(r, entity, remult) {\n        let f = new customTranslator(async (filterKey, custom) => {\n            let r = [];\n            for (const key in entity.entityType) {\n                const element = entity.entityType[key];\n                if (element &&\n                    element.rawFilterInfo &&\n                    element.rawFilterInfo.rawFilterTranslator) {\n                    if (element.rawFilterInfo.key == filterKey) {\n                        r.push(await Filter.fromEntityFilter(entity, await element.rawFilterInfo.rawFilterTranslator(custom, remult)));\n                    }\n                }\n            }\n            return r;\n        });\n        r.__applyToConsumer(f);\n        await f.resolve();\n        r = new Filter((x) => f.applyTo(x));\n        return r;\n    }\n}\nclass filterHelper {\n    metadata;\n    constructor(metadata) {\n        this.metadata = metadata;\n    }\n    processVal(val) {\n        let ei = getEntitySettings(this.metadata.valueType, false);\n        if (ei) {\n            if (val === undefined || val === null) {\n                if (val === null && !this.metadata.allowNull) {\n                    const rel = getRelationFieldInfo(this.metadata);\n                    if (rel?.type === 'reference')\n                        if (rel.toRepo.metadata.idMetadata.field.options.valueType === Number)\n                            return 0;\n                        else\n                            return '';\n                }\n                return null;\n            }\n            if (typeof val === 'string' || typeof val === 'number')\n                return val;\n            return getEntityRef(val).getId();\n        }\n        return val;\n    }\n    contains(val) {\n        return new Filter((add) => add.containsCaseInsensitive(this.metadata, val));\n    }\n    notContains(val) {\n        return new Filter((add) => add.notContainsCaseInsensitive(this.metadata, val));\n    }\n    isLessThan(val) {\n        val = this.processVal(val);\n        return new Filter((add) => add.isLessThan(this.metadata, val));\n    }\n    isGreaterOrEqualTo(val) {\n        val = this.processVal(val);\n        return new Filter((add) => add.isGreaterOrEqualTo(this.metadata, val));\n    }\n    isNotIn(values) {\n        return new Filter((add) => {\n            for (const v of values) {\n                add.isDifferentFrom(this.metadata, this.processVal(v));\n            }\n        });\n    }\n    isDifferentFrom(val) {\n        val = this.processVal(val);\n        if ((val === null || val === undefined) && this.metadata.allowNull)\n            return new Filter((add) => add.isNotNull(this.metadata));\n        return new Filter((add) => add.isDifferentFrom(this.metadata, val));\n    }\n    isLessOrEqualTo(val) {\n        val = this.processVal(val);\n        return new Filter((add) => add.isLessOrEqualTo(this.metadata, val));\n    }\n    isGreaterThan(val) {\n        val = this.processVal(val);\n        return new Filter((add) => add.isGreaterThan(this.metadata, val));\n    }\n    isEqualTo(val) {\n        val = this.processVal(val);\n        if ((val === null || val === undefined) && this.metadata.allowNull)\n            return new Filter((add) => add.isNull(this.metadata));\n        return new Filter((add) => add.isEqualTo(this.metadata, val));\n    }\n    isIn(val) {\n        val = val.map((x) => this.processVal(x));\n        if (val?.length == 1 && val[0] != undefined && val[0] !== null)\n            return new Filter((add) => add.isEqualTo(this.metadata, val[0]));\n        return new Filter((add) => add.isIn(this.metadata, val));\n    }\n}\nclass toOneFilterHelper extends filterHelper {\n    processVal(val) {\n        if (!val)\n            return null;\n        if (typeof val === 'string' || typeof val === 'number')\n            return val;\n        return getEntityRef(val).getId();\n    }\n}\nclass manyToOneFilterHelper {\n    metadata;\n    fields;\n    relationOptions;\n    constructor(metadata, fields, relationOptions) {\n        this.metadata = metadata;\n        this.fields = fields;\n        this.relationOptions = relationOptions;\n    }\n    processVal(val) {\n        throw new Error('Invalid for Many To One Relation Field');\n    }\n    contains(val) {\n        throw new Error('Invalid for Many To One Relation Field');\n    }\n    notContains(val) {\n        throw new Error('Invalid for Many To One Relation Field');\n    }\n    isLessThan(val) {\n        throw new Error('Invalid for Many To One Relation Field');\n    }\n    isGreaterOrEqualTo(val) {\n        throw new Error('Invalid for Many To One Relation Field');\n    }\n    isNotIn(values) {\n        return new Filter((add) => {\n            values.forEach((v) => this.isDifferentFrom(v).__applyToConsumer(add));\n        });\n    }\n    isDifferentFrom(val) {\n        return new Filter((add) => {\n            const or = [];\n            for (const key in this.relationOptions.fields) {\n                if (Object.prototype.hasOwnProperty.call(this.relationOptions.fields, key)) {\n                    const keyInMyEntity = this.relationOptions.fields[key];\n                    or.push(new Filter((add) => new filterHelper(this.fields.find(keyInMyEntity))\n                        .isDifferentFrom(val[key])\n                        .__applyToConsumer(add)));\n                }\n            }\n            add.or(or);\n        });\n    }\n    isLessOrEqualTo(val) {\n        throw new Error('Invalid for Many To One Relation Field');\n    }\n    isGreaterThan(val) {\n        throw new Error('Invalid for Many To One Relation Field');\n    }\n    isEqualTo(val) {\n        return new Filter((add) => {\n            for (const key in this.relationOptions.fields) {\n                if (Object.prototype.hasOwnProperty.call(this.relationOptions.fields, key)) {\n                    const keyInMyEntity = this.relationOptions.fields[key];\n                    new filterHelper(this.fields.find(keyInMyEntity))\n                        .isEqualTo(val[key])\n                        .__applyToConsumer(add);\n                }\n            }\n        });\n    }\n    isIn(val) {\n        return new Filter((add) => {\n            add.or(val.map((v) => this.isEqualTo(v)));\n        });\n    }\n}\nexport class AndFilter extends Filter {\n    filters;\n    constructor(...filters) {\n        super((add) => {\n            for (const iterator of this.filters) {\n                if (iterator)\n                    iterator.__applyToConsumer(add);\n            }\n        });\n        this.filters = filters;\n    }\n    add(filter) {\n        this.filters.push(filter);\n    }\n}\nexport class OrFilter extends Filter {\n    filters;\n    constructor(...filters) {\n        super((add) => {\n            let f = this.filters.filter((x) => x !== undefined);\n            if (f.length > 1) {\n                add.or(f);\n            }\n            else if (f.length == 1)\n                f[0].__applyToConsumer(add);\n        });\n        this.filters = filters;\n    }\n}\nexport const customUrlToken = '$custom$';\nexport const customDatabaseFilterToken = '$db$';\nconst customArrayToken = '$an array';\nexport class FilterSerializer {\n    result = {};\n    constructor() { }\n    databaseCustom(databaseCustom) {\n        throw new Error('database custom is not allowed with api calls.');\n    }\n    custom(key, customItem) {\n        if (Array.isArray(customItem))\n            customItem = { [customArrayToken]: customItem };\n        this.add(customUrlToken + key, customItem);\n    }\n    hasUndefined = false;\n    add(key, val) {\n        if (val === undefined)\n            this.hasUndefined = true;\n        let r = this.result;\n        if (!r[key]) {\n            r[key] = val;\n            return;\n        }\n        let v = r[key];\n        if (v instanceof Array) {\n            v.push(val);\n        }\n        else\n            v = [v, val];\n        r[key] = v;\n    }\n    or(orElements) {\n        this.add('OR', orElements.map((x) => {\n            let f = new FilterSerializer();\n            x.__applyToConsumer(f);\n            return f.result;\n        }));\n    }\n    isNull(col) {\n        this.add(col.key + '.null', true);\n    }\n    isNotNull(col) {\n        this.add(col.key + '.null', false);\n    }\n    isIn(col, val) {\n        this.add(col.key + '.in', val.map((x) => col.valueConverter.toJson(x)));\n    }\n    isEqualTo(col, val) {\n        this.add(col.key, col.valueConverter.toJson(val));\n    }\n    isDifferentFrom(col, val) {\n        this.add(col.key + '.ne', col.valueConverter.toJson(val));\n    }\n    isGreaterOrEqualTo(col, val) {\n        this.add(col.key + '.gte', col.valueConverter.toJson(val));\n    }\n    isGreaterThan(col, val) {\n        this.add(col.key + '.gt', col.valueConverter.toJson(val));\n    }\n    isLessOrEqualTo(col, val) {\n        this.add(col.key + '.lte', col.valueConverter.toJson(val));\n    }\n    isLessThan(col, val) {\n        this.add(col.key + '.lt', col.valueConverter.toJson(val));\n    }\n    containsCaseInsensitive(col, val) {\n        this.add(col.key + '.contains', val);\n    }\n    notContainsCaseInsensitive(col, val) {\n        this.add(col.key + '.notContains', val);\n    }\n}\nexport function entityFilterToJson(entityDefs, where) {\n    if (!where)\n        return {};\n    return Filter.fromEntityFilter(entityDefs, where).toJson();\n}\nexport function buildFilterFromRequestParameters(entity, filterInfo) {\n    let where = {};\n    function addAnd(what) {\n        if (!where.$and) {\n            where.$and = [];\n        }\n        where.$and.push(what);\n    }\n    function addToFilterObject(key, val) {\n        if (where[key] === undefined)\n            where[key] = val;\n        else {\n            addAnd({ [key]: val });\n        }\n    }\n    ;\n    [...entity.fields].forEach((col) => {\n        function addFilter(operation, theFilter, jsonArray = false, asString = false) {\n            let val = filterInfo.get(col.key + operation);\n            if (val !== undefined) {\n                let addFilter = (val) => {\n                    let theVal = val;\n                    if (jsonArray) {\n                        let arr;\n                        if (typeof val === 'string')\n                            arr = JSON.parse(val);\n                        else\n                            arr = val;\n                        theVal = arr.map((x) => asString ? x : col.valueConverter.fromJson(x));\n                    }\n                    else {\n                        theVal = asString ? theVal : col.valueConverter.fromJson(theVal);\n                    }\n                    let f = theFilter(theVal);\n                    if (f !== undefined) {\n                        addToFilterObject(col.key, f);\n                    }\n                };\n                if (!jsonArray && val instanceof Array) {\n                    val.forEach((v) => {\n                        addFilter(v);\n                    });\n                }\n                else {\n                    if (jsonArray) {\n                        if (typeof val === 'string')\n                            val = JSON.parse(val);\n                    }\n                    const array = separateArrayFromInnerArray(val);\n                    for (const x of array) {\n                        addFilter(x);\n                    }\n                }\n            }\n        }\n        addFilter('', (val) => val);\n        addFilter('.gt', (val) => ({ $gt: val }));\n        addFilter('.gte', (val) => ({ $gte: val }));\n        addFilter('.lt', (val) => ({ $lt: val }));\n        addFilter('.lte', (val) => ({ $lte: val }));\n        addFilter('.ne', (val) => ({ $ne: val }));\n        addFilter('.in', (val) => val, true);\n        var nullFilter = filterInfo.get(col.key + '.null');\n        if (nullFilter) {\n            nullFilter = nullFilter.toString().trim().toLowerCase();\n            switch (nullFilter) {\n                case 'y':\n                case 'true':\n                case 'yes':\n                    addToFilterObject(col.key, null);\n                    break;\n                default:\n                    addToFilterObject(col.key, { $ne: null });\n                    break;\n            }\n        }\n        addFilter('.contains', (val) => ({ $contains: val }), false, true);\n        addFilter('.notContains', (val) => ({ $notContains: val }), false, true);\n    });\n    let val = filterInfo.get('OR');\n    if (val) {\n        const array = separateArrayFromInnerArray(val);\n        const or = array.map((v) => ({\n            $or: v.map((x) => buildFilterFromRequestParameters(entity, {\n                get: (key) => x[key],\n            })),\n        }));\n        if (or.length == 1) {\n            if (!where.$or) {\n                where.$or = or[0].$or;\n            }\n            else {\n                where.$or.push(or[0].$or);\n            }\n        }\n        else {\n            addAnd({\n                $and: or,\n            });\n        }\n    }\n    for (const key in entity.entityType) {\n        const element = entity.entityType[key];\n        if (element &&\n            element.rawFilterInfo &&\n            element.rawFilterInfo.rawFilterTranslator) {\n            let custom = filterInfo.get(customUrlToken + key);\n            if (custom !== undefined) {\n                const addItem = (item) => {\n                    if (item[customArrayToken] != undefined)\n                        item = item[customArrayToken];\n                    addToFilterObject(customUrlToken + key, item);\n                };\n                if (Array.isArray(custom)) {\n                    custom.forEach((item) => addItem(item));\n                }\n                else\n                    addItem(custom);\n            }\n        }\n    }\n    return where;\n    function separateArrayFromInnerArray(val) {\n        if (!Array.isArray(val))\n            return [val];\n        const nonArray = [], array = [];\n        for (const v of val) {\n            if (Array.isArray(v)) {\n                array.push(v);\n            }\n            else\n                nonArray.push(v);\n        }\n        array.push(nonArray);\n        return array;\n    }\n}\nclass customTranslator {\n    translateCustom;\n    applyTo(x) {\n        this.commands.forEach((y) => y(x));\n    }\n    constructor(translateCustom) {\n        this.translateCustom = translateCustom;\n    }\n    commands = [];\n    promises = [];\n    or(orElements) {\n        let newOrElements;\n        this.promises.push(Promise.all(orElements.map(async (element) => {\n            let c = new customTranslator(this.translateCustom);\n            element.__applyToConsumer(c);\n            await c.resolve();\n            return new Filter((x) => c.applyTo(x));\n        })).then((x) => {\n            newOrElements = x;\n        }));\n        this.commands.push((x) => x.or(newOrElements));\n    }\n    isEqualTo(col, val) {\n        this.commands.push((x) => x.isEqualTo(col, val));\n    }\n    isDifferentFrom(col, val) {\n        this.commands.push((x) => x.isDifferentFrom(col, val));\n    }\n    isNull(col) {\n        this.commands.push((x) => x.isNull(col));\n    }\n    isNotNull(col) {\n        this.commands.push((x) => x.isNotNull(col));\n    }\n    isGreaterOrEqualTo(col, val) {\n        this.commands.push((x) => x.isGreaterOrEqualTo(col, val));\n    }\n    isGreaterThan(col, val) {\n        this.commands.push((x) => x.isGreaterThan(col, val));\n    }\n    isLessOrEqualTo(col, val) {\n        this.commands.push((x) => x.isLessOrEqualTo(col, val));\n    }\n    isLessThan(col, val) {\n        this.commands.push((x) => x.isLessThan(col, val));\n    }\n    containsCaseInsensitive(col, val) {\n        this.commands.push((x) => x.containsCaseInsensitive(col, val));\n    }\n    notContainsCaseInsensitive(col, val) {\n        this.commands.push((x) => x.notContainsCaseInsensitive(col, val));\n    }\n    isIn(col, val) {\n        this.commands.push((x) => x.isIn(col, val));\n    }\n    custom(key, customItem) {\n        this.promises.push((async () => {\n            let r = await this.translateCustom(key, customItem);\n            if (r)\n                if (Array.isArray(r))\n                    r.forEach((x) => x.__applyToConsumer(this));\n                else\n                    r.__applyToConsumer(this);\n        })());\n    }\n    databaseCustom(custom) {\n        this.commands.push((x) => x.databaseCustom(custom));\n    }\n    async resolve() {\n        while (this.promises.length > 0) {\n            let p = this.promises;\n            this.promises = [];\n            await Promise.all(p);\n        }\n    }\n}\nexport function __updateEntityBasedOnWhere(entityDefs, where, r) {\n    let w = Filter.fromEntityFilter(entityDefs, where);\n    const emptyFunction = () => { };\n    if (w) {\n        w.__applyToConsumer({\n            custom: emptyFunction,\n            databaseCustom: emptyFunction,\n            containsCaseInsensitive: emptyFunction,\n            notContainsCaseInsensitive: emptyFunction,\n            isDifferentFrom: emptyFunction,\n            isEqualTo: (col, val) => {\n                r[col.key] = val;\n            },\n            isGreaterOrEqualTo: emptyFunction,\n            isGreaterThan: emptyFunction,\n            isIn: emptyFunction,\n            isLessOrEqualTo: emptyFunction,\n            isLessThan: emptyFunction,\n            isNotNull: emptyFunction,\n            isNull: emptyFunction,\n            or: emptyFunction,\n        });\n    }\n}\nclass preciseValuesCollector {\n    rawValues = {};\n    preciseValues = new Proxy(this.rawValues, {\n        get: (target, prop) => {\n            if (prop in target) {\n                let result = target[prop];\n                if (result.bad)\n                    return undefined;\n                if (result.values.length > 0) {\n                    const relInfo = getRelationFieldInfo(result.field);\n                    if (relInfo) {\n                        if (relInfo.type === 'reference') {\n                            return result.values.map((x) => {\n                                return relInfo.toRepo.metadata.idMetadata.getIdFilter(x);\n                            });\n                        }\n                        else\n                            throw new Error('Only relations toOne without field are supported.');\n                    }\n                    return result.values;\n                }\n            }\n            return undefined;\n        },\n    });\n    ok(col, ...val) {\n        let x = this.rawValues[col.key];\n        if (!x) {\n            this.rawValues[col.key] = {\n                field: col,\n                bad: false,\n                values: [...val],\n            };\n        }\n        else {\n            x.values.push(...val.filter((y) => !x.values.includes(y)));\n        }\n    }\n    notOk(col) {\n        let x = this.rawValues[col.key];\n        if (!x) {\n            this.rawValues[col.key] = {\n                field: col,\n                bad: true,\n                values: [],\n            };\n        }\n        else {\n            x.bad = true;\n        }\n    }\n    or(orElements) {\n        const result = orElements.map((or) => {\n            let x = new preciseValuesCollector();\n            or.__applyToConsumer(x);\n            return x;\n        });\n        for (const or of result) {\n            for (const key in or.rawValues) {\n                if (Object.prototype.hasOwnProperty.call(or.rawValues, key)) {\n                    const element = or.rawValues[key];\n                    if (element) {\n                        if (element.bad)\n                            this.notOk(element.field);\n                        else {\n                            this.ok(element.field, ...element.values);\n                        }\n                    }\n                }\n            }\n        }\n        for (const key in this.rawValues) {\n            if (Object.prototype.hasOwnProperty.call(this.rawValues, key)) {\n                for (const r of result) {\n                    const element = r.rawValues[key];\n                    if (!element)\n                        this.notOk(this.rawValues[key].field);\n                }\n            }\n        }\n    }\n    isEqualTo(col, val) {\n        this.ok(col, val);\n    }\n    isDifferentFrom(col, val) {\n        this.notOk(col);\n    }\n    isNull(col) {\n        this.ok(col, null);\n    }\n    isNotNull(col) {\n        this.notOk(col);\n    }\n    isGreaterOrEqualTo(col, val) {\n        this.notOk(col);\n    }\n    isGreaterThan(col, val) {\n        this.notOk(col);\n    }\n    isLessOrEqualTo(col, val) {\n        this.notOk(col);\n    }\n    isLessThan(col, val) {\n        this.notOk(col);\n    }\n    containsCaseInsensitive(col, val) {\n        this.notOk(col);\n    }\n    notContainsCaseInsensitive(col, val) {\n        this.notOk(col);\n    }\n    isIn(col, val) {\n        this.ok(col, ...val);\n    }\n    custom(key, customItem) { }\n    databaseCustom(databaseCustom) { }\n}\n", "const remultStaticKey = Symbol.for('remult-static1');\nlet x = {\n    defaultRemultFactory: undefined,\n    remultFactory: undefined,\n    defaultRemult: undefined,\n    asyncContext: undefined,\n    columnsOfType: new Map(),\n    allEntities: [],\n    classHelpers: new Map(),\n    actionInfo: {\n        allActions: [],\n        runningOnServer: false,\n        runActionWithoutBlockingUI: (what) => {\n            return what();\n        },\n        startBusyWithProgress: () => ({\n            progress: (percent) => { },\n            close: () => { },\n        }),\n    },\n    captionTransformer: undefined,\n    defaultDataProvider: () => undefined,\n};\nif ((typeof process !== 'undefined' &&\n    process.env['IGNORE_GLOBAL_REMULT_IN_TESTS']) ||\n    typeof globalThis[remultStaticKey] === 'undefined') {\n    globalThis[remultStaticKey] = x;\n    x.remultFactory = () => defaultFactory();\n}\nelse {\n    x = globalThis[remultStaticKey];\n}\nexport const remultStatic = x;\nexport function defaultFactory() {\n    if (!remultStatic.defaultRemult) {\n        remultStatic.defaultRemult = remultStatic.defaultRemultFactory();\n    }\n    return remultStatic.defaultRemult;\n}\nexport function resetFactory() {\n    remultStatic.remultFactory = () => defaultFactory();\n}\n", "export function getRepositoryInternals(repo) {\n    const x = repo;\n    if (typeof x[getInternalKey] === 'function')\n        return x[getInternalKey]();\n    throw Error('Error getting repository internal from ' + repo);\n}\nexport const getInternalKey = Symbol.for('getInternal');\n", "import { remultStatic } from './remult-static.js';\nimport { getInternalKey } from './remult3/repository-internals.js';\n/*@internal*/\nexport class RemultProxy {\n    /* @internal*/\n    iAmRemultProxy = true;\n    /* @internal*/\n    get liveQuerySubscriber() {\n        return remultStatic.remultFactory().liveQuerySubscriber;\n    }\n    /* @internal*/\n    set liveQuerySubscriber(val) {\n        remultStatic.remultFactory().liveQuerySubscriber = val;\n    }\n    /* @internal*/\n    get liveQueryStorage() {\n        return remultStatic.remultFactory().liveQueryStorage;\n    }\n    /* @internal*/\n    set liveQueryStorage(val) {\n        remultStatic.remultFactory().liveQueryStorage = val;\n    }\n    /* @internal*/\n    get liveQueryPublisher() {\n        return remultStatic.remultFactory().liveQueryPublisher;\n    }\n    /* @internal*/\n    set liveQueryPublisher(val) {\n        remultStatic.remultFactory().liveQueryPublisher = val;\n    }\n    call(backendMethod, self, ...args) {\n        return remultStatic.remultFactory().call(backendMethod, self, ...args);\n    }\n    get context() {\n        return remultStatic.remultFactory().context;\n    }\n    get dataProvider() {\n        return remultStatic.remultFactory().dataProvider;\n    }\n    set dataProvider(provider) {\n        remultStatic.remultFactory().dataProvider = provider;\n    }\n    /*@internal*/\n    get repCache() {\n        return remultStatic.remultFactory().repCache;\n    }\n    authenticated() {\n        return remultStatic.remultFactory().authenticated();\n    }\n    isAllowed(roles) {\n        return remultStatic.remultFactory().isAllowed(roles);\n    }\n    isAllowedForInstance(instance, allowed) {\n        return remultStatic.remultFactory().isAllowedForInstance(instance, allowed);\n    }\n    clearAllCache() {\n        return remultStatic.remultFactory().clearAllCache();\n    }\n    repoCache = new Map();\n    //@ts-ignore\n    repo = (...args) => {\n        let self = remultStatic;\n        let entityCache = this.repoCache.get(args[0]);\n        if (!entityCache) {\n            this.repoCache.set(args[0], (entityCache = new Map()));\n        }\n        let result = entityCache.get(args[1]);\n        if (result)\n            return result;\n        result = {\n            get fields() {\n                return remultStatic.remultFactory().repo(...args).metadata.fields;\n            },\n            //@ts-ignore\n            [getInternalKey]() {\n                return self\n                    .remultFactory()\n                    .repo(...args)[getInternalKey]();\n            },\n            relations: (args2) => self\n                .remultFactory()\n                .repo(...args)\n                .relations(args2),\n            validate: (a, ...b) => self\n                .remultFactory()\n                .repo(...args)\n                //@ts-ignore\n                .validate(a, ...b),\n            addEventListener: (...args2) => self\n                .remultFactory()\n                .repo(...args)\n                .addEventListener(...args2),\n            count: (...args2) => self\n                .remultFactory()\n                .repo(...args)\n                .count(...args2),\n            create: (...args2) => self\n                .remultFactory()\n                .repo(...args)\n                .create(...args2),\n            delete: (args2) => self\n                .remultFactory()\n                .repo(...args)\n                .delete(args2),\n            deleteMany: (args2) => self\n                .remultFactory()\n                .repo(...args)\n                .deleteMany(args2),\n            updateMany: (...args2) => self\n                .remultFactory()\n                .repo(...args)\n                .updateMany(...args2),\n            find: (...args2) => self\n                .remultFactory()\n                .repo(...args)\n                .find(...args2),\n            findFirst: (...args2) => self\n                .remultFactory()\n                .repo(...args)\n                .findFirst(...args2),\n            findOne: (...args2) => self\n                .remultFactory()\n                .repo(...args)\n                .findOne(...args2),\n            findId: (a, b) => self\n                .remultFactory()\n                .repo(...args)\n                .findId(a, b),\n            //@ts-ignore\n            toJson: (json) => self\n                .remultFactory()\n                .repo(...args)\n                .toJson(json),\n            fromJson: (item, isNew) => self\n                .remultFactory()\n                .repo(...args)\n                .fromJson(item, isNew),\n            getEntityRef: (...args2) => self\n                .remultFactory()\n                .repo(...args)\n                .getEntityRef(...args2),\n            insert: (args2) => self\n                .remultFactory()\n                .repo(...args)\n                .insert(args2),\n            liveQuery: (...args2) => self\n                .remultFactory()\n                .repo(...args)\n                .liveQuery(...args2),\n            get metadata() {\n                return remultStatic.remultFactory().repo(...args).metadata;\n            },\n            query: (...args2) => self\n                .remultFactory()\n                .repo(...args)\n                .query(...args2),\n            save: (args2) => self\n                .remultFactory()\n                .repo(...args)\n                .save(args2),\n            update: (a, b) => self\n                .remultFactory()\n                .repo(...args)\n                .update(a, b),\n        };\n        entityCache.set(args[1], result);\n        return result;\n    };\n    get user() {\n        return remultStatic.remultFactory().user;\n    }\n    set user(info) {\n        remultStatic.remultFactory().user = info;\n    }\n    get apiClient() {\n        return remultStatic.remultFactory().apiClient;\n    }\n    set apiClient(client) {\n        remultStatic.remultFactory().apiClient = client;\n    }\n    get subscriptionServer() {\n        return remultStatic.remultFactory().subscriptionServer;\n    }\n    set subscriptionServer(value) {\n        remultStatic.remultFactory().subscriptionServer = value;\n    }\n}\nexport const remult = new RemultProxy();\n", "import { getEntityRef } from './remult3/getEntityRef.js';\nimport { getRepositoryInternals } from './remult3/repository-internals.js';\nexport function makeTitle(name) {\n    // insert a space before all caps\n    return (name\n        .replace(/([A-Z])/g, ' $1')\n        // uppercase the first character\n        .replace(/^./, (str) => str.toUpperCase())\n        .replace('Email', 'eMail')\n        .replace(' I D', ' ID'));\n}\nexport class LookupColumn {\n    repository;\n    isReferenceRelation;\n    allowNull;\n    toJson() {\n        if (!this.storedItem)\n            return undefined;\n        if (this.item === null)\n            return null;\n        return this.repository.toJson(this.item);\n    }\n    setId(val) {\n        if (this.repository.metadata.idMetadata.field.valueType == Number)\n            val = +val;\n        this.id = val;\n    }\n    waitLoadOf(id) {\n        if (id === undefined || id === null)\n            return null;\n        return getRepositoryInternals(this.repository)._getCachedByIdAsync(id, false);\n    }\n    get(id) {\n        if (id === undefined || id === null)\n            return null;\n        const result = getRepositoryInternals(this.repository)._getCachedById(id, this.isReferenceRelation);\n        if (this.isReferenceRelation && !this.storedItem) {\n            if (!this.allowNull && (this.id === 0 || this.id === ''))\n                return null;\n            return undefined;\n        }\n        return result;\n    }\n    storedItem;\n    set(item) {\n        if (item === null &&\n            !this.allowNull &&\n            this.isReferenceRelation &&\n            (this.id == 0 || this.id == '')) {\n            this.storedItem = { item: null };\n            return;\n        }\n        this.storedItem = undefined;\n        if (item) {\n            if (typeof item === 'string' || typeof item === 'number')\n                this.id = item;\n            else {\n                let eo = getEntityRef(item, false);\n                if (eo && !this.isReferenceRelation) {\n                    getRepositoryInternals(this.repository)._addToCache(item);\n                    this.id = eo.getId();\n                }\n                else {\n                    this.storedItem = { item };\n                    this.id = item[this.repository.metadata.idMetadata.field.key];\n                }\n            }\n        }\n        else if (item === null) {\n            this.id = null;\n        }\n        else {\n            this.id = undefined;\n        }\n    }\n    id;\n    constructor(repository, isReferenceRelation, allowNull) {\n        this.repository = repository;\n        this.isReferenceRelation = isReferenceRelation;\n        this.allowNull = allowNull;\n    }\n    get item() {\n        if (this.storedItem)\n            return this.storedItem.item;\n        return this.get(this.id);\n    }\n    async waitLoad() {\n        return this.waitLoadOf(this.id);\n    }\n}\n", "export class UrlBuilder {\n    url;\n    constructor(url) {\n        this.url = url;\n    }\n    add(key, value) {\n        if (this.url.indexOf('?') >= 0)\n            this.url += '&';\n        else\n            this.url += '?';\n        this.url += encodeURIComponent(key) + '=' + encodeURIComponent(value);\n    }\n    addObject(object, suffix = '') {\n        if (object != undefined)\n            for (var key in object) {\n                let val = object[key];\n                this.add(key + suffix, val);\n            }\n    }\n}\n", "export const flags = {\n    error500RetryCount: 4,\n};\n//y1 TODO - discuss next auth withRemult paradox - the gift that keeps on giving - it's doing something crazy there!!\n//p1 - review starter and examples and separate remult * auth from the routes\n//p1 - https://github.com/remult/remult/discussions/438\n//y1 - live query with count #436\n//y1 TODO - In the esm version of our tutorial - the imports are automatically .ts and not .js in react and not in vue\n//y1 TODO - consider id to also support keyof (id:['company','index']) - had problem with | (keyof Partial<entityType>)[] & `entity`\n//y1 TODO -  readonly key: keyof MembersOnly<entityType> & string\n//y1 - talk about insert / update / delete with relations\n/*\nrepo(Order).insert({},{\n  relations:{\n    orderItems:[{},{},{}]\n  }\n})\n*/\n//y1 - repo batch - for multiple operations:\n/*\nconst result = await repo.batch(x=>({\n  data:x.find(),\n  count:x.count()\n}))\n*/\n//p1 - consider upsert (where,set)\n//y1 - wait a second to close stream -see pr\n//p1 - Consider enforcing serial operations on JSON database to prevent data loss\n//y2 - soft-delete-discussion https://discord.com/channels/975754286384418847/1230386433093533698/1230386433093533698\n//p1 - prepare the createEntity discussion\n//p1 - return error on connection error\n//p1 - article on displayValue including it's definition for entities that is used in relations\n//p1 - article auth.js with express - played with it, requires type=\"module\" and a few more configurations - https://github.com/noam-honig/express-auth\n//p2 -fix remult admin not to load the html into memory until used\n//y2 - currently for string fields we default for 255 in knex (which is their default) why not just use text (varchar max) - and only use exact length when one is provided?\n//p2 - create foreign key constraints in user code - https://codesandbox.io/p/devbox/fk-validator-tdshcs\n//p2 - admin url1 - pocketbase use /_ for the admin //{allowed?:Allowed,url?:string} also checkout the admin* as it should probably be something else and didn't work in hono\n//y2 - fix validators cache\n//y2 - should we validate relations\n//y1 - dependency of live query tables  live query refresh of view on table update\n//p1 - see why mongo tests do not run anymore\n//y2 - consider replacing all errors with error classes that extend the base Error class\n//y2 - should enforce integer - currently we probably round / truncate it\n//y1 - talk about filter on objects that are not loaded -  {\n//category: repo(CompoundId).create({ company: 7, index: 3, name: '' }),\n//    }\n/*y1 - talk about modules in init express with entities/controllers,initRequest,initApi\n - support get with backend method, with url search params as the first parameter, & url as second parameter\n   - support returning redirect, and plain html (For sign in scenarios)\n\n */\n//p1 - in this video I'll use remult to turn a frontend app to a fullstack app\n/*y2 - Talk JYC - JYC - add some integrity checks on delete\n  - soft delete\n  - delete restrict (implicit, or user selected - and if so, how) (delete & update of id)\n\n*/\n//y1 - consider sql expression gets a dbnames of it's own (that already has the \"tableName\" defined correctly) maybe also the filter translator\n//y1 - tried to upgrade vitest, nuxt tests are failing with loading uuid - sounds familiar?\n//y1 - talk about the parameter issue with backend methods\n//y1 - main vs master\n//y2 - livequery for findfirst (@JY)\n/*y2 -\n//y2 - allow api update only for new rows\n  @Fields.string<Category>({\n    allowApiUpdate: (c) => getEntityRef(c).isNew(),\n  })\n  Description = \"\"*/\n//y2 - get backend methods to work when specifying types for date, and entities as poco's\n//y2 - constraints (@JY)\n/*p2 remult admin\n - when making a change and canceling - the changed value still appears\n - Small thing, I get SvelteKitError: Not found: /vite.svg\n - understand the to many relation for the admin, based on the to one\n - relation from order details to order gave a compound id info - and it is not true - same for the relation to product\n - new row when there are relations, looks funny (see product)\n - the + row in the bottom should extend to the full width\n - need a way to extract the fields from the relation - for generating relation based sql\n - allow conditional admin - like allowed\n - remult-admin doesn't handle primary key that has compound column\n - remult-admin didn't show a update for a table with a uniqua that is numeric\n*/\n//remult\n//p1 - when a tasks table exists in a different schema - we get many errors\n//p1 - live query with include\n//p1 - adjust angular tutorial starter kit for latest angular (as is in tutorial)\n//y2 - Fix problem with promise all in sql expression recurssion - when using PromiseAll in row relation loading, some sql expressions appear is recursion call even if they are not\n//p2 - when subscribe is forbidden - the query still runs after the renew process\n//p2 - 'update tasks set  where id = $1\n//p2 - type metadata.key - to keyof entity - based on cwis input\n//y2 - remove __dirname from tutorials\n//p2 - when value changes for field with error, clear error - so the user will feel comfortable\n//p2 - allowApiUpdate should be false for include in api false\n//docs\n//------\n//y2 - wrap identifier for custom filter & sql expression\n//y2 - Should we create a separate implementation of command - one that the user uses, and another that the database implements (with only the bear necesities) - for example, to provide a second paramter called field for toDb conversions\n//y2 - should we simply inherit from SqlDataProvider - and send the required parameter in the call to the base class - I think that new SqlDatabase(new PostgresDataProvider()) is a bilt combersome\n//y2 - from the crm-demo(https://crm-demo.up.railway.app/deals), after editing a deal: - _updateEntityBasedOnApi\n//y2 - Backend methods are transactions, it's not intuitive and maybe should be optional / opt in\n//y2 - how to run a transaction as a user\n//y2 - message for relation that is missing\n//y2 - consider multi tenancies\n//p2 - and validators to reference\n//y2 - discuss a default date formatter\n//y2 - add some api testing framework for user unit tests (will help with codesandbox based discussions)\n//[ ] V2 - what to do about for relations count?\n//[ ] V2 - condition? not to fetch if null etc....\n", "import { RestDataProviderHttpProviderUsingFetch } from './data-providers/rest-data-provider.js';\nimport { flags } from './remult3/remult3.js';\nexport function buildRestDataProvider(provider) {\n    if (!provider)\n        return new RestDataProviderHttpProviderUsingFetch();\n    let httpDataProvider;\n    if (!httpDataProvider) {\n        if (isExternalHttpProvider(provider)) {\n            httpDataProvider = new HttpProviderBridgeToRestDataProviderHttpProvider(provider);\n        }\n    }\n    if (!httpDataProvider) {\n        if (typeof provider === 'function') {\n            httpDataProvider = new RestDataProviderHttpProviderUsingFetch(provider);\n        }\n    }\n    return httpDataProvider;\n}\nexport function isExternalHttpProvider(item) {\n    let http = item;\n    if (http && http.get && http.put && http.post && http.delete)\n        return true;\n    return false;\n}\nexport class HttpProviderBridgeToRestDataProviderHttpProvider {\n    http;\n    constructor(http) {\n        this.http = http;\n    }\n    async post(url, data) {\n        return await retry(() => toPromise(this.http.post(url, data)));\n    }\n    delete(url) {\n        return toPromise(this.http.delete(url));\n    }\n    put(url, data) {\n        return toPromise(this.http.put(url, data));\n    }\n    async get(url) {\n        return await retry(() => toPromise(this.http.get(url)));\n    }\n}\nexport async function retry(what) {\n    let i = 0;\n    while (true) {\n        try {\n            return await what();\n        }\n        catch (err) {\n            if ((err.message?.startsWith('Error occurred while trying to proxy') ||\n                err.message?.startsWith('Error occured while trying to proxy') ||\n                err.message?.includes('http proxy error') ||\n                err.message?.startsWith('Gateway Timeout') ||\n                err.status == 500) &&\n                i++ < flags.error500RetryCount) {\n                await new Promise((res, req) => {\n                    setTimeout(() => {\n                        res({});\n                    }, 500);\n                });\n                continue;\n            }\n            throw err;\n        }\n    }\n}\nexport function toPromise(p) {\n    let r;\n    if (p['toPromise'] !== undefined) {\n        r = p['toPromise']();\n    }\n    //@ts-ignore\n    else\n        r = p;\n    return r\n        .then((x) => {\n        if (x &&\n            (x.status == 200 || x.status == 201) &&\n            x.headers &&\n            x.request &&\n            x.data)\n            //for axios\n            return x.data;\n        return x;\n    })\n        .catch(async (ex) => {\n        throw await processHttpException(ex);\n    });\n}\nexport async function processHttpException(ex) {\n    let z = await ex;\n    var error;\n    if (z.error)\n        error = z.error;\n    else if (z.isAxiosError) {\n        if (typeof z.response?.data === 'string')\n            error = z.response.data;\n        else\n            error = z?.response?.data;\n    }\n    if (!error)\n        error = z.message;\n    if (z.status == 0 && z.error.isTrusted)\n        error = 'Network Error';\n    if (typeof error === 'string') {\n        error = {\n            message: error,\n        };\n    }\n    if (z.modelState)\n        error.modelState = z.modelState;\n    let httpStatusCode = z.status;\n    if (httpStatusCode === undefined)\n        httpStatusCode = z.response?.status;\n    if (httpStatusCode !== undefined && httpStatusCode !== null) {\n        error.httpStatusCode = httpStatusCode;\n    }\n    var result = Object.assign(error, {\n    //     exception: ex disabled for now because JSON.stringify crashed with this\n    });\n    return result;\n}\n", "import { UrlBuilder } from '../../urlBuilder.js';\nimport { buildRestDataProvider, retry } from '../buildRestDataProvider.js';\nimport { customUrlToken, Filter } from '../filter/filter-interfaces.js';\nimport { getRelationFieldInfo } from '../remult3/relationInfoMember.js';\nimport { remultStatic } from '../remult-static.js';\nexport class RestDataProvider {\n    apiProvider;\n    constructor(apiProvider) {\n        this.apiProvider = apiProvider;\n    }\n    getEntityDataProvider(entity) {\n        return new RestEntityDataProvider(() => {\n            let url = this.apiProvider()?.url;\n            if (url === undefined || url === null)\n                url = '/api';\n            return url + '/' + entity.key;\n        }, () => {\n            return buildRestDataProvider(this.apiProvider().httpClient);\n        }, entity);\n    }\n    async transaction(action) {\n        throw new Error('Method not implemented.');\n    }\n    isProxy = true;\n}\n//@internal\nexport function findOptionsToJson(options, meta) {\n    if (options.include) {\n        let newInclude = {};\n        for (const key in options.include) {\n            if (Object.prototype.hasOwnProperty.call(options.include, key)) {\n                let element = options.include[key];\n                if (typeof element === 'object') {\n                    const rel = getRelationFieldInfo(meta.fields.find(key));\n                    if (rel) {\n                        element = findOptionsToJson(element, rel.toRepo.metadata);\n                    }\n                }\n                newInclude[key] = element;\n            }\n        }\n        options = { ...options, include: newInclude };\n    }\n    if (options.where)\n        options = {\n            ...options,\n            where: Filter.entityFilterToJson(meta, options.where),\n        };\n    if (options.load)\n        options = {\n            ...options,\n            load: options.load(meta.fields).map((y) => y.key),\n        };\n    return options;\n}\n//@internal\nexport function findOptionsFromJson(json, meta) {\n    let r = {};\n    for (const key of [\n        'limit',\n        'page',\n        'where',\n        'orderBy',\n        'include',\n    ]) {\n        if (json[key] !== undefined) {\n            if (key === 'where') {\n                r[key] = Filter.entityFilterFromJson(meta, json.where);\n            }\n            else if (key === 'include') {\n                let newInclude = { ...json[key] };\n                for (const key in newInclude) {\n                    if (Object.prototype.hasOwnProperty.call(newInclude, key)) {\n                        let element = newInclude[key];\n                        if (typeof element === 'object') {\n                            const rel = getRelationFieldInfo(meta.fields.find(key));\n                            if (rel) {\n                                element = findOptionsFromJson(element, rel.toRepo.metadata);\n                            }\n                        }\n                        newInclude[key] = element;\n                    }\n                }\n                r[key] = newInclude;\n            }\n            else\n                r[key] = json[key];\n        }\n    }\n    if (json.load) {\n        r.load = (z) => json.load.map((y) => z.find(y));\n    }\n    return r;\n}\nexport class RestEntityDataProvider {\n    url;\n    http;\n    entity;\n    constructor(url, http, entity) {\n        this.url = url;\n        this.http = http;\n        this.entity = entity;\n    }\n    translateFromJson(row) {\n        let result = {};\n        for (const col of this.entity.fields) {\n            result[col.key] = col.valueConverter.fromJson(row[col.key]);\n        }\n        return result;\n    }\n    translateToJson(row) {\n        let result = {};\n        for (const col of this.entity.fields) {\n            result[col.key] = col.valueConverter.toJson(row[col.key]);\n        }\n        return result;\n    }\n    async count(where) {\n        const { run } = this.buildFindRequest({ where });\n        return run('count').then((r) => +r.count);\n    }\n    async deleteMany(where) {\n        const { run } = this.buildFindRequest({ where }, 'delete');\n        return run('deleteMany').then((r) => +r.deleted);\n    }\n    async updateMany(where, data) {\n        const { run } = this.buildFindRequest({ where }, 'put');\n        return run('updateMany', this.toJsonOfIncludedKeys(data)).then((r) => +r.updated);\n    }\n    find(options) {\n        let { run } = this.buildFindRequest(options);\n        return run().then((x) => x.map((y) => this.translateFromJson(y)));\n    }\n    //@internal\n    buildFindRequest(options, method) {\n        if (!method)\n            method = 'get';\n        let url = new UrlBuilder(this.url());\n        let filterObject;\n        if (options) {\n            if (options.where) {\n                filterObject = options.where.toJson(); //        options.where.__applyToConsumer(new FilterConsumnerBridgeToUrlBuilder(url));\n                if (addFilterToUrlAndReturnTrueIfSuccessful(filterObject, url))\n                    filterObject = undefined;\n            }\n            if (options.orderBy && options.orderBy.Segments) {\n                let sort = '';\n                let order = '';\n                let hasDescending = false;\n                options.orderBy.Segments.forEach((c) => {\n                    if (sort.length > 0) {\n                        sort += ',';\n                        order += ',';\n                    }\n                    sort += c.field.key;\n                    order += c.isDescending ? 'desc' : 'asc';\n                    if (c.isDescending)\n                        hasDescending = true;\n                });\n                if (sort)\n                    url.add('_sort', sort);\n                if (hasDescending)\n                    url.add('_order', order);\n            }\n            if (options.limit)\n                url.add('_limit', options.limit);\n            if (options.page)\n                url.add('_page', options.page);\n        }\n        const run = (action, body) => {\n            let u = new UrlBuilder(url.url);\n            if (!action && filterObject) {\n                action = 'get';\n            }\n            if (action)\n                u.add('__action', action);\n            if (filterObject) {\n                body = { set: body, where: filterObject };\n                return this.http().post(u.url, body);\n            }\n            else\n                return this.http()[method](u.url, body);\n        };\n        return {\n            createKey: () => JSON.stringify({ url, filterObject }),\n            run,\n            subscribe: async (queryId) => {\n                const result = await run(liveQueryAction + queryId);\n                return {\n                    result,\n                    unsubscribe: async () => {\n                        return remultStatic.actionInfo.runActionWithoutBlockingUI(() => this.http().post(this.url() + '?__action=endLiveQuery', {\n                            id: queryId,\n                        }));\n                    },\n                };\n            },\n        };\n    }\n    update(id, data) {\n        return this.http()\n            .put(this.url() +\n            (id != '' ? '/' + encodeURIComponent(id) : '?__action=emptyId'), this.toJsonOfIncludedKeys(data))\n            .then((y) => this.translateFromJson(y));\n    }\n    toJsonOfIncludedKeys(data) {\n        let result = {};\n        let keys = Object.keys(data);\n        for (const col of this.entity.fields) {\n            if (keys.includes(col.key))\n                result[col.key] = col.valueConverter.toJson(data[col.key]);\n        }\n        return result;\n    }\n    async delete(id) {\n        if (id == '')\n            await this.deleteMany(Filter.fromEntityFilter(this.entity, this.entity.idMetadata.getIdFilter(id)));\n        else\n            return this.http().delete(this.url() + '/' + encodeURIComponent(id));\n    }\n    insert(data) {\n        return this.http()\n            .post(this.url(), this.translateToJson(data))\n            .then((y) => this.translateFromJson(y));\n    }\n    insertMany(data) {\n        return this.http()\n            .post(this.url(), data.map((data) => this.translateToJson(data)))\n            .then((y) => y.map((y) => this.translateFromJson(y)));\n    }\n}\nexport class RestDataProviderHttpProviderUsingFetch {\n    fetch;\n    constructor(fetch) {\n        this.fetch = fetch;\n    }\n    async get(url) {\n        return await retry(async () => this.myFetch(url).then((r) => {\n            return r;\n        }));\n    }\n    put(url, data) {\n        return this.myFetch(url, {\n            method: 'put',\n            body: JSON.stringify(data),\n        });\n    }\n    delete(url) {\n        return this.myFetch(url, { method: 'delete' });\n    }\n    async post(url, data) {\n        return await retry(() => this.myFetch(url, {\n            method: 'post',\n            body: JSON.stringify(data),\n        }));\n    }\n    myFetch(url, options) {\n        const headers = {};\n        if (options?.body)\n            headers['Content-type'] = 'application/json';\n        if (typeof window !== 'undefined' &&\n            typeof window.document !== 'undefined' &&\n            typeof (window.document.cookie !== 'undefined'))\n            for (const cookie of window.document.cookie.split(';')) {\n                if (cookie.trim().startsWith('XSRF-TOKEN=')) {\n                    headers['X-XSRF-TOKEN'] = cookie.split('=')[1];\n                }\n            }\n        return (this.fetch || fetch)(url, {\n            credentials: 'include',\n            method: options?.method,\n            body: options?.body,\n            headers,\n        })\n            .then((response) => {\n            return onSuccess(response);\n        })\n            .catch(async (error) => {\n            let r = await error;\n            throw r;\n        });\n    }\n}\nfunction onSuccess(response) {\n    if (response.status == 204)\n        return;\n    if (response.status >= 200 && response.status < 300)\n        return response.json();\n    else {\n        throw response\n            .json()\n            .then((x) => {\n            return {\n                ...x,\n                message: x.message || response.statusText,\n                url: response.url,\n                status: response.status,\n            };\n        })\n            .catch(() => {\n            throw {\n                message: response.statusText,\n                url: response.url,\n                status: response.status,\n            };\n        });\n    }\n}\nexport function addFilterToUrlAndReturnTrueIfSuccessful(filter, url) {\n    for (const key in filter) {\n        if (Object.prototype.hasOwnProperty.call(filter, key)) {\n            const element = filter[key];\n            if (Array.isArray(element)) {\n                if (element.length > 0 && typeof element[0] === 'object')\n                    return false;\n                if (element.length > 10)\n                    return false;\n            }\n        }\n    }\n    for (const key in filter) {\n        if (Object.prototype.hasOwnProperty.call(filter, key)) {\n            const element = filter[key];\n            if (Array.isArray(element)) {\n                if (key.endsWith('.in'))\n                    url.add(key, JSON.stringify(element));\n                else\n                    element.forEach((e) => url.add(key, e));\n            }\n            else if (key.startsWith(customUrlToken))\n                url.add(key, JSON.stringify(element));\n            else\n                url.add(key, element);\n        }\n    }\n    return true;\n}\nexport const liveQueryAction = 'liveQuery-';\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;", "import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}", "/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;", "import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;", "import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;", "// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;", "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;", "import { getRelationFieldInfo } from './remult3/relationInfoMember.js';\n/**\n * The `Sort` class is used to describe sorting criteria for queries. It is mainly used internally,\n * but it provides a few useful functions for working with sorting.\n */\nexport class Sort {\n    /**\n     * Translates the current `Sort` instance into an `EntityOrderBy` object.\n     *\n     * @returns {EntityOrderBy<any>} An `EntityOrderBy` object representing the sort criteria.\n     */\n    toEntityOrderBy() {\n        let result = {};\n        for (const seg of this.Segments) {\n            if (seg.isDescending) {\n                result[seg.field.key] = 'desc';\n            }\n            else\n                result[seg.field.key] = 'asc';\n        }\n        return result;\n    }\n    /**\n     * Constructs a `Sort` instance with the provided sort segments.\n     *\n     * @param {...SortSegment[]} segments The sort segments to be included in the sort criteria.\n     */\n    constructor(...segments) {\n        this.Segments = segments;\n    }\n    /**\n     * The segments of the sort criteria.\n     *\n     * @type {SortSegment[]}\n     */\n    Segments;\n    /**\n     * Reverses the sort order of the current sort criteria.\n     *\n     * @returns {Sort} A new `Sort` instance with the reversed sort order.\n     */\n    reverse() {\n        let r = new Sort();\n        for (const s of this.Segments) {\n            r.Segments.push({ field: s.field, isDescending: !s.isDescending });\n        }\n        return r;\n    }\n    /**\n     * Compares two objects based on the current sort criteria.\n     *\n     * @param {any} a The first object to compare.\n     * @param {any} b The second object to compare.\n     * @param {function(FieldMetadata): string} [getFieldKey] An optional function to get the field key for comparison.\n     * @returns {number} A negative value if `a` should come before `b`, a positive value if `a` should come after `b`, or zero if they are equal.\n     */\n    compare(a, b, getFieldKey) {\n        if (!getFieldKey)\n            getFieldKey = (x) => x.key;\n        let r = 0;\n        for (let i = 0; i < this.Segments.length; i++) {\n            let seg = this.Segments[i];\n            let left = fixValueForSort(a[getFieldKey(seg.field)]);\n            let right = fixValueForSort(b[getFieldKey(seg.field)]);\n            if (left > right)\n                r = 1;\n            else if (left < right)\n                r = -1;\n            if (r != 0) {\n                if (seg.isDescending)\n                    r *= -1;\n                return r;\n            }\n        }\n        return r;\n    }\n    /**\n     * Translates an `EntityOrderBy` to a `Sort` instance.\n     *\n     * @template T The entity type for the order by.\n     * @param {EntityMetadata<T>} entityDefs The metadata of the entity associated with the order by.\n     * @param {EntityOrderBy<T>} [orderBy] The `EntityOrderBy` to be translated.\n     * @returns {Sort} A `Sort` instance representing the translated order by.\n     */\n    static translateOrderByToSort(entityDefs, orderBy) {\n        if (!orderBy)\n            return undefined;\n        let sort = new Sort();\n        if (orderBy)\n            for (const key in orderBy) {\n                if (Object.prototype.hasOwnProperty.call(orderBy, key)) {\n                    const element = orderBy[key];\n                    let field = entityDefs.fields.find(key);\n                    const addSegment = (field) => {\n                        switch (element) {\n                            case 'desc':\n                                sort.Segments.push({ field, isDescending: true });\n                                break;\n                            case 'asc':\n                                sort.Segments.push({ field });\n                        }\n                    };\n                    if (field) {\n                        const rel = getRelationFieldInfo(field);\n                        if (rel?.type === 'toOne') {\n                            const op = rel.options;\n                            if (typeof op.field === 'string') {\n                                addSegment(entityDefs.fields.find(op.field));\n                            }\n                            else {\n                                if (op.fields) {\n                                    for (const key in op.fields) {\n                                        if (Object.prototype.hasOwnProperty.call(op.fields, key)) {\n                                            const keyInMyEntity = op.fields[key];\n                                            addSegment(entityDefs.fields.find(keyInMyEntity.toString()));\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else\n                            addSegment(field);\n                    }\n                }\n            }\n        return sort;\n    }\n    /**\n     * Creates a unique `Sort` instance based on the provided `Sort` and the entity metadata.\n     * This ensures that the sort criteria result in a unique ordering of entities.\n     *\n     * @template T The entity type for the sort.\n     * @param {EntityMetadata<T>} entityMetadata The metadata of the entity associated with the sort.\n     * @param {Sort} [orderBy] The `Sort` instance to be made unique.\n     * @returns {Sort} A `Sort` instance representing the unique sort criteria.\n     */\n    static createUniqueSort(entityMetadata, orderBy) {\n        if ((!orderBy || Object.keys(orderBy).length === 0) &&\n            entityMetadata.options.defaultOrderBy)\n            orderBy = Sort.translateOrderByToSort(entityMetadata, entityMetadata.options.defaultOrderBy);\n        if (!orderBy)\n            orderBy = new Sort();\n        for (const field of entityMetadata.idMetadata.fields) {\n            if (!orderBy.Segments.find((x) => x.field == field)) {\n                orderBy.Segments.push({ field: field });\n            }\n        }\n        return orderBy;\n    }\n    /**\n     * Creates a unique `EntityOrderBy` based on the provided `EntityOrderBy` and the entity metadata.\n     * This ensures that the order by criteria result in a unique ordering of entities.\n     *\n     * @template T The entity type for the order by.\n     * @param {EntityMetadata<T>} entityMetadata The metadata of the entity associated with the order by.\n     * @param {EntityOrderBy<T>} [orderBy] The `EntityOrderBy` to be made unique.\n     * @returns {EntityOrderBy<T>} An `EntityOrderBy` representing the unique order by criteria.\n     */\n    static createUniqueEntityOrderBy(entityMetadata, orderBy) {\n        if (!orderBy || Object.keys(orderBy).length === 0)\n            orderBy = entityMetadata.options.defaultOrderBy;\n        if (!orderBy)\n            orderBy = {};\n        else\n            orderBy = { ...orderBy };\n        for (const field of entityMetadata.idMetadata.fields) {\n            if (!orderBy[field.key]) {\n                orderBy[field.key] = 'asc';\n            }\n        }\n        return orderBy;\n    }\n}\nfunction fixValueForSort(a) {\n    if (a == undefined || a == null)\n        return a;\n    if (a.id !== undefined)\n        return a.id;\n    return a;\n}\n", "import { v4 as uuid } from 'uuid';\nimport { Sort } from '../sort.js';\nimport { remult as defaultRemult } from '../remult-proxy.js';\nimport { getRepositoryInternals } from '../remult3/repository-internals.js';\nexport const streamUrl = 'stream';\n//@internal\nexport class LiveQuerySubscriber {\n    repo;\n    query;\n    sendDefaultState(onResult) {\n        onResult(this.createReducerType(() => [...this.defaultQueryState], this.allItemsMessage(this.defaultQueryState)));\n    }\n    queryChannel;\n    subscribeCode;\n    unsubscribe = () => { };\n    async setAllItems(result) {\n        const items = await getRepositoryInternals(this.repo)._fromJsonArray(result, this.query.options);\n        this.forListeners((listener) => {\n            listener(() => {\n                return items;\n            });\n        }, this.allItemsMessage(items));\n    }\n    allItemsMessage(items) {\n        return [\n            {\n                type: 'all',\n                data: items,\n            },\n        ];\n    }\n    forListeners(what, changes) {\n        what((reducer) => {\n            this.defaultQueryState = reducer(this.defaultQueryState);\n            if (changes.find((c) => c.type === 'add' || c.type === 'replace')) {\n                if (this.query.options.orderBy) {\n                    const o = Sort.translateOrderByToSort(this.repo.metadata, this.query.options.orderBy);\n                    this.defaultQueryState.sort((a, b) => o.compare(a, b));\n                }\n            }\n        });\n        for (const l of this.listeners) {\n            what((reducer) => {\n                l.next(this.createReducerType(reducer, changes));\n            });\n        }\n    }\n    createReducerType(applyChanges, changes) {\n        return {\n            applyChanges,\n            changes,\n            items: this.defaultQueryState,\n        };\n    }\n    async handle(messages) {\n        {\n            let x = messages.filter(({ type }) => type == 'add' || type == 'replace');\n            let loadedItems = await getRepositoryInternals(this.repo)._fromJsonArray(x.map((m) => m.data.item), this.query.options);\n            for (let index = 0; index < x.length; index++) {\n                const element = x[index];\n                element.data.item = loadedItems[index];\n            }\n        }\n        this.forListeners((listener) => {\n            listener((items) => {\n                if (!items)\n                    items = [];\n                for (const message of messages) {\n                    switch (message.type) {\n                        case 'all':\n                            this.setAllItems(message.data);\n                            break;\n                        case 'replace': {\n                            items = items.map((x) => this.repo.metadata.idMetadata.getId(x) === message.data.oldId\n                                ? message.data.item\n                                : x);\n                            break;\n                        }\n                        case 'add':\n                            items = items.filter((x) => this.repo.metadata.idMetadata.getId(x) !==\n                                this.repo.metadata.idMetadata.getId(message.data.item));\n                            items.push(message.data.item);\n                            break;\n                        case 'remove':\n                            items = items.filter((x) => this.repo.metadata.idMetadata.getId(x) !== message.data.id);\n                            break;\n                    }\n                }\n                return items;\n            });\n        }, messages);\n    }\n    defaultQueryState = [];\n    listeners = [];\n    id = uuid();\n    constructor(repo, query, userId) {\n        this.repo = repo;\n        this.query = query;\n        this.queryChannel = `users:${userId}:queries:${this.id}`;\n        this.id = this.queryChannel;\n    }\n}\nexport const liveQueryKeepAliveRoute = '_liveQueryKeepAlive';\n/**\n * The `SubscriptionChannel` class is used to send messages from the backend to the frontend,\n * using the same mechanism used by live queries.\n *\n * @template messageType The type of the message that the channel will handle.\n * @example\n * // Defined in code that is shared between the frontend and the backend\n * const statusChange = new SubscriptionChannel<{ oldStatus: number, newStatus: number }>(\"statusChange\");\n *\n * // Backend: Publishing a message\n * statusChange.publish({ oldStatus: 1, newStatus: 2 });\n *\n * // Frontend: Subscribing to messages\n * statusChange.subscribe((message) => {\n *     console.log(`Status changed from ${message.oldStatus} to ${message.newStatus}`);\n * });\n *\n * // Note: If you want to publish from the frontend, use a BackendMethod for that.\n */\nexport class SubscriptionChannel {\n    channelKey;\n    /**\n     * Constructs a new `SubscriptionChannel` instance.\n     *\n     * @param {string} channelKey The key that identifies the channel.\n     */\n    constructor(channelKey) {\n        this.channelKey = channelKey;\n    }\n    /**\n     * Publishes a message to the channel. This method should only be used on the backend.\n     *\n     * @param {messageType} message The message to be published.\n     * @param {Remult} [remult] An optional instance of Remult to use for publishing the message.\n     */\n    publish(message, remult) {\n        remult = remult || defaultRemult;\n        remult.subscriptionServer.publishMessage(this.channelKey, message);\n    }\n    //@internal\n    subscribe(next, remult) {\n        remult = remult || defaultRemult;\n        let listener = next;\n        if (typeof next === 'function') {\n            listener = {\n                next,\n            };\n        }\n        listener.error ??= () => { };\n        listener.complete ??= () => { };\n        return remult.liveQuerySubscriber.subscribeChannel(this.channelKey, listener);\n    }\n}\n//TODO2 - consider moving the queued job mechanism into this.\n", "import { buildRestDataProvider } from '../buildRestDataProvider.js';\nimport { RestDataProvider } from '../data-providers/rest-data-provider.js';\nimport { remultStatic } from '../remult-static.js';\nimport { getRepositoryInternals } from '../remult3/repository-internals.js';\nimport { liveQueryKeepAliveRoute, LiveQuerySubscriber, } from './SubscriptionChannel.js';\n/* @internal*/\nexport class LiveQueryClient {\n    apiProvider;\n    getUserId;\n    wrapMessageHandling(handleMessage) {\n        var x = this.apiProvider().wrapMessageHandling;\n        if (x)\n            x(handleMessage);\n        else\n            handleMessage();\n    }\n    queries = new Map();\n    hasQueriesForTesting() {\n        return this.queries.size > 0;\n    }\n    channels = new Map();\n    constructor(apiProvider, getUserId) {\n        this.apiProvider = apiProvider;\n        this.getUserId = getUserId;\n    }\n    runPromise(p) {\n        return p;\n    }\n    close() {\n        this.queries.clear();\n        this.channels.clear();\n        this.closeIfNoListeners();\n    }\n    async subscribeChannel(key, onResult) {\n        let onUnsubscribe = () => { };\n        const client = await this.openIfNoOpened();\n        try {\n            let q = this.channels.get(key);\n            if (!q) {\n                this.channels.set(key, (q = new MessageChannel()));\n                try {\n                    q.unsubscribe = await client.subscribe(key, (value) => this.wrapMessageHandling(() => q.handle(value)), (err) => {\n                        onResult.error(err);\n                    });\n                }\n                catch (err) {\n                    onResult.error(err);\n                    throw err;\n                }\n            }\n            q.listeners.push(onResult);\n            onUnsubscribe = () => {\n                q.listeners.splice(q.listeners.indexOf(onResult), 1);\n                if (q.listeners.length == 0) {\n                    this.channels.delete(key);\n                    q.unsubscribe();\n                }\n                this.closeIfNoListeners();\n            };\n        }\n        catch (err) {\n            onResult.error(err);\n            throw err;\n        }\n        return () => {\n            onUnsubscribe();\n            onUnsubscribe = () => { };\n        };\n    }\n    closeIfNoListeners() {\n        if (this.client)\n            if (this.queries.size === 0 && this.channels.size === 0) {\n                this.runPromise(this.client.then((x) => x.close()));\n                this.client = undefined;\n                clearInterval(this.interval);\n                this.interval = undefined;\n            }\n    }\n    subscribe(repo, options, listener) {\n        let alive = true;\n        let onUnsubscribe = () => {\n            alive = false;\n        };\n        this.runPromise(getRepositoryInternals(repo)\n            ._buildEntityDataProviderFindOptions(options)\n            .then((opts) => {\n            if (!alive)\n                return;\n            const { createKey, subscribe } = new RestDataProvider(this.apiProvider)\n                .getEntityDataProvider(repo.metadata)\n                .buildFindRequest(opts);\n            const eventTypeKey = createKey();\n            let q = this.queries.get(eventTypeKey);\n            if (!q) {\n                this.queries.set(eventTypeKey, (q = new LiveQuerySubscriber(repo, { entityKey: repo.metadata.key, options }, this.getUserId())));\n                q.subscribeCode = () => {\n                    if (q.unsubscribe) {\n                        q.unsubscribe();\n                        q.unsubscribe = () => { };\n                    }\n                    this.runPromise(this.subscribeChannel(q.queryChannel, {\n                        next: (value) => this.runPromise(q.handle(value)),\n                        complete: () => { },\n                        error: (er) => {\n                            q.listeners.forEach((l) => l.error(er));\n                        },\n                    }).then((unsubscribeToChannel) => {\n                        if (q.listeners.length == 0) {\n                            unsubscribeToChannel();\n                            return;\n                        }\n                        this.runPromise(subscribe(q.queryChannel)\n                            .then((r) => {\n                            if (q.listeners.length === 0) {\n                                r.unsubscribe();\n                                unsubscribeToChannel();\n                                return;\n                            }\n                            this.runPromise(q.setAllItems(r.result));\n                            q.unsubscribe = () => {\n                                q.unsubscribe = () => { };\n                                unsubscribeToChannel();\n                                this.runPromise(r.unsubscribe());\n                            };\n                        })\n                            .catch((err) => {\n                            q.listeners.forEach((l) => l.error(err));\n                            unsubscribeToChannel();\n                            this.queries.delete(eventTypeKey);\n                        }));\n                    })).catch((err) => {\n                        q.listeners.forEach((l) => l.error(err));\n                    });\n                };\n                q.subscribeCode();\n            }\n            else {\n                q.sendDefaultState(listener.next);\n            }\n            q.listeners.push(listener);\n            onUnsubscribe = () => {\n                q.listeners.splice(q.listeners.indexOf(listener), 1);\n                listener.complete();\n                if (q.listeners.length == 0) {\n                    this.queries.delete(eventTypeKey);\n                    q.unsubscribe();\n                }\n                this.closeIfNoListeners();\n            };\n        })\n            .catch((err) => {\n            listener.error(err);\n        }));\n        return () => {\n            onUnsubscribe();\n        };\n    }\n    client;\n    interval;\n    openIfNoOpened() {\n        if (!this.client) {\n            this.interval = setInterval(async () => {\n                const ids = [];\n                for (const q of this.queries.values()) {\n                    ids.push(q.queryChannel);\n                }\n                if (ids.length > 0) {\n                    let p = this.apiProvider();\n                    const invalidIds = await this.runPromise(await remultStatic.actionInfo.runActionWithoutBlockingUI(() => buildRestDataProvider(p.httpClient).post(p.url + '/' + liveQueryKeepAliveRoute, ids)));\n                    for (const id of invalidIds) {\n                        for (const q of this.queries.values()) {\n                            if (q.queryChannel === id)\n                                q.subscribeCode();\n                        }\n                    }\n                }\n            }, 30000);\n            return this.runPromise((this.client = this.apiProvider().subscriptionClient.openConnection(() => {\n                for (const q of this.queries.values()) {\n                    q.subscribeCode();\n                }\n            })));\n        }\n        return this.client;\n    }\n}\nclass MessageChannel {\n    id;\n    unsubscribe = () => { };\n    async handle(message) {\n        for (const l of this.listeners) {\n            l.next(message);\n        }\n    }\n    listeners = [];\n    constructor() { }\n}\n", "import { buildRestDataProvider } from '../buildRestDataProvider.js';\nimport { remult } from '../remult-proxy.js';\nimport { remultStatic } from '../remult-static.js';\nimport { flags } from '../remult3/remult3.js';\nimport { streamUrl } from './SubscriptionChannel.js';\nexport class SseSubscriptionClient {\n    openConnection(onReconnect) {\n        let connectionId;\n        const channels = new Map();\n        const provider = buildRestDataProvider(remult.apiClient.httpClient);\n        let connected = false;\n        let source;\n        const client = {\n            close() {\n                source.close();\n            },\n            async subscribe(channel, handler) {\n                let listeners = channels.get(channel);\n                if (!listeners) {\n                    channels.set(channel, (listeners = []));\n                    await subscribeToChannel(channel);\n                }\n                listeners.push(handler);\n                return () => {\n                    listeners.splice(listeners.indexOf(handler, 1));\n                    if (listeners.length == 0) {\n                        remultStatic.actionInfo.runActionWithoutBlockingUI(() => provider.post(remult.apiClient.url + '/' + streamUrl + '/unsubscribe', {\n                            channel: channel,\n                            clientId: connectionId,\n                        }));\n                        channels.delete(channel);\n                    }\n                };\n            },\n        };\n        const createConnectionPromise = () => new Promise((res) => {\n            createConnection();\n            let retryCount = 0;\n            function createConnection() {\n                if (source)\n                    source.close();\n                source = SseSubscriptionClient.createEventSource(remult.apiClient.url + '/' + streamUrl);\n                source.onmessage = (e) => {\n                    let message = JSON.parse(e.data);\n                    const listeners = channels.get(message.channel);\n                    if (listeners)\n                        listeners.forEach((x) => x(message.data));\n                };\n                source.onerror = (e) => {\n                    console.error('Live Query Event Source Error', e);\n                    source.close();\n                    if (retryCount++ < flags.error500RetryCount) {\n                        setTimeout(() => {\n                            createConnection();\n                        }, 500);\n                    }\n                };\n                source.addEventListener('connectionId', async (e) => {\n                    //@ts-ignore\n                    connectionId = e.data;\n                    if (connected) {\n                        for (const channel of channels.keys()) {\n                            await subscribeToChannel(channel);\n                        }\n                        onReconnect();\n                    }\n                    else {\n                        connected = true;\n                        res(client);\n                    }\n                });\n            }\n        });\n        return createConnectionPromise();\n        async function subscribeToChannel(channel) {\n            const result = await remultStatic.actionInfo.runActionWithoutBlockingUI(() => {\n                return provider.post(remult.apiClient.url + '/' + streamUrl + '/subscribe', {\n                    channel: channel,\n                    clientId: connectionId,\n                });\n            });\n            if (result === ConnectionNotFoundError) {\n                await createConnectionPromise();\n            }\n        }\n    }\n    static createEventSource(url) {\n        return new EventSource(url, {\n            withCredentials: true,\n        });\n    }\n}\nexport const ConnectionNotFoundError = 'client connection not found';\n", "export const serverActionField = Symbol.for('serverActionField');\n", "import { remultStatic } from '../src/remult-static.js';\nexport function initDataProvider(optionsDataProvider, useStaticDefault, defaultDataProvider) {\n    let dataProvider;\n    if (typeof optionsDataProvider === 'function') {\n        dataProvider = optionsDataProvider();\n    }\n    else\n        dataProvider = Promise.resolve(optionsDataProvider);\n    dataProvider = dataProvider.then(async (dp) => {\n        if (dp)\n            return dp;\n        if (useStaticDefault)\n            dp = await remultStatic.defaultDataProvider();\n        if (dp)\n            return dp;\n        return defaultDataProvider?.();\n    });\n    return dataProvider;\n}\n", "import { RestDataProvider } from './data-providers/rest-data-provider.js';\nimport { LiveQueryClient } from './live-query/LiveQueryClient.js';\nimport { SseSubscriptionClient } from './live-query/SseSubscriptionClient.js';\nimport { remult } from './remult-proxy.js';\nimport { RepositoryImplementation, createOldEntity, } from './remult3/RepositoryImplementation.js';\nimport { serverActionField } from './server-action-info.js';\nimport { buildRestDataProvider, isExternalHttpProvider, } from './buildRestDataProvider.js';\nimport { verifyFieldRelationInfo } from './remult3/relationInfoMember.js';\nimport { remultStatic, resetFactory } from './remult-static.js';\nimport { initDataProvider } from '../server/initDataProvider.js';\nexport class RemultAsyncLocalStorage {\n    remultObjectStorage;\n    static enable() {\n        remultStatic.remultFactory = () => {\n            const r = remultStatic.asyncContext.getStore();\n            if (r)\n                return r.remult;\n            else\n                throw new Error('remult object was requested outside of a valid context, try running it within initApi or a remult request cycle');\n        };\n    }\n    static disable() {\n        resetFactory();\n    }\n    constructor(remultObjectStorage) {\n        this.remultObjectStorage = remultObjectStorage;\n    }\n    async run(remult, callback) {\n        if (this.remultObjectStorage) {\n            return this.remultObjectStorage.run({ remult }, () => callback(remult));\n        }\n        else\n            return callback(remult);\n    }\n    isInInitRequest() {\n        return this.remultObjectStorage?.getStore()?.inInitRequest;\n    }\n    setInInitRequest(val) {\n        const store = this.remultObjectStorage?.getStore();\n        if (!store)\n            return;\n        store.inInitRequest = val;\n    }\n    getStore() {\n        if (!this.remultObjectStorage) {\n            throw new Error(\"can't use static remult in this environment, `async_hooks` were not initialized\");\n        }\n        return this.remultObjectStorage.getStore();\n    }\n}\nif (!remultStatic.asyncContext)\n    remultStatic.asyncContext = new RemultAsyncLocalStorage(undefined);\nexport function isBackend() {\n    return remultStatic.actionInfo.runningOnServer || !remult.dataProvider.isProxy;\n}\nexport class Remult {\n    /**Return's a `Repository` of the specific entity type\n     * @example\n     * const taskRepo = remult.repo(Task);\n     * @see [Repository](https://remult.dev/docs/ref_repository.html)\n     * @param entity - the entity to use\n     * @param dataProvider - an optional alternative data provider to use. Useful for writing to offline storage or an alternative data provider\n     */\n    repo = (entity, dataProvider) => {\n        if (dataProvider === undefined)\n            dataProvider = this.dataProvider;\n        let dpCache = this.repCache.get(dataProvider);\n        if (!dpCache)\n            this.repCache.set(dataProvider, (dpCache = new Map()));\n        let r = dpCache.get(entity);\n        if (!r) {\n            dpCache.set(entity, (r = new RepositoryImplementation(entity, this, dataProvider, createOldEntity(entity, this))));\n            verifyFieldRelationInfo(r, this, dataProvider);\n        }\n        return r;\n    };\n    /** Returns the current user's info */\n    user;\n    /** Checks if a user was authenticated */\n    authenticated() {\n        return this.user?.id !== undefined;\n    }\n    /** checks if the user has any of the roles specified in the parameters\n     * @example\n     * remult.isAllowed(\"admin\")\n     * @see\n     * [Allowed](https://remult.dev/docs/allowed.html)\n     */\n    isAllowed(roles) {\n        if (roles == undefined)\n            return undefined;\n        if (roles instanceof Array) {\n            for (const role of roles) {\n                if (this.isAllowed(role) === true) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (typeof roles === 'function') {\n            return roles(this);\n        }\n        if (typeof roles === 'boolean')\n            return roles;\n        if (typeof roles === 'string')\n            if (this.user?.roles?.includes(roles.toString()))\n                return true;\n        return false;\n    }\n    /** checks if the user matches the allowedForInstance callback\n     * @see\n     * [Allowed](https://remult.dev/docs/allowed.html)\n     */\n    isAllowedForInstance(instance, allowed) {\n        if (Array.isArray(allowed)) {\n            {\n                for (const item of allowed) {\n                    if (this.isAllowedForInstance(instance, item))\n                        return true;\n                }\n            }\n        }\n        else if (typeof allowed === 'function') {\n            return allowed(instance, this);\n        }\n        else\n            return this.isAllowed(allowed);\n        return undefined;\n    }\n    /** The current data provider */\n    dataProvider = new RestDataProvider(() => this.apiClient);\n    /* @internal */\n    repCache = new Map();\n    constructor(provider) {\n        if (provider && provider.getEntityDataProvider) {\n            this.dataProvider = provider;\n            return;\n        }\n        if (isExternalHttpProvider(provider)) {\n            this.apiClient.httpClient = provider;\n        }\n        else if (typeof provider === 'function')\n            this.apiClient.httpClient = provider;\n        else if (provider) {\n            const apiClient = provider;\n            if (apiClient.httpClient)\n                this.apiClient.httpClient = apiClient.httpClient;\n            if (apiClient.url)\n                this.apiClient.url = apiClient.url;\n            if (apiClient.subscriptionClient)\n                this.apiClient.subscriptionClient = apiClient.subscriptionClient;\n            if (apiClient.wrapMessageHandling)\n                this.apiClient.wrapMessageHandling = apiClient.wrapMessageHandling;\n        }\n    }\n    liveQueryStorage;\n    subscriptionServer;\n    /* @internal*/\n    liveQueryPublisher = {\n        itemChanged: async () => { },\n    };\n    //@ts-ignore // type error of typescript regarding args that doesn't appear in my normal development\n    /** Used to call a `backendMethod` using a specific `remult` object\n     * @example\n     * await remult.call(TasksController.setAll, undefined, true);\n     * @param backendMethod - the backend method to call\n     * @param classInstance - the class instance of the backend method, for static backend methods use undefined\n     * @param args - the arguments to send to the backend method\n     */\n    call(backendMethod, classInstance, ...args) {\n        const z = backendMethod[serverActionField];\n        if (!z.doWork)\n            throw Error('The method received is not a valid backend method');\n        //@ts-ignore\n        return z.doWork(args, classInstance, this.apiClient.url, buildRestDataProvider(this.apiClient.httpClient));\n    }\n    /* @internal*/\n    liveQuerySubscriber = new LiveQueryClient(() => this.apiClient, () => this.user?.id);\n    /** A helper callback that can be used to debug and trace all find operations. Useful in debugging scenarios */\n    static onFind = (metadata, options) => { };\n    clearAllCache() {\n        this.repCache.clear();\n    }\n    /** A helper callback that is called whenever an entity is created. */\n    static entityRefInit;\n    /** context information that can be used to store custom information that will be disposed as part of the `remult` object */\n    context = {};\n    /** The api client that will be used by `remult` to perform calls to the `api` */\n    apiClient = {\n        url: '/api',\n        subscriptionClient: new SseSubscriptionClient(),\n    };\n}\nremultStatic.defaultRemultFactory = () => new Remult();\nexport class ClassHelper {\n    classes = new Map();\n}\nexport function setControllerSettings(target, options) {\n    let r = target;\n    while (true) {\n        let helper = remultStatic.classHelpers.get(r);\n        if (!helper)\n            remultStatic.classHelpers.set(r, (helper = new ClassHelper()));\n        helper.classes.set(target, options);\n        let p = Object.getPrototypeOf(r.prototype);\n        if (p == null)\n            break;\n        r = p.constructor;\n    }\n}\nexport class Allow {\n    static everyone = () => true;\n    static authenticated = (...args) => {\n        if (args.length > 1) {\n            return args[1].authenticated();\n        }\n        else if (args.length == 1) {\n            if (args[0].authenticated)\n                return args[0].authenticated();\n        }\n        return remult.authenticated();\n    };\n}\nexport const queryConfig = {\n    defaultPageSize: 200,\n};\nexport class EventSource {\n    listeners = [];\n    async fire() {\n        for (const l of this.listeners) {\n            await l();\n        }\n    }\n    dispatcher = {\n        observe: async (what) => {\n            this.listeners.push(what);\n            await what();\n            return () => {\n                this.listeners = this.listeners.filter((x) => x != what);\n            };\n        },\n    };\n}\nexport async function doTransaction(remult, what) {\n    const trans = new transactionLiveQueryPublisher(remult.liveQueryPublisher);\n    let ok = true;\n    const prev = remult.dataProvider;\n    try {\n        await remult.dataProvider.transaction(async (ds) => {\n            remult.dataProvider = ds;\n            remult.liveQueryPublisher = trans;\n            await what(ds);\n            ok = true;\n        });\n        if (ok)\n            await trans.flush();\n    }\n    finally {\n        remult.dataProvider = prev;\n    }\n}\nclass transactionLiveQueryPublisher {\n    orig;\n    constructor(orig) {\n        this.orig = orig;\n    }\n    transactionItems = new Map();\n    async itemChanged(entityKey, changes) {\n        let items = this.transactionItems.get(entityKey);\n        if (!items) {\n            this.transactionItems.set(entityKey, (items = []));\n        }\n        for (const c of changes) {\n            if (c.oldId !== undefined) {\n                const item = items.find((y) => y.id === c.oldId);\n                if (item !== undefined) {\n                    if (c.deleted)\n                        item.deleted = true;\n                    if (c.id != item.id)\n                        item.id = c.id;\n                }\n                else\n                    items.push(c);\n            }\n            else\n                items.push(c);\n        }\n    }\n    async flush() {\n        for (const key of this.transactionItems.keys()) {\n            await this.orig.itemChanged(key, this.transactionItems.get(key));\n        }\n    }\n}\nexport async function withRemult(callback, options) {\n    const remult = new Remult();\n    remult.dataProvider = await initDataProvider(options?.dataProvider, true, async () => remult.dataProvider);\n    return remultStatic.asyncContext.run(remult, (r) => callback(r));\n}\n", "export function assign(item, valuesToSet) {\n    if (valuesToSet)\n        Object.assign(item, valuesToSet);\n    return item;\n}\n", "export class InputTypes {\n    static number = 'number';\n    static date = 'date';\n    static checkbox = 'checkbox';\n    static password = 'password';\n    static email = 'email';\n    static tel = 'tel';\n    static time = 'time';\n}\n", "import { InputTypes } from '../inputTypes.js';\nexport class ValueConverters {\n    static Date = {\n        toJson: (val) => {\n            if (val === null)\n                return null;\n            if (!val)\n                return '';\n            if (typeof val === 'string')\n                val = new Date(val);\n            if (val instanceof Date) {\n                return val.toISOString();\n            }\n            else {\n                throw new Error('Expected date but got ' + val);\n            }\n        },\n        fromJson: (val) => {\n            if (val === null)\n                return null;\n            if (val == undefined)\n                return undefined;\n            if (val == '')\n                return undefined;\n            if (val.startsWith('0000-00-00'))\n                return undefined;\n            return new Date(Date.parse(val));\n        },\n        toDb: (x) => x,\n        fromDb: (val) => {\n            if (typeof val === 'number')\n                val = new Date(val);\n            if (typeof val === 'string')\n                val = new Date(val);\n            if (val && !(val instanceof Date))\n                throw 'expected date but got ' + val;\n            return val;\n        },\n        fromInput: (x) => ValueConverters.Date.fromJson(x),\n        toInput: (x) => ValueConverters.Date.toJson(x),\n        displayValue: (val) => {\n            if (!val)\n                return '';\n            return val.toLocaleString();\n        },\n    };\n    static DateOnly = {\n        fromInput: (x) => ValueConverters.DateOnly.fromJson(x),\n        toInput: (x) => ValueConverters.DateOnly.toJson(x),\n        toJson: (val) => {\n            var d = val;\n            if (typeof d === 'string' || typeof d === 'number')\n                d = new Date(d);\n            if (!d || d == null)\n                return null;\n            if (d.getHours() == 0)\n                return new Date(d.valueOf() - d.getTimezoneOffset() * 60000)\n                    .toISOString()\n                    .substring(0, 10);\n            else\n                return d.toISOString().substring(0, 10);\n        },\n        fromJson: (value) => {\n            if (!value || value == '' || value == '0000-00-00')\n                return null;\n            let d = new Date(Date.parse(value));\n            d.setMinutes(d.getMinutes() + d.getTimezoneOffset());\n            return d;\n        },\n        inputType: InputTypes.date,\n        toDb: (val) => {\n            if (!val)\n                return null;\n            return ValueConverters.DateOnly.fromJson(ValueConverters.DateOnly.toJson(val));\n        },\n        fromDb: (val) => {\n            return ValueConverters.Date.fromDb(val);\n        },\n        fieldTypeInDb: 'date',\n        displayValue: (value) => {\n            if (!value)\n                return '';\n            return value.toLocaleDateString(undefined);\n        },\n    };\n    static DateOnlyString = {\n        ...ValueConverters.DateOnly,\n        toDb: (d) => {\n            let val = ValueConverters.DateOnly.toJson(d);\n            if (!val)\n                return undefined;\n            return val.replace(/-/g, '');\n        },\n        fromDb: (val) => {\n            if (val === null)\n                return null;\n            if (!val)\n                return undefined;\n            return new Date(val.substring(0, 4) +\n                '-' +\n                val.substring(4, 6) +\n                '-' +\n                val.substring(6, 8));\n        },\n    };\n    static Boolean = {\n        toDb: (val) => val,\n        inputType: InputTypes.checkbox,\n        fromDb: (value) => {\n            return ValueConverters.Boolean.fromJson(value);\n        },\n        fromJson: (value) => {\n            if (typeof value === 'boolean')\n                return value;\n            if (value === 1)\n                return true;\n            if (value !== undefined && value !== null) {\n                return value.toString().trim().toLowerCase() == 'true';\n            }\n            return value;\n        },\n        toJson: (x) => x,\n        fromInput: (x) => ValueConverters.Boolean.fromJson(x),\n        toInput: (x) => ValueConverters.Boolean.toJson(x),\n    };\n    static Number = {\n        fromDb: (value) => {\n            if (value === null)\n                return null;\n            if (value !== undefined)\n                return +value;\n            return undefined;\n        },\n        toDb: (value) => value,\n        fromJson: (value) => ValueConverters.Number.fromDb(value),\n        toJson: (value) => ValueConverters.Number.toDb(value),\n        fromInput: (x, type) => {\n            let r = +x;\n            if (x === null || x === undefined)\n                return undefined;\n            return r;\n        },\n        toInput: (x, type) => {\n            return x?.toString();\n        },\n        inputType: InputTypes.number,\n    };\n    static String = {\n        fromDb: enforceString,\n        toDb: enforceString,\n        fromJson: enforceString,\n        toJson: enforceString,\n        fromInput: enforceString,\n        toInput: enforceString,\n    };\n    static Integer = {\n        ...ValueConverters.Number,\n        toJson: (value) => {\n            let val = ValueConverters.Number.toDb(value);\n            if (!val)\n                return val;\n            return +(+val).toFixed(0);\n        },\n        toDb: (value) => ValueConverters.Integer.toJson(value),\n        fieldTypeInDb: 'integer',\n    };\n    static Default = {\n        fromJson: (x) => x,\n        toJson: (x) => x,\n        fromDb: (x) => ValueConverters.JsonString.fromDb(x),\n        toDb: (x) => ValueConverters.JsonString.toDb(x),\n        fromInput: (x) => ValueConverters.Default.fromJson(x),\n        toInput: (x) => ValueConverters.Default.toJson(x),\n        displayValue: (x) => x + '',\n        fieldTypeInDb: '',\n        inputType: 'text',\n    };\n    static JsonString = {\n        fromJson: (x) => x,\n        toJson: (x) => x,\n        fromDb: (x) => x == null\n            ? null\n            : x\n                ? JSON.parse(ValueConverters.JsonString.fromJson(x))\n                : undefined,\n        toDb: (x) => x !== undefined\n            ? x === null\n                ? null\n                : JSON.stringify(ValueConverters.JsonString.toJson(x))\n            : undefined,\n        fromInput: (x) => ValueConverters.JsonString.fromJson(x),\n        toInput: (x) => ValueConverters.JsonString.toJson(x),\n    };\n    static JsonValue = {\n        fromJson: (x) => x,\n        toJson: (x) => x,\n        fromDb: (x) => x,\n        toDb: (x) => x,\n        fromInput: (x) => ValueConverters.JsonString.fromJson(x),\n        toInput: (x) => ValueConverters.JsonString.toJson(x),\n        fieldTypeInDb: 'json',\n    };\n}\nfunction enforceString(value) {\n    if (value === null || value === undefined)\n        return value;\n    if (typeof value !== 'string')\n        return value.toString();\n    return value;\n}\n", "import { Filter } from '../filter/filter-interfaces.js';\nexport function __updateEntityBasedOnWhere(entityDefs, where, r) {\n    let w = Filter.fromEntityFilter(entityDefs, where);\n    const emptyFunction = () => { };\n    if (w) {\n        w.__applyToConsumer({\n            custom: emptyFunction,\n            databaseCustom: emptyFunction,\n            containsCaseInsensitive: emptyFunction,\n            notContainsCaseInsensitive: emptyFunction,\n            isDifferentFrom: emptyFunction,\n            isEqualTo: (col, val) => {\n                r[col.key] = val;\n            },\n            isGreaterOrEqualTo: emptyFunction,\n            isGreaterThan: emptyFunction,\n            isIn: emptyFunction,\n            isLessOrEqualTo: emptyFunction,\n            isLessThan: emptyFunction,\n            isNotNull: emptyFunction,\n            isNull: emptyFunction,\n            or: emptyFunction,\n        });\n    }\n}\n", "import { findOptionsToJson } from '../data-providers/rest-data-provider.js';\nimport { getEntityRef } from './getEntityRef.js';\nimport { getRelationFieldInfo } from './relationInfoMember.js';\nexport class RelationLoader {\n    entityLoaders = new Map();\n    promises = [];\n    load(rel, findOptions) {\n        let e = this.entityLoaders.get(rel.entityType);\n        if (!e) {\n            this.entityLoaders.set(rel.entityType, (e = new EntityLoader(rel)));\n        }\n        const p = e.find(findOptions);\n        this.promises.push(p);\n        return p;\n    }\n    constructor() { }\n    async resolveAll() {\n        for (const entity of this.entityLoaders.values()) {\n            for (const variation of entity.queries.values()) {\n                variation.resolve();\n            }\n        }\n        if (this.promises.length === 0)\n            return;\n        const x = this.promises;\n        this.promises = [];\n        await Promise.all(x);\n        await this.resolveAll();\n    }\n}\nclass EntityLoader {\n    rel;\n    queries = new Map();\n    find(findOptions) {\n        const { where, ...options } = findOptionsToJson(findOptions, this.rel.metadata);\n        const optionKeys = JSON.stringify(options);\n        let q = this.queries.get(optionKeys);\n        if (!q) {\n            this.queries.set(optionKeys, (q = new QueryVariation(this.rel)));\n        }\n        return q.find(findOptions, where);\n    }\n    constructor(rel) {\n        this.rel = rel;\n    }\n}\nclass QueryVariation {\n    rel;\n    find(findOptions, where) {\n        const whereKey = JSON.stringify(where);\n        let w = this.whereVariations.get(whereKey);\n        if (!w) {\n            const keys = Object.keys(where);\n            if (keys.length === 1 &&\n                typeof where[keys[0]] !== 'object' &&\n                !findOptions.limit // because merging calls in that case may bring non more rows than the limit\n            ) {\n                let inVariation = this.pendingInStatements.get(keys[0]);\n                if (!inVariation) {\n                    this.pendingInStatements.set(keys[0], (inVariation = new PendingInStatements(this.rel, keys[0], findOptions)));\n                }\n                this.whereVariations.set(whereKey, (w = {\n                    result: inVariation.find(where),\n                }));\n            }\n            else {\n                this.whereVariations.set(whereKey, (w = {\n                    result: this.rel.find(findOptions),\n                }));\n            }\n        }\n        return w.result;\n    }\n    constructor(rel) {\n        this.rel = rel;\n    }\n    resolve() {\n        const statements = [...this.pendingInStatements.values()];\n        this.pendingInStatements.clear();\n        for (const statement of statements) {\n            statement.resolve();\n        }\n    }\n    pendingInStatements = new Map();\n    whereVariations = new Map();\n}\nclass PendingInStatements {\n    rel;\n    key;\n    options;\n    async resolve() {\n        const values = [...this.values.values()];\n        if (values.length == 1) {\n            this.rel.find(this.options).then(values[0].resolve, values[0].reject);\n            return;\n        }\n        var op = { ...this.options };\n        op.where = { [this.key]: values.map((v) => v.value) };\n        op.limit = 1000;\n        op.page = 1;\n        let vals = [];\n        try {\n            while (true) {\n                const val = await this.rel.find(op);\n                vals.push(...val);\n                if (val.length < op.limit)\n                    break;\n                op.page++;\n            }\n            for (const value of this.values.values()) {\n                value.resolve(vals.filter((x) => {\n                    const ref = getEntityRef(x);\n                    const field = ref.fields.find(this.key);\n                    const rel = getRelationFieldInfo(field.metadata);\n                    const val = rel?.type === 'reference'\n                        ? field.getId()\n                        : x[this.key];\n                    return value.value == val;\n                }));\n            }\n        }\n        catch (err) {\n            for (const value of this.values.values()) {\n                value.reject(err);\n            }\n        }\n    }\n    find(where) {\n        const val = where[this.key];\n        let valHandler = this.values.get(val);\n        if (!valHandler) {\n            let resolve;\n            let reject;\n            let result = new Promise((resolve1, reject1) => {\n                resolve = resolve1;\n                reject = reject1;\n            });\n            this.values.set(val, (valHandler = {\n                value: val,\n                resolve,\n                reject,\n                result,\n            }));\n        }\n        return valHandler.result;\n    }\n    values = new Map();\n    constructor(rel, key, options) {\n        this.rel = rel;\n        this.key = key;\n        this.options = options;\n    }\n}\n", "export class Validators {\n    static required = createValidator(async (_, e) => e.value != null && e.value != undefined && e.value !== '', 'Should not be empty');\n    static unique = createValidator(async (_, e) => {\n        if (!e.entityRef)\n            throw 'unique validation may only work on columns that are attached to an entity';\n        if (e.isBackend() && (e.isNew || e.valueChanged())) {\n            return ((await e.entityRef.repository.count({\n                [e.metadata.key]: e.value,\n            })) == 0);\n        }\n        else\n            return true;\n    }, 'already exists');\n    /**\n     * @deprecated use `unique` instead - it also runs only on the backend\n     */\n    static uniqueOnBackend = createValidator(async (_, e) => {\n        if (e.isBackend() && (e.isNew || e.valueChanged())) {\n            return ((await e.entityRef.repository.count({\n                [e.metadata.key]: e.value,\n            })) == 0);\n        }\n        else\n            return true;\n    }, Validators.unique.defaultMessage);\n    static regex = createValueValidatorWithArgs((val, regex) => regex.test(val));\n    static email = createValueValidator((val) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val), 'Invalid Email');\n    static url = createValueValidator((val) => !!new URL(val), 'Invalid Url');\n    static in = createValueValidatorWithArgs((val, values) => values.includes(val), (values) => `Value must be one of: ${values\n        .map((y) => typeof y === 'object'\n        ? y['id'] !== undefined\n            ? y['id']\n            : y.toString()\n        : y)\n        .join(', ')}`);\n    static notNull = createValueValidator((val) => val != null, 'Should not be null');\n    static enum = createValueValidatorWithArgs((value, enumObj) => Object.values(enumObj).includes(value), (enumObj) => `Value must be one of ${getEnumValues(enumObj).join(', ')}`);\n    static relationExists = createValidator(async (_, e) => {\n        if (e.valueIsNull())\n            return true;\n        if (!e.isBackend())\n            return true;\n        return Boolean(await e.load());\n    }, 'Relation value does not exist');\n    static maxLength = createValueValidatorWithArgs((val, maxLength) => val.length <= maxLength, (maxLength) => `Value must be at most ${maxLength} characters`);\n    static minLength = createValueValidatorWithArgs((val, minLength) => val.length >= minLength, (maxLength) => `Value must be at least ${maxLength} characters`);\n    static defaultMessage = 'Invalid value';\n}\nexport function createValidator(validate, defaultMessage) {\n    const validation = async (entity, e, message) => {\n        const valid = await validate(entity, e);\n        if (typeof valid === 'string' && valid.length > 0)\n            e.error = valid;\n        else if (!valid)\n            e.error =\n                (typeof message === 'function' && message(entity, e, undefined)) ||\n                    message ||\n                    (typeof defaultMessage === 'function' &&\n                        defaultMessage(entity, e, undefined)) ||\n                    defaultMessage ||\n                    Validators.defaultMessage;\n    };\n    const result = (entityOrMessage, e, message) => {\n        if (typeof entityOrMessage === 'string' ||\n            entityOrMessage === 'function' ||\n            (entityOrMessage === undefined && e === undefined)) {\n            return async (entity, e, message) => await validation(entity, e, entityOrMessage || message);\n        }\n        return validation(entityOrMessage, e, message);\n    };\n    Object.defineProperty(result, 'defaultMessage', {\n        get: () => {\n            return defaultMessage;\n        },\n        set: (val) => {\n            defaultMessage = val;\n        },\n        enumerable: true,\n    });\n    //@ts-ignore\n    return Object.assign(result, {\n        withMessage: (message) => async (entity, e) => result(entity, e, message),\n    });\n}\nexport function valueValidator(validate, defaultMessage) {\n    return (entity, e) => validate(e.value) || defaultMessage || false;\n}\nexport function createValueValidator(validate, defaultMessage) {\n    return createValidator((_, e) => {\n        if (e.value === undefined || e.value === null)\n            return true;\n        return validate(e.value);\n    }, defaultMessage);\n}\nexport function createValueValidatorWithArgs(validate, defaultMessage) {\n    const result = createValidatorWithArgsInternal((_, e, args) => {\n        if (e.value === undefined || e.value === null)\n            return true;\n        return validate(e.value, args);\n    }, (_, e, args) => (typeof defaultMessage === 'function' && defaultMessage(args)) ||\n        defaultMessage, true);\n    return Object.assign((entity, e) => result(entity, e), {\n        get defaultMessage() {\n            return defaultMessage;\n        },\n        set defaultMessage(val) {\n            defaultMessage = val;\n        },\n    });\n}\nexport function createValidatorWithArgs(validate, defaultMessage) {\n    return createValidatorWithArgsInternal(validate, defaultMessage);\n}\nfunction createValidatorWithArgsInternal(validate, defaultMessage, isValueValidator = false) {\n    const result = (args, message) => async (entity, e) => {\n        const valid = await validate(entity, e, args);\n        if (typeof valid === 'string')\n            e.error = valid;\n        else if (!valid)\n            e.error = message\n                ? typeof message === 'function'\n                    ? isValueValidator\n                        ? message(args)\n                        : message(entity, e, args)\n                    : message\n                : defaultMessage\n                    ? typeof defaultMessage === 'function'\n                        ? defaultMessage(entity, e, args)\n                        : defaultMessage\n                    : Validators.defaultMessage;\n    };\n    return Object.assign(result, {\n        get defaultMessage() {\n            return defaultMessage;\n        },\n        set defaultMessage(val) {\n            defaultMessage = val;\n        },\n    });\n}\nexport function getEnumValues(enumObj) {\n    return Object.values(enumObj).filter((x) => typeof enumObj[x] !== 'number');\n}\n", "export function addValidator(validators, newValidator, atStart = false) {\n    if (!newValidator)\n        return validators;\n    const newValidators = Array.isArray(newValidator)\n        ? newValidator\n        : [newValidator];\n    const validatorsArray = Array.isArray(validators)\n        ? validators\n        : validators\n            ? [validators]\n            : [];\n    return atStart\n        ? [...newValidators, ...validatorsArray]\n        : [...validatorsArray, ...newValidators];\n}\n", "export function isOfType(obj, checkMethod) {\n    return typeof obj[checkMethod] !== 'undefined';\n}\nexport function cast(obj, checkMethod) {\n    if (isOfType(obj, checkMethod)) {\n        return obj;\n    }\n    throw new Error(`Object is not of type ${checkMethod.toString()}`);\n}\n", "import { LookupColumn, makeTitle } from '../column.js';\nimport { CompoundIdField } from '../CompoundIdField.js';\nimport { Remult, isBackend, queryConfig, } from '../context.js';\nimport { Filter } from '../filter/filter-interfaces.js';\nimport { Sort } from '../sort.js';\nimport { assign } from '../../assign.js';\nimport { ValueConverters } from '../valueConverters.js';\nimport { findOptionsToJson } from '../data-providers/rest-data-provider.js';\nimport { remult as defaultRemult } from '../remult-proxy.js';\nimport { entityMember, getEntityKey, getEntityRef, getEntitySettings, } from './getEntityRef.js';\nimport { __updateEntityBasedOnWhere } from './__updateEntityBasedOnWhere.js';\nimport { getRelationFieldInfo, } from './relationInfoMember.js';\nimport { RelationLoader } from './relation-loader.js';\nimport { getInternalKey, } from './repository-internals.js';\nimport { entityDbName, fieldDbName, } from '../filter/filter-consumer-bridge-to-sql-request.js';\nimport { remultStatic } from '../remult-static.js';\nimport { Validators } from '../validators.js';\nimport { addValidator } from './addValidator.js';\nimport { isOfType } from '../isOfType.js';\n//import  { remult } from \"../remult-proxy\";\nlet classValidatorValidate = undefined;\n// import (\"class-validator\".toString())\n//     .then((v) => {\n//         classValidatorValidate = (item, ref) => {\n//             return v.validate(item).then(errors => {\n//                 for (const err of errors) {\n//                     for (const key in err.constraints) {\n//                         if (Object.prototype.hasOwnProperty.call(err.constraints, key)) {\n//                             const element = err.constraints[key];\n//                             ref.fields.find(err.property).error = element;\n//                         }\n//                     }\n//                 }\n//             });\n//         }\n//     })\n//     .catch(() => {\n//     });\nexport class RepositoryImplementation {\n    _entity;\n    _remult;\n    _dataProvider;\n    _info;\n    _defaultFindOptions;\n    _notFoundError(id) {\n        return {\n            message: `id ${id} not found in entity ${this.metadata.key}`,\n            httpStatusCode: 404,\n        };\n    }\n    [getInternalKey]() {\n        return this;\n    }\n    async _createAfterFilter(orderBy, lastRow) {\n        let values = new Map();\n        for (const s of Sort.translateOrderByToSort(this.metadata, orderBy)\n            .Segments) {\n            let existingVal = lastRow[s.field.key];\n            // if (typeof existingVal !== \"string\" && typeof existingVal !== \"number\") {\n            // }\n            // else {\n            //     let ei = getEntitySettings(s.field.valueType, false);\n            //     if (ei) {\n            //         existingVal = await this.remult.repo(s.field.valueType).findId(existingVal);\n            //     }\n            // }\n            values.set(s.field.key, existingVal);\n        }\n        let r = { $or: [] };\n        let equalToColumn = [];\n        for (const s of Sort.translateOrderByToSort(this.metadata, orderBy)\n            .Segments) {\n            let f = {};\n            for (const c of equalToColumn) {\n                f[c.key] = values.get(c.key);\n            }\n            equalToColumn.push(s.field);\n            if (s.isDescending) {\n                f[s.field.key] = { $lt: values.get(s.field.key) };\n            }\n            else\n                f[s.field.key] = { $gt: values.get(s.field.key) };\n            r.$or.push(f);\n        }\n        return r;\n    }\n    relations(item) {\n        return new Proxy({}, {\n            get: (target, key) => {\n                const field = this.fields.find(key);\n                const rel = getRelationFieldInfo(field);\n                if (!rel)\n                    throw Error(key + ' is not a relation');\n                const { toRepo, returnNull, returnUndefined } = this._getFocusedRelationRepo(field, item);\n                if (rel.type === 'toMany')\n                    return toRepo;\n                else\n                    return {\n                        findOne: (options) => {\n                            if (returnNull)\n                                return Promise.resolve(null);\n                            if (returnUndefined)\n                                return Promise.resolve(undefined);\n                            return toRepo.findFirst({}, options);\n                        },\n                    };\n            },\n        });\n    }\n    _getFocusedRelationRepo(field, item) {\n        const rel = getRelationFieldInfo(field);\n        let repo = rel.toRepo;\n        let { findOptions, returnNull, returnUndefined } = this._findOptionsBasedOnRelation(rel, field, undefined, item, repo);\n        const toRepo = new RepositoryImplementation(repo._entity, repo._remult, repo._dataProvider, repo._info, findOptions);\n        return { toRepo, returnNull, returnUndefined };\n    }\n    __edp;\n    get _edp() {\n        return this.__edp\n            ? this.__edp\n            : (this.__edp = this._dataProvider.getEntityDataProvider(this.metadata));\n    }\n    constructor(_entity, _remult, _dataProvider, _info, _defaultFindOptions) {\n        this._entity = _entity;\n        this._remult = _remult;\n        this._dataProvider = _dataProvider;\n        this._info = _info;\n        this._defaultFindOptions = _defaultFindOptions;\n    }\n    _idCache = new Map();\n    _getCachedById(id, doNotLoadIfNotFound) {\n        id = id + '';\n        this._getCachedByIdAsync(id, doNotLoadIfNotFound);\n        let r = this._idCache.get(id);\n        if (r instanceof Promise)\n            return undefined;\n        return r;\n    }\n    async _getCachedByIdAsync(id, doNotLoadIfNotFound) {\n        id = id + '';\n        let r = this._idCache.get(id);\n        if (r instanceof Promise)\n            return await r;\n        if (this._idCache.has(id)) {\n            return r;\n        }\n        if (doNotLoadIfNotFound)\n            return undefined;\n        this._idCache.set(id, undefined);\n        let row = this.findId(id).then((row) => {\n            if (row === undefined) {\n                r = null;\n            }\n            else\n                r = row;\n            this._idCache.set(id, r);\n            return r;\n        });\n        this._idCache.set(id, row);\n        return await row;\n    }\n    _addToCache(item) {\n        if (item)\n            this._idCache.set(this.getEntityRef(item).getId() + '', item);\n    }\n    get metadata() {\n        return this._info;\n    }\n    listeners;\n    addEventListener(listener) {\n        if (!this.listeners)\n            this.listeners = [];\n        this.listeners.push(listener);\n        return () => {\n            this.listeners.splice(this.listeners.indexOf(listener), 1);\n        };\n    }\n    query(options) {\n        return new QueryResultImpl(options, this);\n    }\n    getEntityRef(entity) {\n        let x = entity[entityMember];\n        if (!x) {\n            this._fixTypes(entity);\n            x = new rowHelperImplementation(this._info, entity, this, this._edp, this._remult, true);\n            Object.defineProperty(entity, entityMember, {\n                //I've used define property to hide this member from console.lo g\n                get: () => x,\n            });\n            x.saveOriginalData();\n        }\n        return x;\n    }\n    async delete(item) {\n        const ref = getEntityRef(item, false);\n        if (ref)\n            return ref.delete();\n        if (typeof item === 'string' || typeof item === 'number')\n            if (this._dataProvider.isProxy)\n                return this._edp.delete(item);\n            else {\n                let ref2 = await this.findId(item);\n                if (!ref2)\n                    throw this._notFoundError(item);\n                return await getEntityRef(ref2).delete();\n            }\n        let ref2 = this._getRefForExistingRow(item, undefined);\n        if (!this._dataProvider.isProxy)\n            await ref2.reload();\n        return ref2.delete();\n    }\n    async insert(entity) {\n        if (Array.isArray(entity)) {\n            if (this._dataProvider.isProxy) {\n                let refs = [];\n                let raw = [];\n                for (const item of entity) {\n                    let ref = getEntityRef(entity, false);\n                    if (ref) {\n                        if (!ref.isNew())\n                            throw 'Item is not new';\n                    }\n                    else {\n                        ref = (await this.getEntityRef(this.create(item)));\n                    }\n                    refs.push(ref);\n                    raw.push(await ref.buildDtoForInsert());\n                }\n                return promiseAll(await this._edp.insertMany(raw), (item, i) => refs[i].processInsertResponseDto(item));\n            }\n            else {\n                let r = [];\n                for (const item of entity) {\n                    r.push(await this.insert(item));\n                }\n                return r;\n            }\n        }\n        else {\n            let ref = getEntityRef(entity, false);\n            if (ref) {\n                if (!ref.isNew())\n                    throw 'Item is not new';\n                return await ref.save();\n            }\n            else {\n                return await this.getEntityRef(this.create(entity)).save();\n            }\n        }\n    }\n    get fields() {\n        return this.metadata.fields;\n    }\n    async validate(entity, ...fields) {\n        {\n            let ref = getEntityRef(entity, false);\n            if (!ref)\n                ref = this.getEntityRef({ ...entity });\n            if (!fields || fields.length === 0) {\n                return await ref.validate();\n            }\n            else {\n                ref.__clearErrorsAndReportChanged();\n                let hasError = false;\n                for (const f of fields) {\n                    if (!(await ref.fields.find(f).validate()))\n                        hasError = true;\n                }\n                if (!hasError)\n                    return undefined;\n                return ref.buildErrorInfoObject();\n            }\n        }\n    }\n    async updateMany({ where, set, }) {\n        Filter.throwErrorIfFilterIsEmpty(where, 'updateMany');\n        if (this._dataProvider.isProxy) {\n            return this._edp.updateMany(await this._translateWhereToFilter(where), set);\n        }\n        else {\n            let updated = 0;\n            for await (const item of this.query({ where })) {\n                assign(item, set);\n                await getEntityRef(item).save();\n                updated++;\n            }\n            return updated;\n        }\n    }\n    async update(id, entity) {\n        {\n            let ref = getEntityRef(entity, false);\n            if (ref)\n                return (await ref.save());\n        }\n        {\n            let ref = getEntityRef(id, false);\n            if (ref) {\n                assign(id, entity);\n                return ref.save();\n            }\n        }\n        let ref;\n        if (typeof id === 'object') {\n            ref = this._getRefForExistingRow(id, this.metadata.idMetadata.getId(id));\n            Object.assign(ref.instance, entity);\n        }\n        else\n            ref = this._getRefForExistingRow(entity, id);\n        if (this._dataProvider.isProxy) {\n            return await ref.save(Object.keys(entity));\n        }\n        else {\n            const r = await ref.reload();\n            if (!r)\n                throw this._notFoundError(ref.id);\n            for (const key in entity) {\n                if (Object.prototype.hasOwnProperty.call(entity, key)) {\n                    let f = ref.fields[key];\n                    if (entity[key] === undefined && getRelationFieldInfo(f.metadata))\n                        continue;\n                    //@ts-ignore\n                    if (f)\n                        r[key] = entity[key];\n                }\n            }\n            await this._fixTypes(r);\n            return await ref.save();\n        }\n    }\n    _getRefForExistingRow(entity, id) {\n        let ref = getEntityRef(entity, false);\n        if (!ref) {\n            const instance = new this._entity(this._remult);\n            for (const field of this._fieldsOf(entity)) {\n                instance[field.key] = entity[field.key];\n            }\n            this._fixTypes(instance);\n            let row = new rowHelperImplementation(this._info, instance, this, this._edp, this._remult, false);\n            if (typeof id === 'object')\n                id = this.metadata.idMetadata.getId(id);\n            if (id) {\n                row.id = id;\n                row.originalId = id;\n            }\n            else\n                row.id = row.getId();\n            ref = row;\n            Object.defineProperty(instance, entityMember, {\n                get: () => row,\n            });\n        }\n        return ref;\n    }\n    async save(entity) {\n        if (Array.isArray(entity)) {\n            return promiseAll(entity, (x) => this.save(x));\n        }\n        else {\n            let ref = getEntityRef(entity, false);\n            if (ref)\n                return await ref.save();\n            else if (entity instanceof EntityBase) {\n                return await this.getEntityRef(entity).save();\n            }\n            else {\n                let id = this.metadata.idMetadata.getId(entity);\n                if (id === undefined)\n                    return this.insert(entity);\n                return this.update(id, entity);\n            }\n        }\n    }\n    liveQuery(options) {\n        if (!options)\n            options = {};\n        return {\n            subscribe: (l) => {\n                let listener = l;\n                if (typeof l === 'function') {\n                    listener = {\n                        next: l,\n                        complete: () => { },\n                        error: () => { },\n                    };\n                }\n                listener.error ??= () => { };\n                listener.complete ??= () => { };\n                return this._remult.liveQuerySubscriber.subscribe(this, options, listener);\n            },\n        };\n    }\n    async _rawFind(options, skipOrderByAndLimit = false, loader) {\n        if (!options)\n            options = {};\n        if (this._defaultFindOptions) {\n            options = { ...this._defaultFindOptions, ...options };\n        }\n        let opt = await this._buildEntityDataProviderFindOptions(options);\n        if (skipOrderByAndLimit) {\n            delete opt.orderBy;\n            delete opt.limit;\n        }\n        Remult.onFind(this._info, options);\n        const rawRows = await this._edp.find(opt);\n        let result = await this._loadManyToOneForManyRows(rawRows, options, loader);\n        return result;\n    }\n    async find(options, skipOrderByAndLimit = false) {\n        const loader = new RelationLoader();\n        const result = await this._rawFind(options, skipOrderByAndLimit, loader);\n        await loader.resolveAll();\n        return result;\n    }\n    async _buildEntityDataProviderFindOptions(options) {\n        let opt = {};\n        opt = {};\n        if (!options.orderBy || Object.keys(options.orderBy).length === 0) {\n            options.orderBy = this._info.entityInfo.defaultOrderBy;\n        }\n        opt.where = await this._translateWhereToFilter(options.where);\n        if (options.orderBy !== undefined)\n            opt.orderBy = Sort.translateOrderByToSort(this.metadata, options.orderBy);\n        if (options.limit !== undefined)\n            opt.limit = options.limit;\n        if (options.page !== undefined)\n            opt.page = options.page;\n        return opt;\n    }\n    async _fromJsonArray(jsonItems, loadOptions) {\n        const loader = new RelationLoader();\n        const result = await this._loadManyToOneForManyRows(jsonItems.map((row) => {\n            let result = {};\n            for (const col of this.metadata.fields.toArray()) {\n                result[col.key] = col.valueConverter.fromJson(row[col.key]);\n            }\n            return result;\n        }), loadOptions, loader);\n        await loader.resolveAll();\n        return result;\n    }\n    async _loadManyToOneForManyRows(rawRows, loadOptions, loader) {\n        let loadFields = undefined;\n        if (loadOptions?.load)\n            loadFields = loadOptions.load(this.metadata.fields);\n        for (const col of this.metadata.fields) {\n            let ei = getEntitySettings(col.valueType, false);\n            if (ei) {\n                let isRelation = getRelationFieldInfo(col);\n                if (!isRelation) {\n                    let load = !col.options.lazy;\n                    if (loadFields !== undefined)\n                        load = loadFields.includes(col);\n                    if (load) {\n                        let repo = this._remult.repo(col.valueType);\n                        let toLoad = [];\n                        for (const r of rawRows) {\n                            let val = r[col.key];\n                            if (val !== undefined &&\n                                val !== null &&\n                                !toLoad.includes(val) &&\n                                !repo._idCache.has(val + '')) {\n                                toLoad.push(val);\n                            }\n                        }\n                        if (toLoad.length > 0) {\n                            await loadManyToOne(repo, toLoad);\n                        }\n                    }\n                }\n            }\n        }\n        async function loadManyToOne(repo, toLoad) {\n            let rows = await repo.find({ where: repo.metadata.idMetadata.getIdFilter(...toLoad) }, true);\n            for (const r of rows) {\n                repo._addToCache(r);\n            }\n        }\n        let result = await promiseAll(rawRows, async (r) => await this._mapRawDataToResult(r, loadFields));\n        for (const col of this.metadata.fields) {\n            let rel = getRelationFieldInfo(col);\n            let incl = col.options\n                .defaultIncluded;\n            if (loadOptions?.include?.[col.key] !== undefined) {\n                incl = loadOptions.include[col.key];\n            }\n            if (rel && incl) {\n                const otherRepo = rel.toRepo;\n                for (const row of result) {\n                    let { findOptions, returnNull } = this._findOptionsBasedOnRelation(rel, col, incl, row, otherRepo);\n                    if (returnNull)\n                        row[col.key] = null;\n                    else {\n                        const entityType = rel.toEntity;\n                        const toRepo = otherRepo;\n                        loader\n                            .load({\n                            entityType,\n                            find: (options) => toRepo._rawFind(options, false, loader),\n                            metadata: toRepo.metadata,\n                        }, findOptions)\n                            .then((result) => {\n                            if (result.length == 0 && rel.type == 'toOne')\n                                return;\n                            row[col.key] =\n                                rel.type !== 'toMany'\n                                    ? result.length == 0\n                                        ? null\n                                        : result[0]\n                                    : result;\n                        });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    /*@internal */\n    _findOptionsBasedOnRelation(rel, field, moreFindOptions, row, otherRepo) {\n        let returnNull = false;\n        let returnUndefined = false;\n        let where = [];\n        let findOptions = {};\n        let findOptionsSources = [];\n        if (typeof rel.options.findOptions === 'function') {\n            findOptionsSources.push(rel.options.findOptions(row));\n        }\n        else if (typeof rel.options.findOptions === 'object')\n            findOptionsSources.push(rel.options.findOptions);\n        if (typeof moreFindOptions === 'object') {\n            findOptionsSources.push(moreFindOptions);\n        }\n        for (const source of findOptionsSources) {\n            if (source.where)\n                where.push(source.where);\n            for (const key of [\n                'limit',\n                'include',\n                'orderBy',\n            ]) {\n                //@ts-ignore\n                if (source[key])\n                    findOptions[key] = source[key];\n            }\n        }\n        const relFields = rel.getFields();\n        const getFieldValue = (key) => {\n            let val = rel.type === 'reference'\n                ? getEntityRef(row).fields.find(field.key).getId()\n                : row[key];\n            if (rel.type === 'toOne' || rel.type === 'reference') {\n                if (val === null)\n                    returnNull = true;\n                else if (val === undefined)\n                    returnUndefined = true;\n                else if (rel.type === 'reference' && typeof val === 'object')\n                    val = otherRepo.metadata.idMetadata.getId(val);\n            }\n            return val;\n        };\n        if (relFields.compoundIdField)\n            if (rel.type === 'toMany') {\n                where.push({\n                    [relFields.compoundIdField]: this.metadata.idMetadata.getId(row),\n                });\n            }\n            else {\n                where.push(otherRepo.metadata.idMetadata.getIdFilter(getFieldValue(relFields.compoundIdField)));\n            }\n        for (const key in relFields.fields) {\n            if (Object.prototype.hasOwnProperty.call(relFields.fields, key)) {\n                where.push({ [key]: getFieldValue(relFields.fields[key]) });\n            }\n        }\n        findOptions.where = { $and: where };\n        if ((rel.type === 'toOne' || rel.type === 'reference') &&\n            findOptions.orderBy // I deduce from this that there may be more than one row and we want only the first\n        )\n            findOptions.limit = 1;\n        return { findOptions, returnNull, returnUndefined };\n    }\n    async _mapRawDataToResult(r, loadFields) {\n        if (!r)\n            return undefined;\n        let x = new this._entity(this._remult);\n        let helper = new rowHelperImplementation(this._info, x, this, this._edp, this._remult, false);\n        Object.defineProperty(x, entityMember, {\n            //I've used define property to hide this member from console.lo g\n            get: () => helper,\n        });\n        await helper.loadDataFrom(r, loadFields);\n        helper.saveOriginalData();\n        return x;\n    }\n    toJson(item) {\n        if (item === undefined || item === null)\n            return item;\n        if (Array.isArray(item))\n            return item.map((x) => this.toJson(x));\n        if (typeof item.then === 'function')\n            return item.then((x) => this.toJson(x));\n        return this.getEntityRef(item).toApiJson(true);\n    }\n    fromJson(json, newRow) {\n        if (json === null || json === undefined)\n            return json;\n        if (Array.isArray(json))\n            return json.map((item) => this.fromJson(item, newRow));\n        let result = new this._entity(this._remult);\n        for (const col of this._fieldsOf(json)) {\n            let ei = getEntitySettings(col.valueType, false);\n            if (ei) {\n                let val = json[col.key];\n                if (typeof val === 'string' || typeof val === 'number')\n                    result[col.key] = val;\n                else\n                    result[col.key] = this._remult.repo(col.valueType).fromJson(val);\n            }\n            else {\n                if (json[col.key] !== undefined) {\n                    result[col.key] = col.valueConverter.fromJson(json[col.key]);\n                }\n            }\n        }\n        this._fixTypes(result);\n        if (newRow) {\n            return this.create(result);\n        }\n        else {\n            let row = new rowHelperImplementation(this._info, result, this, this._edp, this._remult, false);\n            Object.defineProperty(result, entityMember, {\n                //I've used define property to hide this member from console.lo g\n                get: () => row,\n            });\n            row.saveOriginalData();\n            return result;\n        }\n    }\n    async count(where) {\n        return this._edp.count(await this._translateWhereToFilter(where));\n    }\n    async deleteMany({ where, }) {\n        Filter.throwErrorIfFilterIsEmpty(where, 'deleteMany');\n        if (this._dataProvider.isProxy) {\n            return this._edp.deleteMany(await this._translateWhereToFilter(where));\n        }\n        else {\n            let deleted = 0;\n            for await (const item of this.query({ where })) {\n                await getEntityRef(item).delete();\n                deleted++;\n            }\n            return deleted;\n        }\n    }\n    _cache = new Map();\n    async findOne(options, skipOrderByAndLimit = false) {\n        let r;\n        let cacheInfo;\n        if (!options)\n            options = {};\n        if (options.useCache) {\n            let f = findOptionsToJson(options, this.metadata);\n            let key = JSON.stringify(f);\n            cacheInfo = this._cache.get(key);\n            if (cacheInfo !== undefined) {\n                if (cacheInfo.value &&\n                    this.getEntityRef(cacheInfo.value).wasDeleted()) {\n                    cacheInfo = undefined;\n                    this._cache.delete(key);\n                }\n                else\n                    return this._cache.get(key).promise;\n            }\n            else {\n                cacheInfo = {\n                    value: undefined,\n                    promise: undefined,\n                };\n                this._cache.set(key, cacheInfo);\n            }\n        }\n        r = this.find({ ...options, limit: 1 }, skipOrderByAndLimit).then(async (items) => {\n            let r = undefined;\n            if (items.length > 0)\n                r = items[0];\n            if (!r && options.createIfNotFound) {\n                r = this.create();\n                if (options.where) {\n                    await __updateEntityBasedOnWhere(this.metadata, options.where, r);\n                }\n            }\n            return r;\n        });\n        if (cacheInfo) {\n            cacheInfo.promise = r = r.then((r) => {\n                cacheInfo.value = r;\n                return r;\n            });\n        }\n        return r;\n    }\n    async findFirst(where, options, skipOrderByAndLimit = false) {\n        if (!options)\n            options = {};\n        if (where) {\n            if (options.where) {\n                let w = options.where;\n                options.where = {\n                    $and: [w, where],\n                };\n            }\n            else\n                options.where = where;\n        }\n        return this.findOne(options, skipOrderByAndLimit);\n    }\n    _fieldsOf(item) {\n        let keys = Object.keys(item);\n        return this.metadata.fields.toArray().filter((x) => keys.includes(x.key));\n    }\n    create(item) {\n        let r = new this._entity(this._remult);\n        if (item) {\n            for (const field of this._fieldsOf(item)) {\n                r[field.key] = item[field.key];\n            }\n            this._fixTypes(r);\n        }\n        if (this._defaultFindOptions?.where) {\n            __updateEntityBasedOnWhere(this.metadata, this._defaultFindOptions.where, r);\n            this._fixTypes(r);\n        }\n        let z = this.getEntityRef(r);\n        return r;\n    }\n    async _fixTypes(item) {\n        for (const field of this._fieldsOf(item)) {\n            const val = item[field.key];\n            if (val !== null && val !== undefined) {\n                if (field.valueType === Date && !(val instanceof Date))\n                    item[field.key] = field.valueConverter.fromJson(field.valueConverter.toJson(val));\n                else\n                    for (const [type, typeName] of [\n                        [String, 'string'],\n                        [Number, 'number'],\n                        [Boolean, 'boolean'],\n                    ]) {\n                        if (field.valueType === type && typeof val !== typeName)\n                            item[field.key] = field.valueConverter.fromJson(field.valueConverter.toJson(val));\n                    }\n            }\n        }\n        return item;\n    }\n    findId(id, options) {\n        if (id === null || id === undefined)\n            return null;\n        if (typeof id !== 'string' && typeof id !== 'number')\n            throw new Error('id can be either number or string, but got: ' + typeof id);\n        return this.findFirst({}, {\n            ...options,\n            where: this.metadata.idMetadata.getIdFilter(id),\n        }, true);\n    }\n    async _translateWhereToFilter(where) {\n        if (!where)\n            where = {};\n        if (this._defaultFindOptions?.where) {\n            let z = where;\n            where = {\n                $and: [z, this._defaultFindOptions?.where],\n            };\n        }\n        if (!this._dataProvider.isProxy) {\n            if (this.metadata.options.backendPreprocessFilter) {\n                where = await this.metadata.options.backendPreprocessFilter(where, {\n                    metadata: this.metadata,\n                    getFilterPreciseValues: (filter) => Filter.getPreciseValues(this.metadata, filter || where),\n                });\n            }\n            if (this.metadata.options.backendPrefilter) {\n                let z = where;\n                where = {\n                    $and: [\n                        z,\n                        await Filter.resolve(this.metadata.options.backendPrefilter),\n                    ],\n                };\n            }\n        }\n        let r = await Filter.fromEntityFilter(this.metadata, where);\n        if (r && !this._dataProvider.isProxy) {\n            r = await Filter.translateCustomWhere(r, this.metadata, this._remult);\n        }\n        return r;\n    }\n}\nexport function createOldEntity(entity, remult) {\n    let r = remultStatic.columnsOfType.get(entity);\n    if (!r)\n        remultStatic.columnsOfType.set(entity, (r = []));\n    let info = getEntitySettings(entity)(remult);\n    let key = getEntityKey(entity);\n    let base = Object.getPrototypeOf(entity);\n    while (base != null) {\n        let baseCols = remultStatic.columnsOfType.get(base);\n        if (baseCols) {\n            r.unshift(...baseCols.filter((x) => !r.find((y) => y.key == x.key)));\n        }\n        let baseSettingsFactory = getEntitySettings(base, false);\n        if (baseSettingsFactory) {\n            let baseSettings = baseSettingsFactory(remult);\n            info = { ...baseSettings, ...info };\n            let functions = [\n                'saving',\n                'saved',\n                'deleting',\n                'deleted',\n                'validation',\n            ];\n            for (const key of functions) {\n                if (baseSettings[key] && baseSettings[key] !== info[key]) {\n                    let x = info[key];\n                    info[key] = async (a, b) => {\n                        await x(a, b);\n                        await baseSettings[key](a, b);\n                    };\n                }\n            }\n        }\n        base = Object.getPrototypeOf(base);\n    }\n    return new EntityFullInfo(prepareColumnInfo(r, remult), info, remult, entity, key);\n}\nclass rowHelperBase {\n    fieldsMetadata;\n    instance;\n    remult;\n    isNewRow;\n    _error;\n    get error() {\n        this._subscribers?.reportObserved();\n        return this._error;\n    }\n    set error(val) {\n        this._error = val;\n        this._subscribers?.reportChanged();\n    }\n    constructor(fieldsMetadata, instance, remult, isNewRow) {\n        this.fieldsMetadata = fieldsMetadata;\n        this.instance = instance;\n        this.remult = remult;\n        this.isNewRow = isNewRow;\n        {\n            let fac = remult;\n            if (fac != null && fac.iAmRemultProxy) {\n                remult = remultStatic.remultFactory();\n            }\n        }\n        for (const col of fieldsMetadata) {\n            let ei = getEntitySettings(col.valueType, false);\n            if (ei && remult) {\n                let lookup = new LookupColumn(remult.repo(col.valueType), Boolean(getRelationFieldInfo(col)), col.allowNull);\n                this.lookups.set(col.key, lookup);\n                let val = instance[col.key];\n                let refImpl;\n                Object.defineProperty(instance, col.key, {\n                    get: () => {\n                        if (this._subscribers) {\n                            this._subscribers.reportObserved();\n                            if (!refImpl) {\n                                refImpl = this.fields.find(col.key);\n                                if (!refImpl._subscribers) {\n                                    refImpl._subscribers = new SubscribableImp();\n                                }\n                            }\n                            refImpl._subscribers.reportObserved();\n                        }\n                        return lookup.item;\n                    },\n                    set: (val) => {\n                        lookup.set(val);\n                        this._subscribers?.reportChanged();\n                        if (!refImpl) {\n                            refImpl = this.fields.find(col.key);\n                            if (!refImpl._subscribers) {\n                                refImpl._subscribers = new SubscribableImp();\n                            }\n                        }\n                        refImpl._subscribers.reportChanged();\n                    },\n                    enumerable: true,\n                });\n                lookup.set(val);\n            }\n            else if (getRelationFieldInfo(col)?.type === 'toOne') {\n                let hasVal = instance.hasOwnProperty(col.key);\n                let val = instance[col.key];\n                if (isNewRow && !val)\n                    hasVal = false;\n                Object.defineProperty(instance, col.key, {\n                    get: () => {\n                        return val;\n                    },\n                    set: (newVal) => {\n                        val = newVal;\n                        if (newVal === undefined)\n                            return;\n                        const op = col.options;\n                        if (op.field) {\n                            this.instance[op.field] =\n                                getRelationFieldInfo(col).toRepo.metadata.idMetadata.getId(newVal);\n                        }\n                        if (op.fields) {\n                            for (const key in op.fields) {\n                                if (Object.prototype.hasOwnProperty.call(op.fields, key)) {\n                                    const element = op.fields[key];\n                                    this.instance[element] = newVal == null ? null : newVal[key];\n                                }\n                            }\n                        }\n                    },\n                    enumerable: true,\n                });\n                if (hasVal)\n                    instance[col.key] = val;\n            }\n        }\n    }\n    _subscribers;\n    subscribe(listener) {\n        this.initSubscribers();\n        return this._subscribers.subscribe(listener);\n    }\n    _isLoading = false;\n    initSubscribers() {\n        if (!this._subscribers) {\n            this._subscribers = new SubscribableImp();\n            for (const col of this.fieldsMetadata) {\n                let ei = getEntitySettings(col.valueType, false);\n                let refImpl = this.fields.find(col.key);\n                refImpl._subscribers = new SubscribableImp();\n                if (ei && this.remult) {\n                }\n                else {\n                    let val = this.instance[col.key];\n                    Object.defineProperty(this.instance, col.key, {\n                        get: () => {\n                            this._subscribers.reportObserved();\n                            refImpl._subscribers.reportObserved();\n                            return val;\n                        },\n                        set: (value) => {\n                            val = value;\n                            this._subscribers.reportChanged();\n                            refImpl._subscribers.reportChanged();\n                        },\n                        enumerable: true,\n                    });\n                }\n            }\n        }\n    }\n    get isLoading() {\n        this._subscribers?.reportObserved();\n        return this._isLoading;\n    }\n    set isLoading(val) {\n        this._isLoading = val;\n        this._subscribers?.reportChanged();\n    }\n    lookups = new Map();\n    async waitLoad() {\n        await promiseAll([...this.lookups.values()], (x) => x.waitLoad());\n    }\n    errors;\n    __assertValidity() {\n        if (!this.hasErrors())\n            throw this.buildErrorInfoObject();\n    }\n    buildErrorInfoObject() {\n        let error = {\n            modelState: Object.assign({}, this.errors),\n            message: this.error,\n        };\n        if (!error.message) {\n            for (const col of this.fieldsMetadata) {\n                if (this.errors[col.key]) {\n                    error.message =\n                        this.fields[col.key].metadata.caption + ': ' + this.errors[col.key];\n                    this.error = error.message;\n                    break;\n                }\n            }\n        }\n        return error;\n    }\n    catchSaveErrors(err) {\n        let e = err;\n        if (e instanceof Promise) {\n            return e.then((x) => this.catchSaveErrors(x));\n        }\n        if (e.error) {\n            e = e.error;\n        }\n        if (e.message)\n            this.error = e.message;\n        else if (e.Message)\n            this.error = e.Message;\n        else\n            this.error = e;\n        let s = e.modelState;\n        if (!s)\n            s = e.ModelState;\n        if (s) {\n            this.errors = s;\n        }\n        throw err;\n    }\n    __clearErrorsAndReportChanged() {\n        this.errors = undefined;\n        this.error = undefined;\n        this._reportChangedToEntityAndFields();\n    }\n    _reportChangedToEntityAndFields() {\n        if (this._subscribers) {\n            this._subscribers.reportChanged();\n            for (const field of this.fields) {\n                let ref = field;\n                ref._subscribers.reportChanged();\n            }\n        }\n    }\n    hasErrors() {\n        this._subscribers?.reportObserved();\n        return !!!this.error && this.errors == undefined;\n    }\n    copyDataToObject(isNew = false) {\n        let d = {};\n        for (const col of this.fieldsMetadata) {\n            let lu = this.lookups.get(col.key);\n            let val = undefined;\n            const rel = getRelationFieldInfo(col);\n            if (lu)\n                val = lu.id;\n            else\n                val = this.instance[col.key];\n            if (rel &&\n                isNew &&\n                !col.allowNull &&\n                (val === undefined || val === null)) {\n                if (rel.toRepo.metadata.idMetadata.field.valueType === Number)\n                    val = 0;\n                else\n                    val = '';\n            }\n            if (!rel || rel.type === 'reference') {\n                if (val !== undefined) {\n                    val = col.valueConverter.toJson(val);\n                    if (val !== undefined && val !== null)\n                        val = col.valueConverter.fromJson(JSON.parse(JSON.stringify(val)));\n                }\n                d[col.key] = val;\n            }\n        }\n        return d;\n    }\n    originalValues = {};\n    saveOriginalData() {\n        this.originalValues = this.copyDataToObject();\n        this.saveMoreOriginalData();\n    }\n    saveMoreOriginalData() { }\n    async validate() {\n        this.__clearErrorsAndReportChanged();\n        if (classValidatorValidate)\n            await classValidatorValidate(this.instance, this);\n        await this.__performColumnAndEntityValidations();\n        let r = this.hasErrors();\n        if (!this.hasErrors())\n            return this.buildErrorInfoObject();\n        else\n            return undefined;\n    }\n    async __validateEntity() {\n        this.__clearErrorsAndReportChanged();\n        if (classValidatorValidate)\n            await classValidatorValidate(this.instance, this);\n        await this.__performColumnAndEntityValidations();\n        this.__assertValidity();\n    }\n    async __performColumnAndEntityValidations() { }\n    toApiJson(includeRelatedEntities = false, notJustApi = false) {\n        let result = {};\n        for (const col of this.fieldsMetadata) {\n            if (notJustApi || !this.remult || col.includedInApi(this.instance)) {\n                let val;\n                let lu = this.lookups.get(col.key);\n                let disable = false;\n                if (lu)\n                    if (includeRelatedEntities) {\n                        val = lu.toJson();\n                        disable = true;\n                        result[col.key] = val;\n                    }\n                    else\n                        val = lu.id;\n                else {\n                    if (getRelationFieldInfo(col) && !includeRelatedEntities) {\n                        disable = true;\n                    }\n                    else {\n                        val = this.instance[col.key];\n                        if (!this.remult) {\n                            if (val) {\n                                let eo = getEntitySettings(val.constructor, false);\n                                if (eo) {\n                                    val = getEntityRef(val).getId();\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!disable)\n                    result[col.key] = col.valueConverter.toJson(val);\n            }\n        }\n        return result;\n    }\n    async _updateEntityBasedOnApi(body, ignoreApiAllowed = false) {\n        let keys = Object.keys(body);\n        for (const col of this.fieldsMetadata) {\n            if (keys.includes(col.key))\n                if (col.includedInApi(this.instance)) {\n                    if (!this.remult ||\n                        ignoreApiAllowed ||\n                        col.apiUpdateAllowed(this.instance)) {\n                        let lu = this.lookups.get(col.key);\n                        if (lu)\n                            lu.id = body[col.key];\n                        else\n                            this.instance[col.key] = col.valueConverter.fromJson(body[col.key]);\n                    }\n                }\n        }\n        await promiseAll([...this.fields].filter((f) => !getRelationFieldInfo(f.metadata)), (x) => x.load());\n    }\n}\nexport class rowHelperImplementation extends rowHelperBase {\n    info;\n    repository;\n    edp;\n    _isNew;\n    constructor(info, instance, repository, edp, remult, _isNew) {\n        super(info.fieldsMetadata, instance, remult, _isNew);\n        this.info = info;\n        this.repository = repository;\n        this.edp = edp;\n        this._isNew = _isNew;\n        this.metadata = info;\n        if (_isNew) {\n            for (const col of info.fieldsMetadata) {\n                if (col.options.defaultValue && instance[col.key] === undefined) {\n                    if (typeof col.options.defaultValue === 'function') {\n                        instance[col.key] = col.options.defaultValue(instance);\n                    }\n                    else if (!instance[col.key])\n                        instance[col.key] = col.options.defaultValue;\n                }\n            }\n        }\n        if (this.info.options.entityRefInit)\n            this.info.options.entityRefInit(this, instance);\n        if (Remult.entityRefInit)\n            Remult.entityRefInit(this, instance);\n    }\n    clone() {\n        const data = this.toApiJson(true, true);\n        return this.repository.fromJson(data, this.isNew());\n    }\n    get relations() {\n        return this.repository.relations(this.instance);\n    }\n    get apiUpdateAllowed() {\n        return this.remult.isAllowedForInstance(this.instance, this.metadata.options.allowApiUpdate);\n    }\n    get apiDeleteAllowed() {\n        return this.remult.isAllowedForInstance(this.instance, this.metadata.options.allowApiDelete);\n    }\n    get apiInsertAllowed() {\n        return this.remult.isAllowedForInstance(this.instance, this.metadata.options.allowApiInsert);\n    }\n    metadata;\n    getId() {\n        const getVal = (y) => {\n            let z = this.lookups.get(y.key);\n            if (z)\n                return z.id;\n            return this.instance[y.key];\n        };\n        if (this.metadata.idMetadata.field instanceof CompoundIdField)\n            return this.metadata.idMetadata.field.getId(getVal);\n        return getVal(this.metadata.idMetadata.field);\n    }\n    saveMoreOriginalData() {\n        this.originalId = this.getId();\n    }\n    _wasDeleted = false;\n    wasDeleted() {\n        this._subscribers?.reportObserved();\n        return this._wasDeleted;\n    }\n    undoChanges() {\n        this.loadDataFrom(this.originalValues);\n        this.__clearErrorsAndReportChanged();\n    }\n    async reload() {\n        await this.edp\n            .find({ where: await this.getIdFilter() })\n            .then(async (newData) => {\n            if (newData.length === 0)\n                throw this.repository._notFoundError(this.id);\n            await this.loadDataFrom(newData[0]);\n            this.saveOriginalData();\n        });\n        this._reportChangedToEntityAndFields();\n        return this.instance;\n    }\n    _columns;\n    get fields() {\n        if (!this._columns) {\n            let _items = [];\n            let r = {\n                find: (c) => r[typeof c === 'string' ? c : c.key],\n                [Symbol.iterator]: () => _items[Symbol.iterator](),\n                toArray: () => _items,\n            };\n            for (const c of this.info.fieldsMetadata) {\n                _items.push((r[c.key] = new FieldRefImplementation(c.options, c, this.instance, this, this)));\n            }\n            this._columns = r;\n        }\n        return this._columns;\n    }\n    _saving = false;\n    async save(onlyTheseFieldsSentOnlyInTheCaseOfProxySaveWithPartialObject) {\n        try {\n            if (this._saving)\n                throw new Error('cannot save while entity is already saving');\n            this._saving = true;\n            if (this.wasDeleted())\n                throw new Error('cannot save a deleted row');\n            this.isLoading = true;\n            if (onlyTheseFieldsSentOnlyInTheCaseOfProxySaveWithPartialObject ===\n                undefined)\n                // no need\n                await this.__validateEntity();\n            let doNotSave = false;\n            let e = this.buildLifeCycleEvent(() => (doNotSave = true));\n            if (!this.repository._dataProvider.isProxy) {\n                for (const col of this.fields) {\n                    if (col.metadata.options.saving)\n                        await col.metadata.options.saving(this.instance, col, e);\n                }\n                if (this.info.entityInfo.saving) {\n                    await this.info.entityInfo.saving(this.instance, e);\n                }\n            }\n            this.__assertValidity();\n            let d = this.copyDataToObject(this.isNew());\n            let ignoreKeys = [];\n            for (const field of this.metadata.fields) {\n                if (field.dbReadOnly ||\n                    (onlyTheseFieldsSentOnlyInTheCaseOfProxySaveWithPartialObject !==\n                        undefined &&\n                        !onlyTheseFieldsSentOnlyInTheCaseOfProxySaveWithPartialObject.includes(field.key))) {\n                    d[field.key] = undefined;\n                    ignoreKeys.push(field.key);\n                    let f = this.fields.find(field);\n                    f.value = f.originalValue;\n                }\n            }\n            //if (this.info.idMetadata.field instanceof CompoundIdField) delete d.id\n            let updatedRow;\n            let isNew = this.isNew();\n            try {\n                this._subscribers?.reportChanged();\n                if (this.isNew()) {\n                    updatedRow = await this.edp.insert(d);\n                }\n                else {\n                    let changesOnly = {};\n                    let wasChanged = false;\n                    for (const key in d) {\n                        if (Object.prototype.hasOwnProperty.call(d, key)) {\n                            const element = d[key];\n                            if (this.fields.find(key).valueChanged() &&\n                                !ignoreKeys.includes(key)) {\n                                changesOnly[key] = element;\n                                wasChanged = true;\n                            }\n                        }\n                    }\n                    if (!wasChanged)\n                        return this.instance;\n                    if (doNotSave) {\n                        updatedRow = (await this.edp.find({ where: await this.getIdFilter() }))[0];\n                    }\n                    else {\n                        updatedRow = await this.edp.update(this.id, changesOnly);\n                    }\n                }\n                await this.loadDataFrom(updatedRow);\n                e.id = this.getId();\n                if (!this.repository._dataProvider.isProxy) {\n                    if (this.info.entityInfo.saved)\n                        await this.info.entityInfo.saved(this.instance, e);\n                    if (this.repository.listeners)\n                        for (const listener of this.repository.listeners.filter((x) => x.saved)) {\n                            await listener.saved(this.instance, isNew);\n                        }\n                }\n                await this.repository._remult.liveQueryPublisher.itemChanged(this.repository.metadata.key, [{ id: this.getId(), oldId: this.getOriginalId(), deleted: false }]);\n                this.saveOriginalData();\n                this._isNew = false;\n                return this.instance;\n            }\n            catch (err) {\n                await this.catchSaveErrors(err);\n            }\n        }\n        finally {\n            this.isLoading = false;\n            this._reportChangedToEntityAndFields();\n            this._saving = false;\n        }\n    }\n    async processInsertResponseDto(updatedRow) {\n        await this.loadDataFrom(updatedRow);\n        this.saveOriginalData();\n        this._isNew = false;\n        return this.instance;\n    }\n    async buildDtoForInsert() {\n        await this.__validateEntity();\n        this.__assertValidity();\n        let d = this.copyDataToObject(this.isNew());\n        let ignoreKeys = [];\n        for (const field of this.metadata.fields) {\n            if (field.dbReadOnly) {\n                d[field.key] = undefined;\n                ignoreKeys.push(field.key);\n                let f = this.fields.find(field);\n                f.value = f.originalValue;\n            }\n        }\n        return d;\n    }\n    buildLifeCycleEvent(preventDefault = () => { }) {\n        const self = this;\n        return {\n            isNew: self.isNew(),\n            fields: self.fields,\n            id: self.getId(),\n            originalId: self.getOriginalId(),\n            metadata: self.repository.metadata,\n            repository: self.repository,\n            preventDefault: () => preventDefault(),\n            relations: self.repository.relations(self.instance),\n        };\n    }\n    async getIdFilter() {\n        return await this.repository._translateWhereToFilter(this.repository.metadata.idMetadata.getIdFilter(this.id));\n    }\n    async delete() {\n        this.__clearErrorsAndReportChanged();\n        let doDelete = true;\n        let e = this.buildLifeCycleEvent(() => (doDelete = false));\n        if (!this.repository._dataProvider.isProxy) {\n            if (this.info.entityInfo.deleting)\n                await this.info.entityInfo.deleting(this.instance, e);\n        }\n        this.__assertValidity();\n        try {\n            if (doDelete)\n                await this.edp.delete(this.id);\n            if (!this.repository._dataProvider.isProxy) {\n                if (this.info.entityInfo.deleted)\n                    await this.info.entityInfo.deleted(this.instance, e);\n            }\n            if (this.repository.listeners)\n                for (const listener of this.repository.listeners.filter((x) => x.deleted)) {\n                    await listener.deleted(this.instance);\n                }\n            await this.repository._remult.liveQueryPublisher.itemChanged(this.repository.metadata.key, [{ id: this.getId(), oldId: this.getOriginalId(), deleted: true }]);\n            this._wasDeleted = true;\n        }\n        catch (err) {\n            await this.catchSaveErrors(err);\n        }\n    }\n    async loadDataFrom(data, loadItems) {\n        for (const col of this.info.fields) {\n            let lu = this.lookups.get(col.key);\n            if (lu) {\n                lu.id = data[col.key];\n                if (loadItems === undefined) {\n                    if (!col.options.lazy && !getRelationFieldInfo(col))\n                        await lu.waitLoad();\n                }\n                else {\n                    if (loadItems.includes(col))\n                        await lu.waitLoad();\n                }\n            }\n            else if (!getRelationFieldInfo(col))\n                this.instance[col.key] = data[col.key];\n        }\n        await this.calcServerExpression();\n        this.id = this.getId();\n    }\n    id;\n    originalId;\n    getOriginalId() {\n        return this.originalId;\n    }\n    async calcServerExpression() {\n        if (isBackend())\n            //y2 should be changed to be based on data provider - consider naming\n            for (const col of this.info.fieldsMetadata) {\n                if (col.options.serverExpression) {\n                    this.instance[col.key] = await col.options.serverExpression(this.instance);\n                }\n            }\n    }\n    isNew() {\n        this._subscribers?.reportObserved();\n        return this._isNew;\n    }\n    wasChanged() {\n        this._subscribers?.reportObserved();\n        for (const col of this.fields) {\n            const rel = getRelationFieldInfo(col.metadata);\n            if (!rel || rel.type == 'reference')\n                if (col.valueChanged())\n                    return true;\n        }\n        return false;\n    }\n    async __performColumnAndEntityValidations() {\n        for (const c of this.fieldsMetadata) {\n            if (c.options.validate) {\n                let col = new FieldRefImplementation(c.options, c, this.instance, this, this);\n                await col.__performValidation();\n            }\n        }\n        if (this.info.entityInfo.validation) {\n            let e = this.buildLifeCycleEvent(() => { });\n            await this.info.entityInfo.validation(this.instance, e);\n        }\n        if (this.repository.listeners)\n            for (const listener of this.repository.listeners.filter((x) => x.validating)) {\n                await listener.validating(this.instance);\n            }\n    }\n}\nconst controllerColumns = Symbol.for('controllerColumns');\nfunction prepareColumnInfo(r, remult) {\n    return r.map((x) => decorateColumnSettings(x.settings(remult), remult));\n}\nexport function getFields(container, remult) {\n    return getControllerRef(container, remult).fields;\n}\nexport function getControllerRef(container, remultArg) {\n    const remultVar = remultArg || defaultRemult;\n    let result = container[controllerColumns];\n    if (!result)\n        result = container[entityMember];\n    if (!result) {\n        let columnSettings = remultStatic.columnsOfType.get(container.constructor);\n        if (!columnSettings)\n            remultStatic.columnsOfType.set(container.constructor, (columnSettings = []));\n        let base = Object.getPrototypeOf(container.constructor);\n        while (base != null) {\n            let baseCols = remultStatic.columnsOfType.get(base);\n            if (baseCols) {\n                columnSettings.unshift(...baseCols.filter((x) => !columnSettings.find((y) => y.key == x.key)));\n            }\n            base = Object.getPrototypeOf(base);\n        }\n        container[controllerColumns] = result = new controllerRefImpl(prepareColumnInfo(columnSettings, remultVar).map((x) => new columnDefsImpl(x, undefined, remultVar)), container, remultVar);\n    }\n    return result;\n}\nexport class controllerRefImpl extends rowHelperBase {\n    constructor(columnsInfo, instance, remult) {\n        super(columnsInfo, instance, remult, false);\n        let _items = [];\n        let r = {\n            find: (c) => r[typeof c === 'string' ? c : c.key],\n            [Symbol.iterator]: () => _items[Symbol.iterator](),\n            toArray: () => _items,\n        };\n        for (const col of columnsInfo) {\n            _items.push((r[col.key] = new FieldRefImplementation(col.options, col, instance, undefined, this)));\n        }\n        this.fields = r;\n    }\n    async __performColumnAndEntityValidations() {\n        for (const col of this.fields) {\n            if (col instanceof FieldRefImplementation) {\n                await col.__performValidation();\n            }\n        }\n    }\n    fields;\n}\nexport class FieldRefImplementation {\n    settings;\n    metadata;\n    container;\n    helper;\n    rowBase;\n    constructor(settings, metadata, container, helper, rowBase) {\n        this.settings = settings;\n        this.metadata = metadata;\n        this.container = container;\n        this.helper = helper;\n        this.rowBase = rowBase;\n        this.target = this.settings.target;\n        this.entityRef = this.helper;\n    }\n    _subscribers;\n    subscribe(listener) {\n        if (!this._subscribers) {\n            this.rowBase.initSubscribers();\n        }\n        return this._subscribers.subscribe(listener);\n    }\n    valueIsNull() {\n        this.reportObserved();\n        let lu = this.rowBase.lookups.get(this.metadata.key);\n        if (lu) {\n            return lu.id === undefined || lu.id === null;\n        }\n        return this.value === null;\n    }\n    originalValueIsNull() {\n        this.reportObserved();\n        let lu = this.rowBase.lookups.get(this.metadata.key);\n        return this.rawOriginalValue() === null;\n    }\n    async load() {\n        let lu = this.rowBase.lookups.get(this.metadata.key);\n        let rel = getRelationFieldInfo(this.metadata);\n        if (rel) {\n            if (rel.type === 'toMany') {\n                return (this.container[this.metadata.key] = await this.helper.repository\n                    .relations(this.container)[this.metadata.key].find());\n            }\n            else {\n                let val = await this.helper.repository\n                    .relations(this.container)[this.metadata.key].findOne();\n                if (val)\n                    this.container[this.metadata.key] = val;\n                else\n                    return null;\n            }\n        }\n        else if (lu) {\n            if (this.valueChanged()) {\n                await lu.waitLoadOf(this.rawOriginalValue());\n            }\n            return await lu.waitLoad();\n        }\n        return this.value;\n    }\n    target;\n    reportObserved() {\n        this._subscribers?.reportObserved();\n        this.rowBase._subscribers?.reportObserved();\n    }\n    reportChanged() {\n        this._subscribers?.reportChanged();\n        this.rowBase._subscribers?.reportChanged();\n    }\n    get error() {\n        this.reportObserved();\n        if (!this.rowBase.errors)\n            return undefined;\n        return this.rowBase.errors[this.metadata.key];\n    }\n    set error(error) {\n        if (!this.rowBase.errors)\n            this.rowBase.errors = {};\n        this.rowBase.errors[this.metadata.key] = error;\n        this.reportChanged();\n    }\n    get displayValue() {\n        this.reportObserved();\n        if (this.value != undefined) {\n            if (this.settings.displayValue)\n                return this.settings.displayValue(this.container, this.value);\n            else if (this.metadata.valueConverter.displayValue)\n                return this.metadata.valueConverter.displayValue(this.value);\n            else\n                return this.value.toString();\n        }\n        return '';\n    }\n    get value() {\n        return this.container[this.metadata.key];\n    }\n    set value(value) {\n        this.container[this.metadata.key] = value;\n    }\n    get originalValue() {\n        this.reportObserved();\n        let lu = this.rowBase.lookups.get(this.metadata.key);\n        if (lu)\n            return lu.get(this.rawOriginalValue());\n        return this.rowBase.originalValues[this.metadata.key];\n    }\n    rawOriginalValue() {\n        return this.rowBase.originalValues[this.metadata.key];\n    }\n    setId(id) {\n        this.value = id;\n    }\n    getId() {\n        let lu = this.rowBase.lookups.get(this.metadata.key);\n        if (lu)\n            return lu.id != undefined ? lu.id : null;\n        return this.value;\n    }\n    get inputValue() {\n        this.reportObserved();\n        let lu = this.rowBase.lookups.get(this.metadata.key);\n        if (lu)\n            return lu.id != undefined ? lu.id.toString() : null;\n        return this.metadata.valueConverter.toInput(this.value, this.settings.inputType);\n    }\n    set inputValue(val) {\n        let lu = this.rowBase.lookups.get(this.metadata.key);\n        if (lu) {\n            lu.setId(val);\n        }\n        else\n            this.value = this.metadata.valueConverter.fromInput(val, this.settings.inputType);\n    }\n    valueChanged() {\n        this.reportObserved();\n        let val = this.value;\n        let lu = this.rowBase.lookups.get(this.metadata.key);\n        if (lu) {\n            val = lu.id;\n        }\n        return (JSON.stringify(this.metadata.valueConverter.toJson(this.rowBase.originalValues[this.metadata.key])) != JSON.stringify(this.metadata.valueConverter.toJson(val)));\n    }\n    entityRef;\n    async __performValidation() {\n        try {\n            const processValidation = (result) => {\n                if (result !== true && result !== undefined && !this.error) {\n                    if (typeof result === 'string' && result.length > 0)\n                        this.error = result;\n                    else\n                        this.error = 'invalid value';\n                }\n            };\n            if (this.settings.validate) {\n                let self = this;\n                let event = {\n                    entityRef: this.entityRef,\n                    get error() {\n                        return self.error;\n                    },\n                    set error(value) {\n                        self.error = value;\n                    },\n                    isNew: this.entityRef?.isNew(),\n                    load: () => self.load(),\n                    metadata: self.metadata,\n                    originalValue: self.originalValue,\n                    value: self.value,\n                    valueChanged: () => self.valueChanged(),\n                    originalValueIsNull: () => self.originalValueIsNull(),\n                    valueIsNull: () => self.valueIsNull(),\n                    isBackend: () => !self.rowBase?.remult?.dataProvider?.isProxy,\n                };\n                if (Array.isArray(this.settings.validate)) {\n                    for (const v of this.settings.validate) {\n                        processValidation(await v(this.container, event));\n                    }\n                }\n                else if (typeof this.settings.validate === 'function')\n                    processValidation(await this.settings.validate(this.container, event));\n            }\n        }\n        catch (error) {\n            if (typeof error === 'string')\n                this.error = error;\n            else\n                this.error = error.message;\n        }\n    }\n    async validate() {\n        await this.__performValidation();\n        return !!!this.error;\n    }\n}\nlet tempCaptionTransformer = {\n    transformCaption: (remult, key, caption, entityMetaData) => caption,\n};\nexport const CaptionTransformer = remultStatic.captionTransformer ||\n    (remultStatic.captionTransformer = tempCaptionTransformer);\nexport function buildCaption(caption, key, remult, metaData) {\n    let result;\n    if (typeof caption === 'function') {\n        if (remult)\n            result = caption(remult);\n    }\n    else if (caption)\n        result = caption;\n    result = CaptionTransformer.transformCaption(remult, key, result, metaData);\n    if (result)\n        return result;\n    if (key)\n        return makeTitle(key);\n    return '';\n}\nexport class columnDefsImpl {\n    settings;\n    entityDefs;\n    remult;\n    constructor(settings, entityDefs, remult) {\n        this.settings = settings;\n        this.entityDefs = entityDefs;\n        this.remult = remult;\n        this.options = this.settings;\n        this.target = this.settings.target;\n        this.valueConverter = new Proxy(this.settings.valueConverter, {\n            get: (target, prop) => {\n                let result = target[prop];\n                if (typeof result === 'function') {\n                    return (...args) => {\n                        try {\n                            return target[prop](...args);\n                        }\n                        catch (err) {\n                            const error = `${String(prop)} failed for value ${args?.[0]}. Error: ${typeof err === 'string' ? err : err.message}`;\n                            throw {\n                                message: this.caption + ': ' + error,\n                                modelState: {\n                                    [this.key]: error,\n                                },\n                            };\n                        }\n                    };\n                }\n                return result;\n            },\n        });\n        this.allowNull = !!this.settings.allowNull;\n        this.valueType = this.settings.valueType;\n        this.key = this.settings.key;\n        this.inputType = this.settings.inputType;\n        if (settings.serverExpression)\n            this.isServerExpression = true;\n        if (typeof this.settings.allowApiUpdate === 'boolean')\n            this.readonly = this.settings.allowApiUpdate;\n        if (!this.inputType)\n            this.inputType = this.valueConverter.inputType;\n        this.dbName = settings.dbName;\n        if (this.dbName == undefined)\n            this.dbName = settings.key;\n        this.caption = buildCaption(settings.caption, settings.key, remult, entityDefs);\n    }\n    apiUpdateAllowed(item) {\n        if (this.options.allowApiUpdate === undefined)\n            return true;\n        return this.remult.isAllowedForInstance(item, this.options.allowApiUpdate);\n    }\n    displayValue(item) {\n        return this.entityDefs\n            .getEntityMetadataWithoutBreakingTheEntity(item)\n            .fields.find(this.key).displayValue;\n    }\n    includedInApi(item) {\n        if (this.options.includeInApi === undefined)\n            return true;\n        return this.remult.isAllowedForInstance(item, this.options.includeInApi);\n    }\n    toInput(value, inputType) {\n        return this.valueConverter.toInput(value, inputType);\n    }\n    fromInput(inputValue, inputType) {\n        return this.valueConverter.fromInput(inputValue, inputType);\n    }\n    async getDbName() {\n        return fieldDbName(this, this.entityDefs);\n    }\n    options;\n    target;\n    readonly;\n    valueConverter;\n    allowNull;\n    caption;\n    dbName;\n    inputType;\n    key;\n    get dbReadOnly() {\n        return this.settings.dbReadOnly;\n    }\n    isServerExpression;\n    valueType;\n}\nclass EntityFullInfo {\n    entityInfo;\n    remult;\n    entityType;\n    key;\n    options;\n    fieldsMetadata = [];\n    constructor(columnsInfo, entityInfo, remult, entityType, key) {\n        this.entityInfo = entityInfo;\n        this.remult = remult;\n        this.entityType = entityType;\n        this.key = key;\n        this.options = entityInfo;\n        if (this.options.allowApiCrud !== undefined) {\n            let crud;\n            if (typeof this.options.allowApiCrud === 'function')\n                crud = (_, remult) => this.options.allowApiCrud(remult);\n            else\n                crud = this.options.allowApiCrud;\n            if (this.options.allowApiDelete === undefined)\n                this.options.allowApiDelete = crud;\n            if (this.options.allowApiInsert === undefined)\n                this.options.allowApiInsert = crud;\n            if (this.options.allowApiUpdate === undefined)\n                this.options.allowApiUpdate = crud;\n            if (this.options.allowApiRead === undefined)\n                this.options.allowApiRead = this.options.allowApiCrud;\n        }\n        if (this.options.allowApiRead === undefined)\n            this.options.allowApiRead = true;\n        if (!this.key)\n            this.key = entityType.name;\n        if (!entityInfo.dbName)\n            entityInfo.dbName = this.key;\n        this.dbName = entityInfo.dbName;\n        let r = {\n            find: (c) => r[typeof c === 'string' ? c : c.key],\n            [Symbol.iterator]: () => this.fieldsMetadata[Symbol.iterator](),\n            toArray: () => this.fieldsMetadata,\n        };\n        for (const x of columnsInfo) {\n            this.fieldsMetadata.push((r[x.key] = new columnDefsImpl(x, this, remult)));\n        }\n        this.fields = r;\n        this.caption = buildCaption(entityInfo.caption, this.key, remult, this);\n        if (entityInfo.id) {\n            let r = typeof entityInfo.id === 'function'\n                ? entityInfo.id(this.fields)\n                : Object.keys(entityInfo.id).map((x) => this.fields.find(x));\n            if (Array.isArray(r)) {\n                if (r.length > 1)\n                    this.idMetadata.field = new CompoundIdField(...r);\n                else if (r.length == 1)\n                    this.idMetadata.field = r[0];\n            }\n            else\n                this.idMetadata.field = r;\n        }\n        if (!this.idMetadata.field) {\n            if (this.fields['id'])\n                this.idMetadata.field = this.fields['id'];\n            else\n                this.idMetadata.field = [...this.fields][0];\n        }\n    }\n    apiUpdateAllowed(item) {\n        if (this.options.allowApiUpdate === undefined)\n            return false;\n        return !item\n            ? this.remult.isAllowedForInstance(undefined, this.options.allowApiUpdate)\n            : this.getEntityMetadataWithoutBreakingTheEntity(item).apiUpdateAllowed;\n    }\n    get apiReadAllowed() {\n        if (this.options.allowApiRead === undefined)\n            return true;\n        return this.remult.isAllowed(this.options.allowApiRead);\n    }\n    apiDeleteAllowed(item) {\n        if (this.options.allowApiDelete === undefined)\n            return false;\n        return !item\n            ? this.remult.isAllowedForInstance(undefined, this.options.allowApiDelete)\n            : this.getEntityMetadataWithoutBreakingTheEntity(item).apiDeleteAllowed;\n    }\n    apiInsertAllowed(item) {\n        if (this.options.allowApiUpdate === undefined)\n            return false;\n        return !item\n            ? this.remult.isAllowedForInstance(undefined, this.options.allowApiInsert)\n            : this.getEntityMetadataWithoutBreakingTheEntity(item).apiInsertAllowed;\n    }\n    getEntityMetadataWithoutBreakingTheEntity(item) {\n        let result = getEntityRef(item, false);\n        if (result)\n            return result;\n        return this.remult.repo(this.entityType).getEntityRef({ ...item });\n    }\n    getDbName() {\n        return entityDbName(this);\n    }\n    idMetadata = {\n        getId: (item) => {\n            if (item === undefined || item === null)\n                return item;\n            const ref = getEntityRef(item, false);\n            if (ref)\n                return ref.getId();\n            if (this.idMetadata.field instanceof CompoundIdField)\n                return this.idMetadata.field.getId(item);\n            else\n                return item[this.idMetadata.field.key];\n        },\n        field: undefined,\n        get fields() {\n            return this.field instanceof CompoundIdField\n                ? this.field.fields\n                : [this.field];\n        },\n        createIdInFilter: (items) => {\n            if (items.length > 0)\n                return {\n                    $or: items.map((x) => this.idMetadata.getIdFilter(getEntityRef(x).getId())),\n                };\n        },\n        isIdField: (col) => {\n            return col.key == this.idMetadata.field.key;\n        },\n        getIdFilter: (...ids) => {\n            if (this.idMetadata.field instanceof CompoundIdField) {\n                let field = this.idMetadata.field;\n                if (ids.length == 1) {\n                    return field.isEqualTo(ids[0]);\n                }\n                else\n                    return {\n                        $or: ids.map((x) => field.isEqualTo(x)),\n                    };\n            }\n            if (ids.length == 1)\n                return {\n                    [this.idMetadata.field.key]: ids[0],\n                };\n            else\n                return {\n                    [this.idMetadata.field.key]: ids,\n                };\n        },\n    };\n    fields;\n    dbName;\n    caption;\n}\nexport function FieldType(...options) {\n    return (target, context) => {\n        if (!options) {\n            options = [];\n        }\n        options.splice(0, 0, { valueType: target });\n        target[storableMember] = options;\n        return target;\n    };\n}\nexport function isAutoIncrement(f) {\n    return f.options?.valueConverter?.fieldTypeInDb === 'autoincrement';\n}\nexport function ValueListFieldType(...options) {\n    return (type, context) => {\n        FieldType((o) => {\n            ;\n            (o.valueConverter = ValueListInfo.get(type)),\n                (o.displayValue = (item, val) => val?.caption);\n            o.validate = (entity, ref) => {\n                const values = ValueListInfo.get(type).getValues();\n                if (ref.value && !values.find((v) => v === ref.value)) {\n                    ref.value = values.find((v) => v.id === ref.value.id) || ref.value;\n                }\n                return Validators.in(values)(entity, ref);\n            };\n        }, ...options)(type, context);\n    };\n}\nexport class ValueListInfo {\n    valueListType;\n    static get(type) {\n        let r = typeCache.get(type);\n        if (!r) {\n            r = new ValueListInfo(type);\n            typeCache.set(type, r);\n        }\n        return r;\n    }\n    byIdMap = new Map();\n    values = [];\n    isNumeric = false;\n    constructor(valueListType) {\n        this.valueListType = valueListType;\n        for (let member in this.valueListType) {\n            let s = this.valueListType[member];\n            if (s instanceof this.valueListType) {\n                if (s.id === undefined)\n                    s.id = member;\n                if (typeof s.id === 'number')\n                    this.isNumeric = true;\n                if (s.caption === undefined)\n                    s.caption = makeTitle(s.id !== undefined ? s.id.toString() : member);\n                this.byIdMap.set(s.id, s);\n                this.values.push(s);\n            }\n        }\n        if (this.isNumeric) {\n            this.fieldTypeInDb = 'integer';\n        }\n        var options = this.valueListType[storableMember];\n        if (options) {\n            for (const op of options) {\n                if (op?.getValues) {\n                    this.values.splice(0, this.values.length, ...op.getValues());\n                    this.byIdMap.clear();\n                    this.values.forEach((s) => {\n                        if (s.caption === undefined && s.id !== undefined)\n                            s.caption = makeTitle(s.id);\n                        this.byIdMap.set(s.id, s);\n                    });\n                }\n            }\n            if (this.values.find((s) => s.id === undefined))\n                throw new Error(`ValueType ${this.valueListType} has values without an id`);\n        }\n        else\n            throw new Error(`ValueType not yet initialized, did you forget to call @ValueListFieldType on ` +\n                valueListType);\n    }\n    getValues() {\n        return this.values;\n    }\n    byId(key) {\n        if (this.isNumeric)\n            key = +key;\n        return this.byIdMap.get(key);\n    }\n    fromJson(val) {\n        return this.byId(val);\n    }\n    toJson(val) {\n        if (!val)\n            return undefined;\n        return val.id;\n    }\n    fromDb(val) {\n        return this.fromJson(val);\n    }\n    toDb(val) {\n        return this.toJson(val);\n    }\n    toInput(val, inputType) {\n        return this.toJson(val);\n    }\n    fromInput(val, inputType) {\n        return this.fromJson(val);\n    }\n    displayValue(val) {\n        if (!val)\n            return '';\n        return val.caption;\n    }\n    fieldTypeInDb;\n    inputType;\n}\nconst typeCache = new Map();\nexport function getValueList(type) {\n    let meta = type?.metadata;\n    if (!meta && isOfType(type, 'options'))\n        meta = type;\n    type = meta?.valueType || type;\n    if (type) {\n        var options = type[storableMember];\n        if (options)\n            return ValueListInfo.get(type).getValues();\n    }\n    let optionalValues = meta?.options[fieldOptionalValuesFunctionKey];\n    if (optionalValues)\n        return optionalValues();\n    return undefined;\n}\nexport const storableMember = Symbol.for('storableMember');\nexport const fieldOptionalValuesFunctionKey = Symbol.for('fieldOptionalValues');\nexport function buildOptions(options, remult) {\n    let r = {};\n    for (const o of options) {\n        if (o) {\n            if (typeof o === 'function')\n                o(r, remult);\n            else {\n                const { validate, ...otherOptions } = o;\n                r.validate = addValidator(r.validate, validate);\n                Object.assign(r, otherOptions);\n            }\n        }\n    }\n    return r;\n}\nexport function decorateColumnSettings(settings, remult) {\n    if (settings.valueType) {\n        let settingsOnTypeLevel = settings.valueType[storableMember];\n        if (settingsOnTypeLevel) {\n            settings = buildOptions([...settingsOnTypeLevel, settings], remult);\n        }\n    }\n    if (settings.valueType == String) {\n        let x = settings;\n        if (!settings.valueConverter)\n            x.valueConverter = ValueConverters.String;\n    }\n    if (settings.valueType == Number) {\n        let x = settings;\n        if (!settings.valueConverter)\n            x.valueConverter = ValueConverters.Number;\n    }\n    if (settings.valueType == Date) {\n        let x = settings;\n        if (!settings.valueConverter) {\n            x.valueConverter = ValueConverters.Date;\n        }\n    }\n    if (settings.valueType == Boolean) {\n        let x = settings;\n        if (!x.valueConverter)\n            x.valueConverter = ValueConverters.Boolean;\n    }\n    if (!settings.valueConverter) {\n        let ei = getEntitySettings(settings.valueType, false);\n        if (ei) {\n            let isIdNumeric = undefined;\n            settings.valueConverter = {\n                toDb: (x) => x,\n                fromDb: (x) => x,\n            };\n            settings.valueConverter = new Proxy(settings.valueConverter, {\n                get(target, property) {\n                    if (target[property] === undefined) {\n                        if (isIdNumeric === undefined) {\n                            if (property === 'inputType')\n                                return '';\n                            isIdNumeric =\n                                remult.repo(settings.valueType).metadata.idMetadata.field\n                                    .valueType === Number;\n                            for (const key of [\n                                'fieldTypeInDb',\n                                'toJson',\n                                'fromJson',\n                                'toDb',\n                                'fromDb',\n                            ]) {\n                                //@ts-ignore\n                                target[key] = isIdNumeric\n                                    ? ValueConverters.Integer[key]\n                                    : ValueConverters.String[key];\n                            }\n                        }\n                    }\n                    return target[property];\n                },\n                set(target, property, value, receiver) {\n                    target[property] = value;\n                    return true;\n                },\n            });\n        }\n        else\n            settings.valueConverter = ValueConverters.Default;\n        return settings;\n    }\n    if (!settings.valueConverter.toJson) {\n        settings.valueConverter.toJson = (x) => x;\n    }\n    if (!settings.valueConverter.fromJson) {\n        settings.valueConverter.fromJson = (x) => x;\n    }\n    if (!settings.valueConverter.toDb) {\n        settings.valueConverter.toDb = (x) => settings.valueConverter.toJson(x);\n    }\n    if (!settings.valueConverter.fromDb) {\n        settings.valueConverter.fromDb = (x) => settings.valueConverter.fromJson(x);\n    }\n    if (!settings.valueConverter.toInput) {\n        settings.valueConverter.toInput = (x) => settings.valueConverter.toJson(x);\n    }\n    if (!settings.valueConverter.fromInput) {\n        settings.valueConverter.fromInput = (x) => settings.valueConverter.fromJson(x);\n    }\n    return settings;\n}\nexport class EntityBase {\n    get _() {\n        return getEntityRef(this);\n    }\n    save() {\n        return getEntityRef(this).save();\n    }\n    assign(values) {\n        assign(this, values);\n        return this;\n    }\n    delete() {\n        return this._.delete();\n    }\n    isNew() {\n        return this._.isNew();\n    }\n    get $() {\n        return this._.fields;\n    }\n}\nexport class ControllerBase {\n    remult;\n    constructor(remult) {\n        this.remult = remult || defaultRemult;\n    }\n    assign(values) {\n        assign(this, values);\n        return this;\n    }\n    get $() {\n        return getFields(this, this.remult);\n    }\n    get _() {\n        return getControllerRef(this, this.remult);\n    }\n}\nclass QueryResultImpl {\n    options;\n    repo;\n    constructor(options, repo) {\n        this.options = options;\n        this.repo = repo;\n        if (!this.options)\n            this.options = {};\n        if (!this.options.pageSize) {\n            this.options.pageSize = queryConfig.defaultPageSize;\n        }\n    }\n    _count = undefined;\n    async getPage(page) {\n        if (page < 1)\n            page = 1;\n        return this.repo.find({\n            where: this.options.where,\n            orderBy: this.options.orderBy,\n            limit: this.options.pageSize,\n            page: page,\n            load: this.options.load,\n            include: this.options.include,\n        });\n    }\n    async count() {\n        if (this._count === undefined)\n            this._count = await this.repo.count(this.options.where);\n        return this._count;\n    }\n    async forEach(what) {\n        let i = 0;\n        for await (const x of this) {\n            await what(x);\n            i++;\n        }\n        return i;\n    }\n    async paginator(pNextPageFilter) {\n        this.options.orderBy = Sort.createUniqueEntityOrderBy(this.repo.metadata, this.options.orderBy);\n        let items = await this.repo.find({\n            where: {\n                $and: [this.options.where, pNextPageFilter],\n            },\n            orderBy: this.options.orderBy,\n            limit: this.options.pageSize,\n            load: this.options.load,\n            include: this.options.include,\n        });\n        let nextPage = undefined;\n        let hasNextPage = items.length == this.options.pageSize;\n        if (hasNextPage) {\n            let nextPageFilter = await this.repo._createAfterFilter(this.options.orderBy, items[items.length - 1]);\n            nextPage = () => this.paginator(nextPageFilter);\n        }\n        return {\n            count: () => this.count(),\n            hasNextPage,\n            items,\n            nextPage,\n        };\n    }\n    [Symbol.asyncIterator]() {\n        if (!this.options.where) {\n            this.options.where = {};\n        }\n        let ob = this.options.orderBy;\n        this.options.orderBy = Sort.createUniqueEntityOrderBy(this.repo.metadata, ob);\n        let itemIndex = -1;\n        let currentPage = undefined;\n        let itStrategy;\n        let j = 0;\n        itStrategy = async () => {\n            if (this.options.progress) {\n                this.options.progress.progress(j++ / (await this.count()));\n            }\n            if (currentPage === undefined || itemIndex == currentPage.items.length) {\n                if (currentPage && !currentPage.hasNextPage)\n                    return { value: undefined, done: true };\n                let prev = currentPage;\n                if (currentPage)\n                    currentPage = await currentPage.nextPage();\n                else\n                    currentPage = await this.paginator();\n                itemIndex = 0;\n                if (currentPage.items.length == 0) {\n                    return { value: undefined, done: true };\n                }\n                else {\n                    if (prev?.items.length > 0) {\n                        if (this.repo.getEntityRef(prev.items[0]).getId() ==\n                            this.repo.getEntityRef(currentPage.items[0]).getId())\n                            throw new Error('pagination failure, returned same first row');\n                    }\n                }\n            }\n            if (itemIndex < currentPage.items.length)\n                return { value: currentPage.items[itemIndex++], done: false };\n        };\n        return {\n            next: async () => {\n                let r = itStrategy();\n                return r;\n            },\n        };\n    }\n}\nclass cacheEntityInfo {\n    value = {};\n    promise;\n}\nclass SubscribableImp {\n    reportChanged() {\n        if (this._subscribers)\n            this._subscribers.forEach((x) => x.reportChanged());\n    }\n    reportObserved() {\n        if (this._subscribers)\n            this._subscribers.forEach((x) => x.reportObserved());\n    }\n    _subscribers;\n    subscribe(listener) {\n        let list;\n        if (typeof listener === 'function')\n            list = {\n                reportChanged: () => listener(),\n                reportObserved: () => { },\n            };\n        else\n            list = listener;\n        if (!this._subscribers) {\n            this._subscribers = [];\n        }\n        this._subscribers.push(list);\n        return () => (this._subscribers = this._subscribers.filter((x) => x != list));\n    }\n}\nexport function getEntityMetadata(entity) {\n    if (entity.metadata)\n        return entity.metadata;\n    const settings = getEntitySettings(entity, false);\n    if (settings) {\n        return defaultRemult.repo(entity).metadata;\n    }\n    return entity;\n}\nexport function getRepository(entity) {\n    const settings = getEntitySettings(entity, false);\n    if (settings) {\n        return defaultRemult.repo(entity);\n    }\n    return entity;\n}\nasync function promiseAll(array, mapToPromise) {\n    const result = [];\n    for (let index = 0; index < array.length; index++) {\n        const element = array[index];\n        result.push(await mapToPromise(element, index));\n    }\n    return result;\n}\n", "import { FilterConsumerBridgeToSqlRequest, dbNamesOf, isDbReadonly, } from '../filter/filter-consumer-bridge-to-sql-request.js';\nimport { Filter, customDatabaseFilterToken, } from '../filter/filter-interfaces.js';\nimport { remult as defaultRemult } from '../remult-proxy.js';\nimport { getRepository, isAutoIncrement, } from '../remult3/RepositoryImplementation.js';\nimport { Sort } from '../sort.js';\nimport { ValueConverters } from '../valueConverters.js';\nimport { getRepositoryInternals } from '../remult3/repository-internals.js';\nimport { isOfType } from '../isOfType.js';\n// @dynamic\nexport class SqlDatabase {\n    sql;\n    static getDb(dataProvider) {\n        const r = (dataProvider || defaultRemult.dataProvider);\n        if (isOfType(r, 'createCommand'))\n            return r;\n        else\n            throw 'the data provider is not an SqlCommandFactory';\n    }\n    createCommand() {\n        return new LogSQLCommand(this.sql.createCommand(), SqlDatabase.LogToConsole);\n    }\n    async execute(sql) {\n        return await this.createCommand().execute(sql);\n    }\n    wrapIdentifier = (x) => x;\n    /* @internal*/\n    _getSourceSql() {\n        return this.sql;\n    }\n    async ensureSchema(entities) {\n        if (this.sql.ensureSchema)\n            await this.sql.ensureSchema(entities);\n    }\n    getEntityDataProvider(entity) {\n        if (!this.sql.supportsJsonColumnType) {\n            for (const f of entity.fields.toArray()) {\n                if (f.valueConverter.fieldTypeInDb === 'json') {\n                    //@ts-ignore\n                    f.valueConverter = {\n                        ...f.valueConverter,\n                        toDb: ValueConverters.JsonString.toDb,\n                        fromDb: ValueConverters.JsonString.fromDb,\n                    };\n                }\n            }\n        }\n        return new ActualSQLServerDataProvider(entity, this, async (dbName) => {\n            if (this.createdEntities.indexOf(dbName.$entityName) < 0) {\n                this.createdEntities.push(dbName.$entityName);\n                await this.sql.entityIsUsedForTheFirstTime(entity);\n            }\n        }, this.sql);\n    }\n    transaction(action) {\n        return this.sql.transaction(async (x) => {\n            let completed = false;\n            try {\n                await action(new SqlDatabase({\n                    createCommand: () => {\n                        let c = x.createCommand();\n                        return {\n                            addParameterAndReturnSqlToken: (val) => {\n                                return c.param(val);\n                            },\n                            param: (x) => c.param(x),\n                            execute: async (sql) => {\n                                if (completed)\n                                    throw \"can't run a command after the transaction was completed\";\n                                return c.execute(sql);\n                            },\n                        };\n                    },\n                    getLimitSqlSyntax: this.sql.getLimitSqlSyntax,\n                    entityIsUsedForTheFirstTime: (y) => x.entityIsUsedForTheFirstTime(y),\n                    transaction: (z) => x.transaction(z),\n                    supportsJsonColumnType: this.sql.supportsJsonColumnType,\n                    wrapIdentifier: this.wrapIdentifier,\n                    end: this.end,\n                }));\n            }\n            finally {\n                completed = true;\n            }\n        });\n    }\n    /**\n     * Creates a raw filter for entity filtering.\n     * @param {CustomSqlFilterBuilderFunction} build - The custom SQL filter builder function.\n     * @returns {EntityFilter<any>} - The entity filter with a custom SQL filter.\n     * @example\n     * SqlDatabase.rawFilter(({param}) =>\n          `\"customerId\" in (select id from customers where city = ${param(customerCity)})`\n        )\n     * @see [Leveraging Database Capabilities with Raw SQL in Custom Filters](https://remult.dev/docs/custom-filter.html#leveraging-database-capabilities-with-raw-sql-in-custom-filters)\n     */\n    static rawFilter(build) {\n        return {\n            [customDatabaseFilterToken]: {\n                buildSql: build,\n            },\n        };\n    }\n    static async filterToRaw(repo, condition, sqlCommand, dbNames, wrapIdentifier) {\n        if (!sqlCommand) {\n            sqlCommand = new myDummySQLCommand();\n        }\n        const r = getRepository(repo);\n        var b = new FilterConsumerBridgeToSqlRequest(sqlCommand, dbNames || (await dbNamesOf(r.metadata, wrapIdentifier)));\n        b._addWhere = false;\n        await (await getRepositoryInternals(r)._translateWhereToFilter(condition)).__applyToConsumer(b);\n        return await b.resolveWhere();\n    }\n    /**\n     * `false` _(default)_ - No logging\n     *\n     * `true` - to log all queries to the console\n     *\n     * `oneLiner` - to log all queries to the console as one line\n     *\n     * a `function` - to log all queries to the console as a custom format\n     */\n    static LogToConsole = false;\n    /**\n     * Threshold in milliseconds for logging queries to the console.\n     */\n    static durationThreshold = 0;\n    constructor(sql) {\n        this.sql = sql;\n        if (sql.wrapIdentifier)\n            this.wrapIdentifier = (x) => sql.wrapIdentifier(x);\n        if (isOfType(sql, 'provideMigrationBuilder')) {\n            this.provideMigrationBuilder = (x) => sql.provideMigrationBuilder(x);\n        }\n        if (isOfType(sql, 'end'))\n            this.end = () => sql.end();\n    }\n    provideMigrationBuilder;\n    createdEntities = [];\n    end;\n}\nconst icons = new Map([\n    // CRUD\n    ['INSERT', '⚪'],\n    ['SELECT', '🔵'],\n    ['UPDATE', '🟣'],\n    ['DELETE', '🟤'],\n    // Additional\n    ['CREATE', '🟩'],\n    ['ALTER', '🟨'],\n    ['DROP', '🟥'],\n    ['TRUNCATE', '⬛'],\n    ['GRANT', '🟪'],\n    ['REVOKE', '🟫'], // Used to take back permissions from a user.\n]);\nclass LogSQLCommand {\n    origin;\n    logToConsole;\n    constructor(origin, logToConsole) {\n        this.origin = origin;\n        this.logToConsole = logToConsole;\n    }\n    args = {};\n    addParameterAndReturnSqlToken(val) {\n        return this.param(val);\n    }\n    param(val, name) {\n        let r = this.origin.param(val);\n        this.args[r] = val;\n        return r;\n    }\n    async execute(sql) {\n        try {\n            let start = new Date();\n            let r = await this.origin.execute(sql);\n            if (this.logToConsole !== false) {\n                var d = new Date().valueOf() - start.valueOf();\n                if (d > SqlDatabase.durationThreshold) {\n                    const duration = d / 1000;\n                    if (this.logToConsole === 'oneLiner') {\n                        const rawSql = sql\n                            .replace(/(\\r\\n|\\n|\\r|\\t)/gm, ' ')\n                            .replace(/  +/g, ' ')\n                            .trim();\n                        const first = rawSql.split(' ')[0].toUpperCase();\n                        console.info(`${icons.get(first) || '💢'} (${duration.toFixed(3)}) ${rawSql} ${JSON.stringify(this.args)}`);\n                    }\n                    else if (typeof this.logToConsole === 'function') {\n                        this.logToConsole(duration, sql, this.args);\n                    }\n                    else {\n                        console.info(sql + '\\n', { arguments: this.args, duration });\n                    }\n                }\n            }\n            return r;\n        }\n        catch (err) {\n            console.error((err.message || 'Sql Error') + ':\\n', sql, {\n                arguments: this.args,\n                error: err,\n            });\n            throw err;\n        }\n    }\n}\nclass ActualSQLServerDataProvider {\n    entity;\n    sql;\n    iAmUsed;\n    strategy;\n    static LogToConsole = false;\n    constructor(entity, sql, iAmUsed, strategy) {\n        this.entity = entity;\n        this.sql = sql;\n        this.iAmUsed = iAmUsed;\n        this.strategy = strategy;\n    }\n    async init() {\n        let dbNameProvider = await dbNamesOf(this.entity, (x) => this.sql.wrapIdentifier(x));\n        await this.iAmUsed(dbNameProvider);\n        return dbNameProvider;\n    }\n    async count(where) {\n        let e = await this.init();\n        let select = 'select count(*) count from ' + e.$entityName;\n        let r = this.sql.createCommand();\n        if (where) {\n            let wc = new FilterConsumerBridgeToSqlRequest(r, e);\n            where.__applyToConsumer(wc);\n            select += await wc.resolveWhere();\n        }\n        return r.execute(select).then((r) => {\n            return Number(r.rows[0].count);\n        });\n    }\n    async find(options) {\n        let e = await this.init();\n        let { colKeys, select } = this.buildSelect(e);\n        select = 'select ' + select;\n        select += '\\n from ' + e.$entityName;\n        let r = this.sql.createCommand();\n        if (options) {\n            if (options.where) {\n                let where = new FilterConsumerBridgeToSqlRequest(r, e);\n                options.where.__applyToConsumer(where);\n                select += await where.resolveWhere();\n            }\n            if (options.limit) {\n                options.orderBy = Sort.createUniqueSort(this.entity, options.orderBy);\n            }\n            if (!options.orderBy) {\n                options.orderBy = Sort.createUniqueSort(this.entity, new Sort());\n            }\n            if (options.orderBy) {\n                let first = true;\n                let segs = [];\n                for (const s of options.orderBy.Segments) {\n                    segs.push(s);\n                }\n                for (const c of segs) {\n                    if (first) {\n                        select += ' Order By ';\n                        first = false;\n                    }\n                    else\n                        select += ', ';\n                    select += e.$dbNameOf(c.field);\n                    if (c.isDescending)\n                        select += ' desc';\n                    if (this.sql._getSourceSql().orderByNullsFirst) {\n                        if (c.isDescending)\n                            select += ' nulls last';\n                        else\n                            select += ' nulls first';\n                    }\n                }\n            }\n            if (options.limit) {\n                let page = 1;\n                if (options.page)\n                    page = options.page;\n                if (page < 1)\n                    page = 1;\n                select +=\n                    ' ' +\n                        this.strategy.getLimitSqlSyntax(options.limit, (page - 1) * options.limit);\n            }\n        }\n        return r.execute(select).then((r) => {\n            return r.rows.map((y) => {\n                return this.buildResultRow(colKeys, y, r);\n            });\n        });\n    }\n    buildResultRow(colKeys, y, r) {\n        let result = {};\n        for (let index = 0; index < colKeys.length; index++) {\n            const col = colKeys[index];\n            try {\n                result[col.key] = col.valueConverter.fromDb(y[r.getColumnKeyInResultForIndexInSelect(index)]);\n            }\n            catch (err) {\n                throw new Error('Failed to load from db:' + col.key + '\\r\\n' + err);\n            }\n        }\n        return result;\n    }\n    buildSelect(e) {\n        let select = '';\n        let colKeys = [];\n        for (const x of this.entity.fields) {\n            if (x.isServerExpression) {\n            }\n            else {\n                if (colKeys.length > 0)\n                    select += ', ';\n                select += e.$dbNameOf(x);\n                colKeys.push(x);\n            }\n        }\n        return { colKeys, select };\n    }\n    async update(id, data) {\n        let e = await this.init();\n        let r = this.sql.createCommand();\n        let statement = 'update ' + e.$entityName + ' set ';\n        let added = false;\n        for (const x of this.entity.fields) {\n            if (isDbReadonly(x, e)) {\n            }\n            else if (data[x.key] !== undefined) {\n                let v = x.valueConverter.toDb(data[x.key]);\n                if (v !== undefined) {\n                    if (!added)\n                        added = true;\n                    else\n                        statement += ', ';\n                    statement += e.$dbNameOf(x) + ' = ' + r.param(v);\n                }\n            }\n        }\n        const idFilter = this.entity.idMetadata.getIdFilter(id);\n        let f = new FilterConsumerBridgeToSqlRequest(r, e);\n        Filter.fromEntityFilter(this.entity, idFilter).__applyToConsumer(f);\n        statement += await f.resolveWhere();\n        let { colKeys, select } = this.buildSelect(e);\n        if (!this.sql._getSourceSql().doesNotSupportReturningSyntax)\n            statement += ' returning ' + select;\n        return r.execute(statement).then((sqlResult) => {\n            this.sql._getSourceSql().afterMutation?.();\n            if (this.sql._getSourceSql().doesNotSupportReturningSyntax) {\n                return getRowAfterUpdate(this.entity, this, data, id, 'update');\n            }\n            if (sqlResult.rows.length != 1)\n                throw new Error('Failed to update row with id ' +\n                    id +\n                    ', rows updated: ' +\n                    sqlResult.rows.length);\n            return this.buildResultRow(colKeys, sqlResult.rows[0], sqlResult);\n        });\n    }\n    async delete(id) {\n        let e = await this.init();\n        let r = this.sql.createCommand();\n        let f = new FilterConsumerBridgeToSqlRequest(r, e);\n        Filter.fromEntityFilter(this.entity, this.entity.idMetadata.getIdFilter(id)).__applyToConsumer(f);\n        let statement = 'delete from ' + e.$entityName;\n        statement += await f.resolveWhere();\n        return r.execute(statement).then(() => {\n            this.sql._getSourceSql().afterMutation?.();\n        });\n    }\n    async insert(data) {\n        let e = await this.init();\n        let r = this.sql.createCommand();\n        let cols = '';\n        let vals = '';\n        let added = false;\n        for (const x of this.entity.fields) {\n            if (isDbReadonly(x, e)) {\n            }\n            else {\n                let v = x.valueConverter.toDb(data[x.key]);\n                if (v != undefined) {\n                    if (!added)\n                        added = true;\n                    else {\n                        cols += ', ';\n                        vals += ', ';\n                    }\n                    cols += e.$dbNameOf(x);\n                    vals += r.param(v);\n                }\n            }\n        }\n        let statement = `insert into ${e.$entityName} (${cols}) values (${vals})`;\n        let { colKeys, select } = this.buildSelect(e);\n        if (!this.sql._getSourceSql().doesNotSupportReturningSyntax)\n            statement += ' returning ' + select;\n        return await r.execute(statement).then((sql) => {\n            this.sql._getSourceSql().afterMutation?.();\n            if (this.sql._getSourceSql().doesNotSupportReturningSyntax) {\n                if (isAutoIncrement(this.entity.idMetadata.field)) {\n                    const id = sql.rows[0];\n                    if (typeof id !== 'number')\n                        throw new Error('Auto increment, for a database that is does not support returning syntax, should return an array with the single last added id. Instead it returned: ' +\n                            JSON.stringify(id));\n                    return this.find({\n                        where: new Filter((x) => x.isEqualTo(this.entity.idMetadata.field, id)),\n                    }).then((r) => r[0]);\n                }\n                else {\n                    return getRowAfterUpdate(this.entity, this, data, undefined, 'insert');\n                }\n            }\n            return this.buildResultRow(colKeys, sql.rows[0], sql);\n        });\n    }\n}\nclass myDummySQLCommand {\n    execute(sql) {\n        throw new Error('Method not implemented.');\n    }\n    addParameterAndReturnSqlToken(val) {\n        return this.param(val);\n    }\n    param(val) {\n        if (val === null)\n            return 'null';\n        if (val instanceof Date)\n            val = val.toISOString();\n        if (typeof val == 'string') {\n            if (val == undefined)\n                val = '';\n            return \"'\" + val.replace(/'/g, \"''\") + \"'\";\n        }\n        return val.toString();\n    }\n}\nasync function bulkInsert(array, db) {\n    if (array.length == 0)\n        return;\n    const chunkSize = 250;\n    for (let i = 0; i < array.length; i += chunkSize) {\n        const items = array.slice(i, i + chunkSize);\n        // do whatever\n        const c = db.createCommand();\n        let sql = 'insert into ' +\n            (await items[0]._.metadata.dbName) +\n            ' (' +\n            (await Promise.all(items[0]._.metadata.fields.toArray().map((f) => f.dbName))).join(',') +\n            ') values ';\n        sql += items\n            .map((row) => '(' +\n            row.$.toArray()\n                .map((f) => c.param(f.metadata.valueConverter.toDb(f.value)))\n                .join(', ') +\n            ')')\n            .join(',');\n        await c.execute(sql);\n    }\n}\nexport function getRowAfterUpdate(meta, dataProvider, data, id, operation) {\n    const idFilter = id !== undefined ? meta.idMetadata.getIdFilter(id) : {};\n    return dataProvider\n        .find({\n        where: new Filter((x) => {\n            for (const field of meta.idMetadata.fields) {\n                x.isEqualTo(field, data[field.key] ?? idFilter[field.key]);\n            }\n        }),\n    })\n        .then((r) => {\n        if (r.length != 1)\n            throw new Error(`Failed to ${operation} row - result contained ${r.length} rows`);\n        return r[0];\n    });\n}\n", "import { SqlDatabase } from '../data-providers/sql-database.js';\nimport { remult } from '../remult-proxy.js';\nimport { getEntityMetadata } from '../remult3/RepositoryImplementation.js';\nimport { getRelationFieldInfo } from '../remult3/relationInfoMember.js';\nexport class FilterConsumerBridgeToSqlRequest {\n    r;\n    nameProvider;\n    where = '';\n    _addWhere = true;\n    promises = [];\n    async resolveWhere() {\n        while (this.promises.length > 0) {\n            let p = this.promises;\n            this.promises = [];\n            for (const pr of p) {\n                await pr;\n            }\n        }\n        return this.where;\n    }\n    constructor(r, nameProvider) {\n        this.r = r;\n        this.nameProvider = nameProvider;\n    }\n    custom(key, customItem) {\n        throw new Error('Custom filter should be translated before it gets here');\n    }\n    or(orElements) {\n        let statement = '';\n        this.promises.push((async () => {\n            for (const element of orElements) {\n                let f = new FilterConsumerBridgeToSqlRequest(this.r, this.nameProvider);\n                f._addWhere = false;\n                element.__applyToConsumer(f);\n                let where = await f.resolveWhere();\n                if (!where)\n                    return; //since if any member of or is empty, then the entire or is irrelevant\n                if (where.length > 0) {\n                    if (statement.length > 0) {\n                        statement += ' or ';\n                    }\n                    if (orElements.length > 1) {\n                        statement += '(' + where + ')';\n                    }\n                    else\n                        statement += where;\n                }\n            }\n            this.addToWhere('(' + statement + ')');\n        })());\n    }\n    isNull(col) {\n        this.promises.push((async () => this.addToWhere(this.nameProvider.$dbNameOf(col) + ' is null'))());\n    }\n    isNotNull(col) {\n        this.promises.push((async () => this.addToWhere(this.nameProvider.$dbNameOf(col) + ' is not null'))());\n    }\n    isIn(col, val) {\n        this.promises.push((async () => {\n            if (val && val.length > 0)\n                this.addToWhere(this.nameProvider.$dbNameOf(col) +\n                    ' in (' +\n                    val\n                        .map((x) => this.r.param(col.valueConverter.toDb(x)))\n                        .join(',') +\n                    ')');\n            else\n                this.addToWhere('1 = 0 /*isIn with no values*/');\n        })());\n    }\n    isEqualTo(col, val) {\n        this.add(col, val, '=');\n    }\n    isDifferentFrom(col, val) {\n        this.add(col, val, '<>');\n    }\n    isGreaterOrEqualTo(col, val) {\n        this.add(col, val, '>=');\n    }\n    isGreaterThan(col, val) {\n        this.add(col, val, '>');\n    }\n    isLessOrEqualTo(col, val) {\n        this.add(col, val, '<=');\n    }\n    isLessThan(col, val) {\n        this.add(col, val, '<');\n    }\n    containsCaseInsensitive(col, val) {\n        this.promises.push((async () => {\n            this.addToWhere('lower (' +\n                this.nameProvider.$dbNameOf(col) +\n                \") like lower ('%\" +\n                val.replace(/'/g, \"''\") +\n                \"%')\");\n        })());\n    }\n    notContainsCaseInsensitive(col, val) {\n        this.promises.push((async () => {\n            this.addToWhere('not lower (' +\n                this.nameProvider.$dbNameOf(col) +\n                \") like lower ('%\" +\n                val.replace(/'/g, \"''\") +\n                \"%')\");\n        })());\n    }\n    add(col, val, operator) {\n        this.promises.push((async () => {\n            let x = this.nameProvider.$dbNameOf(col) +\n                ' ' +\n                operator +\n                ' ' +\n                this.r.param(col.valueConverter.toDb(val));\n            this.addToWhere(x);\n        })());\n    }\n    addToWhere(x) {\n        if (this.where.length == 0) {\n            if (this._addWhere)\n                this.where += ' where ';\n        }\n        else\n            this.where += ' and ';\n        this.where += x;\n    }\n    databaseCustom(databaseCustom) {\n        this.promises.push((async () => {\n            if (databaseCustom?.buildSql) {\n                let item = new CustomSqlFilterBuilder(this.r, this.nameProvider.wrapIdentifier);\n                let sql = await databaseCustom.buildSql(item);\n                if (typeof sql !== 'string')\n                    sql = item.sql;\n                if (sql) {\n                    this.addToWhere('(' + sql + ')');\n                }\n            }\n        })());\n    }\n}\n/**\n * Represents a custom SQL filter builder.\n */\nexport class CustomSqlFilterBuilder {\n    r;\n    wrapIdentifier;\n    constructor(r, wrapIdentifier) {\n        this.r = r;\n        this.wrapIdentifier = wrapIdentifier;\n        this.param.bind(this);\n        this.filterToRaw.bind(this);\n    }\n    sql = '';\n    /** @deprecated  use `param` instead*/\n    addParameterAndReturnSqlToken(val) {\n        return this.param(val);\n    }\n    /**\n     * Adds a parameter value.\n     * @param {valueType} val - The value to add as a parameter.\n     * @param {FieldMetadata<valueType>} [field] - The field metadata.\n     * @returns {string} - The SQL token.\n     */\n    param = (val, field) => {\n        if (typeof field === 'object' && field.valueConverter.toDb) {\n            val = field.valueConverter.toDb(val);\n        }\n        return this.r.param(val);\n    };\n    /**\n     * Converts an entity filter into a raw SQL condition - and appends to it any `backendPrefilter` and `backendPreprocessFilter`\n     * @param {RepositoryOverloads<entityType>} repo - The repository.\n     * @param {EntityFilter<entityType>} condition - The entity filter.\n     * @returns {Promise<string>} - The raw SQL.\n     */\n    filterToRaw = async (repo, condition) => {\n        return SqlDatabase.filterToRaw(repo, condition, this, undefined, this.wrapIdentifier);\n    };\n}\nexport function isDbReadonly(field, dbNames) {\n    return (field.dbReadOnly ||\n        field.isServerExpression ||\n        (field.options.sqlExpression && field.dbName != dbNames.$dbNameOf(field)));\n}\nexport function shouldNotCreateField(field, dbNames) {\n    return (field.isServerExpression ||\n        (field.options.sqlExpression && field.dbName != dbNames.$dbNameOf(field)));\n}\nexport function shouldCreateEntity(entity, e) {\n    return (!entity.options.sqlExpression &&\n        e.$entityName.toLowerCase().indexOf('from ') < 0);\n}\nexport async function dbNamesOf(repo, wrapIdentifierOrOptions) {\n    let options = typeof wrapIdentifierOrOptions === 'function'\n        ? { wrapIdentifier: wrapIdentifierOrOptions }\n        : wrapIdentifierOrOptions || {};\n    var meta = getEntityMetadata(repo);\n    if (!options.wrapIdentifier) {\n        options.wrapIdentifier = remult.dataProvider.wrapIdentifier;\n    }\n    if (!options.wrapIdentifier)\n        options.wrapIdentifier = (x) => x;\n    const result = {\n        $entityName: await entityDbName(meta, options.wrapIdentifier),\n        toString: () => result.$entityName,\n        $dbNameOf: (field) => {\n            var key;\n            if (typeof field === 'string')\n                key = field;\n            else\n                key = field.key;\n            return result[key];\n        },\n        wrapIdentifier: options.wrapIdentifier,\n    };\n    for (const field of meta.fields) {\n        let r = await fieldDbName(field, meta, options.wrapIdentifier);\n        if (!field.options.sqlExpression)\n            if (typeof options.tableName === 'string')\n                r = options.wrapIdentifier(options.tableName) + '.' + r;\n            else if (options.tableName === true) {\n                r = result.$entityName + '.' + r;\n            }\n        result[field.key] = r;\n    }\n    return result;\n}\nexport async function entityDbName(metadata, wrapIdentifier = (x) => x) {\n    if (metadata.options.sqlExpression) {\n        if (typeof metadata.options.sqlExpression === 'string')\n            return metadata.options.sqlExpression;\n        else if (typeof metadata.options.sqlExpression === 'function') {\n            const prev = metadata.options.sqlExpression;\n            try {\n                metadata.options.sqlExpression =\n                    \"recursive sqlExpression call for entity '\" + metadata.key + \"'. \";\n                return await prev(metadata);\n            }\n            finally {\n                metadata.options.sqlExpression = prev;\n            }\n        }\n    }\n    return wrapIdentifier(metadata.dbName);\n}\nexport async function fieldDbName(f, meta, wrapIdentifier = (x) => x) {\n    try {\n        if (f.options.sqlExpression) {\n            let result;\n            if (typeof f.options.sqlExpression === 'function') {\n                const prev = f.options.sqlExpression;\n                try {\n                    f.options.sqlExpression =\n                        \"recursive sqlExpression call for field '\" + f.key + \"'. \";\n                    result = await prev(meta);\n                    f.options.sqlExpression = () => result;\n                }\n                finally {\n                }\n            }\n            else\n                result = f.options.sqlExpression;\n            if (!result)\n                return f.dbName;\n            return result;\n        }\n        const rel = getRelationFieldInfo(f);\n        let field = rel?.type === 'toOne' &&\n            f.options.field;\n        if (field) {\n            let fInfo = meta.fields.find(field);\n            if (fInfo)\n                return fieldDbName(fInfo, meta, wrapIdentifier);\n        }\n        return wrapIdentifier(f.dbName);\n    }\n    finally {\n    }\n}\n", "import { CompoundIdField } from '../CompoundIdField.js';\nimport { dbNamesOf, isDbReadonly, } from '../filter/filter-consumer-bridge-to-sql-request.js';\nimport { Filter, customDatabaseFilterToken, } from '../filter/filter-interfaces.js';\nexport class ArrayEntityDataProvider {\n    entity;\n    rows;\n    static rawFilter(filter) {\n        return {\n            [customDatabaseFilterToken]: {\n                arrayFilter: filter,\n            },\n        };\n    }\n    constructor(entity, rows) {\n        this.entity = entity;\n        this.rows = rows;\n    }\n    //@internal\n    __names;\n    //@internal\n    async init() {\n        if (this.__names)\n            return this.__names;\n        this.__names = await dbNamesOf(this.entity, (x) => x);\n        for (const r of this.rows()) {\n            this.verifyThatRowHasAllNotNullColumns(r, this.__names);\n        }\n        return this.__names;\n    }\n    //@internal\n    verifyThatRowHasAllNotNullColumns(r, names) {\n        for (const f of this.entity.fields) {\n            const key = names.$dbNameOf(f);\n            if (!f.isServerExpression)\n                if (!f.allowNull) {\n                    if (r[key] === undefined || r[key] === null) {\n                        let val = undefined;\n                        if (f.valueType === Boolean)\n                            val = false;\n                        else if (f.valueType === Number)\n                            val = 0;\n                        else if (f.valueType === String)\n                            val = '';\n                        r[key] = val;\n                    }\n                }\n                else if (r[key] === undefined)\n                    r[key] = null;\n        }\n    }\n    async count(where) {\n        let rows = this.rows();\n        const names = await this.init();\n        let j = 0;\n        for (let i = 0; i < rows.length; i++) {\n            if (!where) {\n                j++;\n            }\n            else {\n                let x = new FilterConsumerBridgeToObject(rows[i], names);\n                where.__applyToConsumer(x);\n                if (x.ok)\n                    j++;\n            }\n        }\n        return j;\n    }\n    async find(options) {\n        let rows = this.rows();\n        const dbNames = await this.init();\n        if (options) {\n            if (options.where) {\n                rows = rows.filter((i) => {\n                    let x = new FilterConsumerBridgeToObject(i, dbNames);\n                    options.where.__applyToConsumer(x);\n                    return x.ok;\n                });\n            }\n            if (options.orderBy) {\n                rows = rows.sort((a, b) => {\n                    return options.orderBy.compare(a, b, dbNames.$dbNameOf);\n                });\n            }\n            rows = pageArray(rows, options);\n        }\n        if (rows)\n            return rows.map((i) => {\n                return this.translateFromJson(i, dbNames);\n            });\n        return [];\n    }\n    //@internal\n    translateFromJson(row, dbNames) {\n        let result = {};\n        for (const col of this.entity.fields) {\n            result[col.key] = col.valueConverter.fromJson(row[dbNames.$dbNameOf(col)]);\n        }\n        return result;\n    }\n    //@internal\n    translateToJson(row, dbNames) {\n        let result = {};\n        for (const col of this.entity.fields) {\n            if (!isDbReadonly(col, dbNames))\n                result[dbNames.$dbNameOf(col)] = col.valueConverter.toJson(row[col.key]);\n        }\n        return result;\n    }\n    //@internal\n    idMatches(id, names) {\n        return (item) => {\n            let x = new FilterConsumerBridgeToObject(item, names);\n            Filter.fromEntityFilter(this.entity, this.entity.idMetadata.getIdFilter(id)).__applyToConsumer(x);\n            return x.ok;\n        };\n    }\n    async update(id, data) {\n        const names = await this.init();\n        let idMatches = this.idMatches(id, names);\n        let keys = Object.keys(data);\n        for (let i = 0; i < this.rows().length; i++) {\n            let r = this.rows()[i];\n            if (idMatches(r)) {\n                let newR = { ...r };\n                for (const f of this.entity.fields) {\n                    if (!isDbReadonly(f, names)) {\n                        if (keys.includes(f.key)) {\n                            newR[names.$dbNameOf(f)] = f.valueConverter.toJson(data[f.key]);\n                        }\n                    }\n                }\n                this.verifyThatRowHasAllNotNullColumns(newR, names);\n                this.rows()[i] = newR;\n                return Promise.resolve(this.translateFromJson(this.rows()[i], names));\n            }\n        }\n        throw new Error(`ArrayEntityDataProvider: Couldn't find row with id \"${id}\" in entity \"${this.entity.key}\" to update`);\n    }\n    async delete(id) {\n        const names = await this.init();\n        let idMatches = this.idMatches(id, names);\n        for (let i = 0; i < this.rows().length; i++) {\n            if (idMatches(this.rows()[i])) {\n                this.rows().splice(i, 1);\n                return Promise.resolve();\n            }\n        }\n        throw new Error(`ArrayEntityDataProvider: Couldn't find row with id \"${id}\" in entity \"${this.entity.key}\" to delete`);\n    }\n    async insert(data) {\n        const names = await this.init();\n        let j = this.translateToJson(data, names);\n        let idf = this.entity.idMetadata.field;\n        if (!(idf instanceof CompoundIdField)) {\n            if (idf.valueConverter.fieldTypeInDb === 'autoincrement') {\n                j[idf.key] = 1;\n                for (const row of this.rows()) {\n                    if (row[idf.key] >= j[idf.key])\n                        j[idf.key] = row[idf.key] + 1;\n                }\n            }\n            if (j[idf.key])\n                this.rows().forEach((i) => {\n                    if (j[idf.key] == i[idf.key])\n                        throw Error('id already exists');\n                });\n        }\n        this.verifyThatRowHasAllNotNullColumns(j, names);\n        this.rows().push(j);\n        return Promise.resolve(this.translateFromJson(j, names));\n    }\n}\nfunction pageArray(rows, options) {\n    if (!options)\n        return rows;\n    if (!options.limit)\n        return rows;\n    let page = 1;\n    if (options.page)\n        page = options.page;\n    if (page < 1)\n        page = 1;\n    let x = 0;\n    return rows.filter((i) => {\n        x++;\n        let max = page * options.limit;\n        let min = max - options.limit;\n        return x > min && x <= max;\n    });\n}\nclass FilterConsumerBridgeToObject {\n    row;\n    dbNames;\n    ok = true;\n    constructor(row, dbNames) {\n        this.row = row;\n        this.dbNames = dbNames;\n    }\n    databaseCustom(databaseCustom) {\n        if (databaseCustom && databaseCustom.arrayFilter) {\n            if (!databaseCustom.arrayFilter(this.row))\n                this.ok = false;\n        }\n    }\n    custom(key, customItem) {\n        throw new Error('Custom Filter should be translated before it gets here');\n    }\n    or(orElements) {\n        for (const element of orElements) {\n            let filter = new FilterConsumerBridgeToObject(this.row, this.dbNames);\n            element.__applyToConsumer(filter);\n            if (filter.ok) {\n                return;\n            }\n        }\n        this.ok = false;\n    }\n    isNull(col) {\n        if (this.row[this.dbNames.$dbNameOf(col)] != null)\n            this.ok = false;\n    }\n    isNotNull(col) {\n        if (this.row[this.dbNames.$dbNameOf(col)] == null)\n            this.ok = false;\n    }\n    isIn(col, val) {\n        for (const v of val) {\n            if (this.row[this.dbNames.$dbNameOf(col)] == col.valueConverter.toJson(v)) {\n                return;\n            }\n        }\n        this.ok = false;\n    }\n    isEqualTo(col, val) {\n        if (this.row[this.dbNames.$dbNameOf(col)] != col.valueConverter.toJson(val))\n            this.ok = false;\n    }\n    isDifferentFrom(col, val) {\n        if (this.row[this.dbNames.$dbNameOf(col)] == col.valueConverter.toJson(val))\n            this.ok = false;\n    }\n    isGreaterOrEqualTo(col, val) {\n        if (this.row[this.dbNames.$dbNameOf(col)] < col.valueConverter.toJson(val))\n            this.ok = false;\n    }\n    isGreaterThan(col, val) {\n        if (this.row[this.dbNames.$dbNameOf(col)] <= col.valueConverter.toJson(val))\n            this.ok = false;\n    }\n    isLessOrEqualTo(col, val) {\n        if (this.row[this.dbNames.$dbNameOf(col)] > col.valueConverter.toJson(val))\n            this.ok = false;\n    }\n    isLessThan(col, val) {\n        if (this.row[this.dbNames.$dbNameOf(col)] >= col.valueConverter.toJson(val))\n            this.ok = false;\n    }\n    containsCaseInsensitive(col, val) {\n        let v = this.row[this.dbNames.$dbNameOf(col)];\n        if (!v) {\n            this.ok = false;\n            return;\n        }\n        let s = '' + v;\n        if (val)\n            val = col.valueConverter.toJson(val);\n        if (val)\n            val = val.toString().toLowerCase();\n        if (s.toLowerCase().indexOf(val) < 0)\n            this.ok = false;\n    }\n    notContainsCaseInsensitive(col, val) {\n        let v = this.row[this.dbNames.$dbNameOf(col)];\n        if (!v) {\n            this.ok = false;\n            return;\n        }\n        let s = '' + v;\n        if (val)\n            val = col.valueConverter.toJson(val);\n        if (val)\n            val = val.toString().toLowerCase();\n        if (s.toLowerCase().indexOf(val) >= 0)\n            this.ok = false;\n    }\n}\n", "import { setControllerSettings } from '../context.js';\nimport { entityInfo, entityInfo_key, getEntitySettings, } from './getEntityRef.js';\nimport { remultStatic } from '../remult-static.js';\n/**Decorates classes that should be used as entities.\n * Receives a key and an array of EntityOptions.\n * @example\n * import  { Entity, Fields } from \"remult\";\n * @Entity(\"tasks\", {\n *    allowApiCrud: true\n * })\n * export class Task {\n *    @Fields.uuid()\n *    id!: string;\n *    @Fields.string()\n *    title = '';\n *    @Fields.boolean()\n *    completed = false;\n * }\n * @note\n * EntityOptions can be set in two ways:\n * @example\n * // as an object\n * @Entity(\"tasks\",{ allowApiCrud:true })\n * @example\n * // as an arrow function that receives `remult` as a parameter\n * @Entity(\"tasks\", (options,remult) => options.allowApiCrud = true)\n */\nexport function Entity(key, ...options) {\n    return (target, info) => {\n        for (const rawFilterMember in target) {\n            if (Object.prototype.hasOwnProperty.call(target, rawFilterMember)) {\n                const element = target[rawFilterMember];\n                if (element?.rawFilterInfo?.rawFilterTranslator) {\n                    if (!element.rawFilterInfo.key)\n                        element.rawFilterInfo.key = rawFilterMember;\n                }\n            }\n        }\n        let factory = (remult) => {\n            let r = {};\n            for (const o of options) {\n                if (o) {\n                    if (typeof o === 'function')\n                        o(r, remult);\n                    else\n                        Object.assign(r, o);\n                }\n            }\n            let base = Object.getPrototypeOf(target);\n            if (base) {\n                let baseFactory = getEntitySettings(base, false);\n                if (baseFactory) {\n                    let opt = baseFactory(remult);\n                    if (opt) {\n                        r = {\n                            ...opt,\n                            ...r,\n                        };\n                    }\n                }\n            }\n            return r;\n        };\n        remultStatic.allEntities.push(target);\n        setControllerSettings(target, { key });\n        target[entityInfo] = factory;\n        target[entityInfo_key] = key;\n        return target;\n    };\n}\n", "import { createId } from '@paralleldrive/cuid2';\nimport { v4 as uuid } from 'uuid';\nimport { ValueConverters } from '../valueConverters.js';\nimport { buildOptions, fieldOptionalValuesFunctionKey, } from './RepositoryImplementation.js';\nimport { Validators, createValueValidator, getEnumValues, } from '../validators.js';\nimport { relationInfoMemberInOptions } from './relationInfoMember.js';\nimport { remultStatic } from '../remult-static.js';\nimport { addValidator } from './addValidator.js';\nconst validateNumber = createValueValidator((x) => {\n    return !isNaN(x) && isFinite(x);\n});\nexport class Fields {\n    /**\n     * Stored as a JSON.stringify - to store as json use Fields.json\n     */\n    static object(...options) {\n        return Field(undefined, ...options);\n    }\n    static json(...options) {\n        let op = options;\n        if (op.valueConverter && !op.valueConverter.fieldTypeInDb)\n            //@ts-ignore\n            op.valueConverter.fieldTypeInDb = 'json';\n        return Field(undefined, {\n            valueConverter: {\n                fieldTypeInDb: 'json',\n            },\n        }, ...options);\n    }\n    static dateOnly(...options) {\n        return Field(() => Date, {\n            valueConverter: ValueConverters.DateOnly,\n        }, ...options);\n    }\n    static date(...options) {\n        return Field(() => Date, ...options);\n    }\n    static integer(...options) {\n        return Field(() => Number, {\n            valueConverter: ValueConverters.Integer,\n            validate: validateNumber,\n        }, ...options);\n    }\n    static autoIncrement(...options) {\n        return Field(() => Number, {\n            allowApiUpdate: false,\n            dbReadOnly: true,\n            valueConverter: {\n                ...ValueConverters.Integer,\n                fieldTypeInDb: 'autoincrement',\n            },\n        }, ...options);\n    }\n    static number(...options) {\n        return Field(() => Number, {\n            validate: validateNumber,\n        }, ...options);\n    }\n    static createdAt(...options) {\n        return Field(() => Date, {\n            allowApiUpdate: false,\n            saving: (_, ref, { isNew }) => {\n                if (isNew)\n                    ref.value = new Date();\n            },\n        }, ...options);\n    }\n    static updatedAt(...options) {\n        return Field(() => Date, {\n            allowApiUpdate: false,\n            saving: (_, ref) => {\n                ref.value = new Date();\n            },\n        }, ...options);\n    }\n    static uuid(...options) {\n        return Field(() => String, {\n            allowApiUpdate: false,\n            defaultValue: () => uuid(),\n            saving: (_, r) => {\n                if (!r.value)\n                    r.value = uuid();\n            },\n        }, ...options);\n    }\n    /**\n     * A CUID (Collision Resistant Unique Identifier) field.\n     * This id value is determined on the backend on insert, and can't be updated through the API.\n     * The CUID is generated using the `@paralleldrive/cuid2` npm package.\n     */\n    static cuid(...options) {\n        return Field(() => String, {\n            allowApiUpdate: false,\n            defaultValue: () => createId(),\n            saving: (_, r) => {\n                if (!r.value)\n                    r.value = createId();\n            },\n        }, ...options);\n    }\n    /**\n   * Defines a field that can hold a value from a specified set of string literals.\n   * @param {() => readonly valueType[]} optionalValues - A function that returns an array of allowed string literals.\n   * @returns {ClassFieldDecorator<entityType, valueType | undefined>} - A class field decorator.\n   *\n   * @example\n   \n   * class MyEntity {\n   *   .@Fields.literal(() => ['open', 'closed', 'frozen', 'in progress'] as const)\n   *   status: 'open' | 'closed' | 'frozen' | 'in progress' = 'open';\n   * }\n   \n   *\n   * // This defines a field `status` in `MyEntity` that can only hold the values 'open', 'closed', 'frozen', or 'in progress'.\n   *\n   * @example\n   * // For better reusability and maintainability:\n   \n   * const statuses = ['open', 'closed', 'frozen', 'in progress'] as const;\n   * type StatusType = typeof statuses[number];\n   *\n   * class MyEntity {\n   *   .@Fields.literal(() => statuses)\n   *   status: StatusType = 'open';\n   * }\n   \n   *\n   * // This approach allows easy management and updates of the allowed values for the `status` field.\n   */\n    static literal(optionalValues, ...options) {\n        return Fields.string({\n            validate: (entity, event) => Validators.in(optionalValues())(entity, event),\n            //@ts-expect-error as we are adding this to options without it being defined in options\n            [fieldOptionalValuesFunctionKey]: optionalValues,\n        }, ...options);\n    }\n    static enum(enumType, ...options) {\n        let valueConverter;\n        return Field(() => \n        //@ts-ignore\n        enumType(), {\n            validate: (entity, event) => Validators.enum(enumType())(entity, event),\n            [fieldOptionalValuesFunctionKey]: () => getEnumValues(enumType()),\n        }, ...options, (options) => {\n            options[fieldOptionalValuesFunctionKey] = () => getEnumValues(enumType());\n            if (valueConverter === undefined) {\n                let enumObj = enumType();\n                let enumValues = getEnumValues(enumObj);\n                valueConverter = enumValues.find((x) => typeof x === 'string')\n                    ? ValueConverters.String\n                    : ValueConverters.Integer;\n            }\n            if (!options.valueConverter) {\n                options.valueConverter = valueConverter;\n            }\n            else if (!options.valueConverter.fieldTypeInDb) {\n                //@ts-ignore\n                options.valueConverter.fieldTypeInDb = valueConverter.fieldTypeInDb;\n            }\n        });\n    }\n    static string(...options) {\n        return Field(() => String, ...options);\n    }\n    static boolean(...options) {\n        return Field(() => Boolean, ...options);\n    }\n}\nexport class Relations {\n    /**\n     * Define a to-one relation between entities, indicating a one-to-one relationship.\n     * If no field or fields are provided, it will automatically create a field in the database\n     * to represent the relation.\n     *\n     * @param toEntityType A function that returns the target entity type.\n     * @param options (Optional): An object containing options for configuring the to-one relation.\n     * @returns A decorator function to apply the to-one relation to an entity field.\n     *\n     * Example usage:\n     * ```\n     * @Relations.toOne(() => Customer)\n     * customer?: Customer;\n     * ```\n     * ```\n     * Fields.string()\n     * customerId?: string;\n     *\n     * @Relations.toOne(() => Customer, \"customerId\")\n     * customer?: Customer;\n     * ```\n     * ```\n     * Fields.string()\n     * customerId?: string;\n     *\n     * @Relations.toOne(() => Customer, {\n     *   field: \"customerId\",\n     *   defaultIncluded: true\n     * })\n     * customer?: Customer;\n     * ```\n     * ```\n     * Fields.string()\n     * customerId?: string;\n     *\n     * @Relations.toOne(() => Customer, {\n     *   fields: {\n     *     customerId: \"id\",\n     *   },\n     * })\n     * customer?: Customer;\n     * ```\n     */\n    static toOne(toEntityType, options) {\n        let op = (typeof options === 'string'\n            ? { field: options }\n            : !options\n                ? {}\n                : options);\n        if (!op.field && !op.fields && !op.findOptions)\n            //@ts-ignore\n            return Field(toEntityType, {\n                ...op,\n                ...relationInfoMemberInOptions(toEntityType, 'reference'),\n            });\n        return Field(() => undefined, {\n            ...op,\n            serverExpression: () => undefined,\n            ...relationInfoMemberInOptions(toEntityType, 'toOne'),\n        });\n    }\n    static toMany(toEntityType, options) {\n        let op = (typeof options === 'string'\n            ? { field: options }\n            : options);\n        return Field(() => undefined, {\n            ...op,\n            serverExpression: () => undefined,\n            ...relationInfoMemberInOptions(toEntityType, 'toMany'),\n        });\n    }\n}\n/**Decorates fields that should be used as fields.\n * for more info see: [Field Types](https://remult.dev/docs/field-types.html)\n *\n * FieldOptions can be set in two ways:\n * @example\n * // as an object\n * @Fields.string({ includeInApi:false })\n * title='';\n * @example\n * // as an arrow function that receives `remult` as a parameter\n * @Fields.string((options,remult) => options.includeInApi = true)\n * title='';\n */\nexport function Field(valueType, ...options) {\n    // import ANT!!!! if you call this in another decorator, make sure to set It's return type correctly with the | undefined\n    return (target, context, c) => {\n        const key = typeof context === 'string' ? context : context.name.toString();\n        let factory = (remult) => {\n            let r = buildOptions(options, remult);\n            if (r.required) {\n                r.validate = addValidator(r.validate, Validators.required, true);\n            }\n            if (r.maxLength) {\n                r.validate = addValidator(r.validate, Validators.maxLength(r.maxLength));\n            }\n            if (r.minLength) {\n                r.validate = addValidator(r.validate, Validators.minLength(r.minLength));\n            }\n            if (!r.valueType && valueType) {\n                r.valueType = valueType();\n            }\n            if (!r.key) {\n                r.key = key;\n            }\n            if (!r.dbName)\n                r.dbName = r.key;\n            let type = r.valueType;\n            if (!type) {\n                type =\n                    typeof Reflect.getMetadata == 'function'\n                        ? Reflect.getMetadata('design:type', target, key)\n                        : [];\n                r.valueType = type;\n            }\n            if (!r.target)\n                r.target = target;\n            return r;\n        };\n        checkTarget(target);\n        let names = remultStatic.columnsOfType.get(target.constructor);\n        if (!names) {\n            names = [];\n            remultStatic.columnsOfType.set(target.constructor, names);\n        }\n        let set = names.find((x) => x.key == key);\n        if (!set)\n            names.push({\n                key,\n                settings: factory,\n            });\n        else {\n            let prev = set.settings;\n            set.settings = (c) => {\n                let prevO = prev(c);\n                let curr = factory(c);\n                return Object.assign(prevO, curr);\n            };\n        }\n    };\n}\nexport function checkTarget(target) {\n    if (!target)\n        throw new Error(\"Set the 'experimentalDecorators:true' option in your 'tsconfig' or 'jsconfig' (target undefined)\");\n}\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n", "import { __decorate, __metadata } from \"tslib\";\nimport { Fields } from './Fields.js';\nimport { EntityBase } from './RepositoryImplementation.js';\nexport class IdEntity extends EntityBase {\n    id;\n}\n__decorate([\n    Fields.uuid(),\n    __metadata(\"design:type\", String)\n], IdEntity.prototype, \"id\", void 0);\n", "/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process[\"env\" + \"\"] && process[\"env\" + \"\"][\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n", "import 'reflect-metadata';\nimport { buildRestDataProvider } from './buildRestDataProvider.js';\nimport { ClassHelper, Remult, doTransaction, isBackend, setControllerSettings, } from './context.js';\nimport { SqlDatabase } from './data-providers/sql-database.js';\nimport { remult } from './remult-proxy.js';\nimport { decorateColumnSettings, getControllerRef, } from './remult3/RepositoryImplementation.js';\nimport { getEntityRef, getEntitySettings } from './remult3/getEntityRef.js';\nimport { serverActionField } from './server-action-info.js';\nimport { checkTarget } from './remult3/Fields.js';\nimport { remultStatic } from './remult-static.js';\nexport class Action {\n    actionUrl;\n    queue;\n    allowed;\n    constructor(actionUrl, queue, allowed) {\n        this.actionUrl = actionUrl;\n        this.queue = queue;\n        this.allowed = allowed;\n    }\n    static apiUrlForJobStatus = 'jobStatusInQueue';\n    async run(pIn, baseUrl, http) {\n        if (baseUrl === undefined)\n            baseUrl = remult.apiClient.url;\n        if (!http)\n            http = buildRestDataProvider(remult.apiClient.httpClient);\n        let r = await http.post(baseUrl + '/' + this.actionUrl, pIn);\n        let p = r;\n        if (p && p.queuedJobId) {\n            let progress = remultStatic.actionInfo.startBusyWithProgress();\n            try {\n                let runningJob;\n                await remultStatic.actionInfo.runActionWithoutBlockingUI(async () => {\n                    while (!runningJob || !runningJob.done) {\n                        if (runningJob)\n                            await new Promise((res) => setTimeout(() => {\n                                res(undefined);\n                            }, 200));\n                        runningJob = await http.post(baseUrl + '/' + Action.apiUrlForJobStatus, { queuedJobId: r.queuedJobId });\n                        if (runningJob.progress) {\n                            progress.progress(runningJob.progress);\n                        }\n                    }\n                });\n                if (runningJob.error)\n                    throw runningJob.error;\n                progress.progress(1);\n                return runningJob.result;\n            }\n            finally {\n                progress.close();\n            }\n        }\n        else\n            return r;\n    }\n    doWork;\n    __register(reg) {\n        reg(this.actionUrl, this.queue, this.allowed, async (d, req, res) => {\n            try {\n                var r = await this.execute(d, req, res);\n                res.success(r);\n            }\n            catch (err) {\n                if (err.isForbiddenError)\n                    // got a problem in next with instance of ForbiddenError  - so replaced it with this bool\n                    res.forbidden();\n                else\n                    res.error(err, undefined);\n            }\n        });\n    }\n}\nexport class ForbiddenError extends Error {\n    constructor(message = 'Forbidden') {\n        super(message);\n    }\n    isForbiddenError = true;\n}\nexport class myServerAction extends Action {\n    types;\n    options;\n    originalMethod;\n    constructor(name, types, options, originalMethod) {\n        super(name, options.queue, options.allowed);\n        this.types = types;\n        this.options = options;\n        this.originalMethod = originalMethod;\n    }\n    async execute(info, remult, res) {\n        let result = { data: {} };\n        let ds = remult.dataProvider;\n        await doTransaction(remult, async () => {\n            if (!remult.isAllowedForInstance(undefined, this.options.allowed))\n                throw new ForbiddenError();\n            info.args = await prepareReceivedArgs(this.types(), info.args, remult, ds, res);\n            try {\n                result.data = await this.originalMethod(info.args);\n            }\n            catch (err) {\n                throw err;\n            }\n        });\n        return result;\n    }\n}\nconst classOptions = new Map();\nexport function Controller(key) {\n    return function (target, context) {\n        let r = target;\n        classOptions.set(r, { key });\n        setControllerSettings(target, { key });\n        return target;\n    };\n}\n/** Indicates that the decorated methods runs on the backend. See: [Backend Methods](https://remult.dev/docs/backendMethods.html) */\nexport function BackendMethod(options) {\n    return (target, context, descriptor) => {\n        const key = typeof context === 'string' ? context : context.name.toString();\n        const originalMethod = descriptor ? descriptor.value : target;\n        let result = originalMethod;\n        checkTarget(target);\n        function getTypes() {\n            var types = typeof Reflect.getMetadata == 'function'\n                ? Reflect.getMetadata('design:paramtypes', target, key)\n                : [];\n            if (options.paramTypes)\n                types =\n                    typeof options.paramTypes === 'function'\n                        ? options.paramTypes()\n                        : options.paramTypes;\n            return types;\n        }\n        if (target.prototype !== undefined) {\n            // if types are undefined - you've forgot to set: \"emitDecoratorMetadata\":true\n            let serverAction = new myServerAction((options?.apiPrefix ? options.apiPrefix + '/' : '') + key, () => getTypes(), options, (args) => originalMethod.apply(undefined, args));\n            serverAction.doWork = async (args, self, url, http) => {\n                args = prepareArgsToSend(getTypes(), args);\n                if (options.blockUser === false) {\n                    return await remultStatic.actionInfo.runActionWithoutBlockingUI(async () => (await serverAction.run({ args }, url, http)).data);\n                }\n                else\n                    return (await serverAction.run({ args }, url, http)).data;\n            };\n            result = async function (...args) {\n                if (!isBackend()) {\n                    return await serverAction.doWork(args, undefined);\n                }\n                else\n                    return await originalMethod.apply(this, args);\n            };\n            registerAction(target, result);\n            result[serverActionField] = serverAction;\n            if (descriptor) {\n                descriptor.value = result;\n                return descriptor;\n            }\n            else\n                return result;\n        }\n        let x = remultStatic.classHelpers.get(target.constructor);\n        if (!x) {\n            x = new ClassHelper();\n            remultStatic.classHelpers.set(target.constructor, x);\n        }\n        let serverAction = {\n            __register(reg) {\n                let c = new Remult();\n                for (const constructor of x.classes.keys()) {\n                    let controllerOptions = x.classes.get(constructor);\n                    if (!controllerOptions.key) {\n                        controllerOptions.key = c.repo(constructor).metadata.key;\n                    }\n                    reg(controllerOptions.key +\n                        '/' +\n                        (options?.apiPrefix ? options.apiPrefix + '/' : '') +\n                        key, options ? options.queue : false, options.allowed, async (d, req, res) => {\n                        d.args = d.args.map((x) => (isCustomUndefined(x) ? undefined : x));\n                        let allowed = options.allowed;\n                        try {\n                            let remult = req;\n                            let r;\n                            await doTransaction(remult, async () => {\n                                d.args = await prepareReceivedArgs(getTypes(), d.args, remult, remult.dataProvider, res);\n                                if (remultStatic.allEntities.includes(constructor)) {\n                                    let repo = remult.repo(constructor);\n                                    let y;\n                                    if (d.rowInfo.isNewRow) {\n                                        y = repo.create();\n                                        let rowHelper = repo.getEntityRef(y);\n                                        await rowHelper._updateEntityBasedOnApi(d.rowInfo.data);\n                                    }\n                                    else {\n                                        let rows = await repo.find({\n                                            where: {\n                                                ...repo.metadata.idMetadata.getIdFilter(d.rowInfo.id),\n                                                $and: [repo.metadata.options.apiPrefilter],\n                                            },\n                                        });\n                                        if (rows.length != 1)\n                                            throw new Error('not found or too many matches');\n                                        y = rows[0];\n                                        await repo.getEntityRef(y)._updateEntityBasedOnApi(d.rowInfo.data);\n                                    }\n                                    if (!remult.isAllowedForInstance(y, allowed))\n                                        throw new ForbiddenError();\n                                    let defs = getEntityRef(y);\n                                    await defs.__validateEntity();\n                                    try {\n                                        r = {\n                                            result: await originalMethod.apply(y, d.args),\n                                            rowInfo: {\n                                                data: await defs.toApiJson(),\n                                                isNewRow: defs.isNew(),\n                                                wasChanged: defs.wasChanged(),\n                                                id: defs.getOriginalId(),\n                                            },\n                                        };\n                                    }\n                                    catch (err) {\n                                        throw defs.catchSaveErrors(err);\n                                    }\n                                }\n                                else {\n                                    let y = new constructor(remult, remult.dataProvider);\n                                    let controllerRef = getControllerRef(y, remult);\n                                    await controllerRef._updateEntityBasedOnApi(d.fields);\n                                    if (!remult.isAllowedForInstance(y, allowed))\n                                        throw new ForbiddenError();\n                                    await controllerRef.__validateEntity();\n                                    try {\n                                        r = {\n                                            result: await originalMethod.apply(y, d.args),\n                                            fields: await controllerRef.toApiJson(),\n                                        };\n                                    }\n                                    catch (err) {\n                                        throw controllerRef.catchSaveErrors(err);\n                                    }\n                                }\n                            });\n                            res.success(r);\n                        }\n                        catch (err) {\n                            if (err.isForbiddenError)\n                                // got a problem in next with instance of ForbiddenError  - so replaced it with this bool\n                                res.forbidden();\n                            else\n                                res.error(err, undefined);\n                        }\n                    });\n                }\n            },\n            doWork: async function (args, self, baseUrl, http) {\n                args = prepareArgsToSend(getTypes(), args);\n                if (remultStatic.allEntities.includes(target.constructor)) {\n                    let defs = getEntityRef(self);\n                    await defs.__validateEntity();\n                    let classOptions = x.classes.get(self.constructor);\n                    if (!classOptions.key) {\n                        classOptions.key = defs.repository.metadata.key + '_methods';\n                    }\n                    try {\n                        let r = await new (class extends Action {\n                            execute;\n                        })(classOptions.key +\n                            '/' +\n                            (options?.apiPrefix ? options.apiPrefix + '/' : '') +\n                            key, options ? options.queue : false, options.allowed).run({\n                            args,\n                            rowInfo: {\n                                data: await defs.toApiJson(),\n                                isNewRow: defs.isNew(),\n                                wasChanged: defs.wasChanged(),\n                                id: defs.getOriginalId(),\n                            },\n                        }, baseUrl, http);\n                        await defs._updateEntityBasedOnApi(r.rowInfo.data, true);\n                        return r.result;\n                    }\n                    catch (err) {\n                        throw defs.catchSaveErrors(err);\n                    }\n                }\n                else {\n                    let defs = getControllerRef(self, undefined);\n                    try {\n                        await defs.__validateEntity();\n                        let r = await new (class extends Action {\n                            execute;\n                        })(x.classes.get(self.constructor).key +\n                            '/' +\n                            (options?.apiPrefix ? options.apiPrefix + '/' : '') +\n                            key, options ? options.queue : false, options.allowed).run({\n                            args,\n                            fields: await defs.toApiJson(),\n                        }, baseUrl, http);\n                        await defs._updateEntityBasedOnApi(r.fields);\n                        return r.result;\n                    }\n                    catch (e) {\n                        throw defs.catchSaveErrors(e);\n                    }\n                }\n            },\n        };\n        result = async function (...args) {\n            if (!isBackend()) {\n                let self = this;\n                return serverAction.doWork(args, self);\n            }\n            else\n                return await originalMethod.apply(this, args);\n        };\n        registerAction(target.constructor, result);\n        result[serverActionField] = serverAction;\n        if (descriptor) {\n            descriptor.value = result;\n            return descriptor;\n        }\n        else\n            return result;\n    };\n}\nconst customUndefined = {\n    _isUndefined: true,\n};\nfunction registerAction(target, resultMethod) {\n    ;\n    (target[classBackendMethodsArray] || (target[classBackendMethodsArray] = [])).push(resultMethod);\n    remultStatic.actionInfo.allActions.push(resultMethod);\n}\nfunction isCustomUndefined(x) {\n    return x && x._isUndefined;\n}\nexport class ProgressListener {\n    res;\n    constructor(res) {\n        this.res = res;\n    }\n    progress(progress) {\n        this.res.progress(progress);\n    }\n}\nexport function prepareArgsToSend(types, args) {\n    if (types) {\n        for (let index = 0; index < types.length; index++) {\n            const paramType = types[index];\n            for (const type of [Remult, SqlDatabase]) {\n                if (args[index] instanceof type)\n                    args[index] = undefined;\n                else if (paramType == type) {\n                    args[index] = undefined;\n                }\n            }\n            if (args[index] != undefined) {\n                let x = { valueType: paramType };\n                x = decorateColumnSettings(x, new Remult());\n                let eo = getEntitySettings(paramType, false);\n                if (eo != null) {\n                    let rh = getEntityRef(args[index]);\n                    args[index] = rh.getId();\n                }\n                if (x.valueConverter)\n                    args[index] = x.valueConverter.toJson(args[index]);\n            }\n        }\n    }\n    return args.map((x) => (x !== undefined ? x : customUndefined));\n}\nexport async function prepareReceivedArgs(types, args, remult, ds, res) {\n    for (let index = 0; index < args.length; index++) {\n        const element = args[index];\n        if (isCustomUndefined(element))\n            args[index] = undefined;\n    }\n    if (types)\n        for (let i = 0; i < types.length; i++) {\n            if (args.length < i) {\n                args.push(undefined);\n            }\n            if (types[i] == Remult || types[i] == Remult) {\n                args[i] = remult;\n            }\n            else if (types[i] == SqlDatabase && ds) {\n                args[i] = ds;\n            }\n            else if (types[i] == ProgressListener) {\n                args[i] = new ProgressListener(res);\n            }\n            else {\n                let x = { valueType: types[i] };\n                x = decorateColumnSettings(x, remult);\n                if (x.valueConverter)\n                    args[i] = x.valueConverter.fromJson(args[i]);\n                let eo = getEntitySettings(types[i], false);\n                if (eo != null) {\n                    if (!(args[i] === null || args[i] === undefined))\n                        args[i] = await remult.repo(types[i]).findId(args[i]);\n                }\n            }\n        }\n    return args;\n}\nexport const classBackendMethodsArray = Symbol.for('classBackendMethodsArray');\n", "import { BackendMethod } from '../server-action.js';\nimport { Entity } from './entity.js';\nexport function describeClass(classType, classDescriber, members, staticMembers) {\n    if (classDescriber)\n        classDescriber(classType);\n    for (const fieldKey in members) {\n        if (Object.prototype.hasOwnProperty.call(members, fieldKey)) {\n            const element = members[fieldKey];\n            const prop = Object.getOwnPropertyDescriptor(classType.prototype, fieldKey);\n            element(classType.prototype, fieldKey, prop);\n            if (prop)\n                Object.defineProperty(classType.prototype, fieldKey, prop);\n        }\n    }\n    for (const staticFieldKey in staticMembers) {\n        const staticElement = staticMembers[staticFieldKey];\n        const prop = Object.getOwnPropertyDescriptor(classType, staticFieldKey);\n        staticElement(classType, staticFieldKey, prop);\n        if (prop)\n            Object.defineProperty(classType, staticFieldKey, prop);\n    }\n}\nexport function describeBackendMethods(classType, backendMethods) {\n    let result = {};\n    for (const key in backendMethods) {\n        if (Object.prototype.hasOwnProperty.call(backendMethods, key)) {\n            const options = backendMethods[key];\n            result[key] = BackendMethod(options);\n        }\n    }\n    describeClass(classType, undefined, undefined, result);\n}\nexport function describeEntity(classType, key, fields, options) {\n    describeClass(classType, Entity(key, options), fields);\n}\n", "import { ArrayEntityDataProvider } from './array-entity-data-provider.js';\nexport class InMemoryDataProvider {\n    async transaction(action) {\n        let before = JSON.stringify(this.rows);\n        try {\n            await action(this);\n        }\n        catch (e) {\n            this.rows = JSON.parse(before);\n            throw e;\n        }\n    }\n    rows = {};\n    getEntityDataProvider(entity) {\n        let name = entity.key;\n        if (!this.rows[name])\n            this.rows[name] = [];\n        return new ArrayEntityDataProvider(entity, () => this.rows[name]);\n    }\n    toString() {\n        return 'InMemoryDataProvider';\n    }\n}\n", "import { dbNamesOf, isDbReadonly, } from '../filter/filter-consumer-bridge-to-sql-request.js';\nimport { isAutoIncrement } from '../remult3/RepositoryImplementation.js';\nimport { SqlDatabase } from './sql-database.js';\n//SqlDatabase.LogToConsole = true;\nexport class WebSqlDataProvider {\n    databaseName;\n    rows;\n    /** @internal */\n    //@ts-ignore\n    db;\n    constructor(databaseName, databaseSize = 2 * 1024 * 1024) {\n        this.databaseName = databaseName;\n        //@ts-ignore\n        this.db = window.openDatabase(databaseName, '1.0', databaseName, databaseSize);\n    }\n    async end() { }\n    getLimitSqlSyntax(limit, offset) {\n        return ' limit ' + limit + ' offset ' + offset;\n    }\n    async entityIsUsedForTheFirstTime(entity) {\n        await this.createTable(entity);\n    }\n    async ensureSchema(entities) {\n        for (const entity of entities) {\n            await this.createTable(entity);\n        }\n    }\n    async dropTable(entity) {\n        let e = await dbNamesOf(entity);\n        let sql = 'drop  table if exists ' + e.$entityName;\n        if (SqlDatabase.LogToConsole)\n            console.info(sql);\n        await this.createCommand().execute(sql);\n    }\n    async createTable(entity) {\n        let result = '';\n        let e = await dbNamesOf(entity);\n        for (const x of entity.fields) {\n            if (!isDbReadonly(x, e) || isAutoIncrement(x)) {\n                if (result.length != 0)\n                    result += ',';\n                result += '\\r\\n  ';\n                if (isAutoIncrement(x)) {\n                    if (x.key != entity.idMetadata.field.key)\n                        throw 'in web sql, autoincrement is only allowed for primary key';\n                    result += e.$dbNameOf(x) + ' integer primary key autoincrement';\n                }\n                else {\n                    result += this.addColumnSqlSyntax(x, e.$dbNameOf(x));\n                    if (x.key == entity.idMetadata.field.key) {\n                        result += ' primary key';\n                    }\n                }\n            }\n        }\n        let sql = 'create table if not exists ' + e.$entityName + ' (' + result + '\\r\\n)';\n        if (SqlDatabase.LogToConsole)\n            console.log(sql);\n        await this.createCommand().execute(sql);\n    }\n    createCommand() {\n        return new WebSqlBridgeToSQLCommand(this.db);\n    }\n    async transaction(action) {\n        throw new Error('Method not implemented.');\n    }\n    addColumnSqlSyntax(x, dbName) {\n        let result = dbName;\n        const nullNumber = x.allowNull ? '' : ' default 0 not null';\n        if (x.valueType == Date)\n            result += ' integer';\n        else if (x.valueType == Boolean)\n            result += ' integer ' + nullNumber;\n        else if (x.valueType == Number) {\n            if (!x.valueConverter.fieldTypeInDb)\n                result += ' real ' + nullNumber;\n            else\n                result += ' ' + x.valueConverter.fieldTypeInDb + ' ' + nullNumber;\n        }\n        else\n            result += ' text' + (x.allowNull ? ' ' : \" default '' not null \");\n        return result;\n    }\n    toString() {\n        return 'WebSqlDataProvider';\n    }\n}\nclass WebSqlBridgeToSQLCommand {\n    source;\n    //@ts-ignore\n    constructor(source) {\n        this.source = source;\n    }\n    values = [];\n    addParameterAndReturnSqlToken(val) {\n        return this.param(val);\n    }\n    param(val) {\n        this.values.push(val);\n        return '~' + this.values.length + '~';\n    }\n    execute(sql) {\n        return new Promise((resolve, reject) => this.source.transaction((t) => {\n            let s = sql;\n            let v = [];\n            var m = s.match(/~\\d+~/g);\n            if (m != null)\n                m.forEach((mr) => {\n                    s = s.replace(mr, '?');\n                    v.push(this.values[Number.parseInt(mr.substring(1, mr.length - 1)) - 1]);\n                });\n            t.executeSql(s, v, (t1, r) => resolve(new WebSqlBridgeToSQLQueryResult(r)), (t2, err) => {\n                reject(err.message);\n                return false;\n            });\n        }));\n    }\n}\nclass WebSqlBridgeToSQLQueryResult {\n    r;\n    getColumnKeyInResultForIndexInSelect(index) {\n        if (this.rows.length == 0)\n            throw Error('No rows');\n        let i = 0;\n        for (let m in this.rows[0]) {\n            if (i++ == index)\n                return m;\n        }\n        throw Error('index not found');\n    }\n    //@ts-ignore\n    constructor(r) {\n        this.r = r;\n        this.rows = [];\n        for (let i = 0; i < r.rows.length; i++) {\n            this.rows.push(r.rows.item(i));\n        }\n    }\n    rows;\n}\n", "import { ArrayEntityDataProvider } from './array-entity-data-provider.js';\nexport class JsonDataProvider {\n    storage;\n    formatted;\n    constructor(storage, formatted = false) {\n        this.storage = storage;\n        this.formatted = formatted;\n    }\n    getEntityDataProvider(entity) {\n        return new JsonEntityDataProvider(entity, this.storage, this.formatted);\n    }\n    async transaction(action) {\n        await action(this);\n    }\n}\nclass JsonEntityDataProvider {\n    entity;\n    helper;\n    formatted;\n    constructor(entity, helper, formatted) {\n        this.entity = entity;\n        this.helper = helper;\n        this.formatted = formatted;\n    }\n    async loadEntityData(what) {\n        let data = [];\n        let dbName = await this.entity.dbName;\n        let s = await this.helper.getItem(dbName);\n        if (s)\n            data = JSON.parse(s);\n        let dp = new ArrayEntityDataProvider(this.entity, () => data);\n        return what(dp, async () => await this.helper.setItem(dbName, JSON.stringify(data, undefined, this.formatted ? 2 : undefined)));\n    }\n    p = Promise.resolve();\n    find(options) {\n        return (this.p = this.p.then(() => this.loadEntityData((dp, save) => dp.find(options))));\n    }\n    count(where) {\n        return (this.p = this.p.then(() => this.loadEntityData((dp, save) => dp.count(where))));\n    }\n    update(id, data) {\n        return (this.p = this.p.then(() => this.loadEntityData((dp, save) => dp.update(id, data).then(async (x) => {\n            await save();\n            return x;\n        }))));\n    }\n    delete(id) {\n        return (this.p = this.p.then(() => this.loadEntityData((dp, save) => dp.delete(id).then(async (x) => {\n            await save();\n            return x;\n        }))));\n    }\n    async insert(data) {\n        return (this.p = this.p.then(() => this.loadEntityData((dp, save) => dp.insert(data).then(async (x) => {\n            await save();\n            return x;\n        }))));\n    }\n}\n", "export class JsonEntityOpfsStorage {\n    //@internal\n    opfsRoot;\n    async getItem(entityDbName) {\n        if (!this.opfsRoot) {\n            this.opfsRoot = await navigator.storage.getDirectory();\n        }\n        const opfsFile = await this.opfsRoot.getFileHandle(entityDbName + '.json', {\n            create: true,\n        });\n        const readable = await opfsFile.getFile();\n        return await readable.text();\n    }\n    async setItem(entityDbName, json) {\n        const opfsFile = await this.opfsRoot.getFileHandle(entityDbName + '.json', {\n            create: true,\n        });\n        const writable = await opfsFile.createWritable();\n        await writable.write(json);\n        await writable.close();\n    }\n}\n", "import { findOptionsFromJson } from '../data-providers/rest-data-provider.js';\n/* @internal*/\nexport class LiveQueryPublisher {\n    subscriptionServer;\n    liveQueryStorage;\n    performWithContext;\n    constructor(subscriptionServer, liveQueryStorage, performWithContext) {\n        this.subscriptionServer = subscriptionServer;\n        this.liveQueryStorage = liveQueryStorage;\n        this.performWithContext = performWithContext;\n    }\n    runPromise(p) { }\n    debugFileSaver = (x) => { };\n    async itemChanged(entityKey, changes) {\n        await this.liveQueryStorage().forEach(entityKey, async ({ query: q, setData }) => {\n            let query = { ...q.data };\n            await this.performWithContext(query.requestJson, entityKey, async (repo) => {\n                const messages = [];\n                const currentItems = await repo.find(findOptionsFromJson(query.findOptionsJson, repo.metadata));\n                const currentIds = currentItems.map((x) => repo.getEntityRef(x).getId());\n                for (const id of query.lastIds.filter((y) => !currentIds.includes(y))) {\n                    let c = changes.find((c) => c.oldId == id);\n                    if (c === undefined ||\n                        id != c.oldId ||\n                        !currentIds.includes(c.id))\n                        messages.push({\n                            type: 'remove',\n                            data: {\n                                id: id,\n                            },\n                        });\n                }\n                for (const item of currentItems) {\n                    const itemRef = repo.getEntityRef(item);\n                    let c = changes.find((c) => c.id == itemRef.getId());\n                    if (c !== undefined && query.lastIds.includes(c.oldId)) {\n                        messages.push({\n                            type: 'replace',\n                            data: {\n                                oldId: c.oldId,\n                                item: itemRef.toApiJson(),\n                            },\n                        });\n                    }\n                    else if (!query.lastIds.includes(itemRef.getId())) {\n                        messages.push({\n                            type: 'add',\n                            data: { item: itemRef.toApiJson() },\n                        });\n                    }\n                }\n                this.debugFileSaver({\n                    query: q.id,\n                    currentIds,\n                    changes,\n                    lastIds: query.lastIds,\n                    messages,\n                });\n                query.lastIds = currentIds;\n                await setData(query);\n                if (messages.length > 0)\n                    this.subscriptionServer().publishMessage(q.id, messages);\n            });\n        });\n    }\n}\nexport class InMemoryLiveQueryStorage {\n    debugFileSaver = (x) => { };\n    debug() {\n        this.debugFileSaver(this.queries);\n    }\n    async keepAliveAndReturnUnknownQueryIds(ids) {\n        const result = [];\n        for (const id of ids) {\n            let q = this.queries.find((q) => q.id === id);\n            if (q) {\n                q.lastUsed = new Date().toISOString();\n            }\n            else\n                result.push(id);\n        }\n        this.debug();\n        return result;\n    }\n    queries = [];\n    constructor() { }\n    async add(query) {\n        this.queries.push({ ...query, lastUsed: new Date().toISOString() });\n        this.debug();\n    }\n    removeCountForTesting = 0;\n    async remove(id) {\n        this.queries = this.queries.filter((q) => q.id !== id);\n        this.removeCountForTesting++;\n        this.debug();\n    }\n    async forEach(entityKey, handle) {\n        let d = new Date();\n        d.setMinutes(d.getMinutes() - 5);\n        this.queries = this.queries.filter((x) => x.lastUsed > d.toISOString());\n        for (const q of this.queries) {\n            if (q.entityKey === entityKey) {\n                await handle({\n                    query: q,\n                    setData: async (data) => {\n                        q.data = data;\n                    },\n                });\n            }\n        }\n        this.debug();\n    }\n}\n", "export { ArrayEntityDataProvider } from './src/data-providers/array-entity-data-provider.js';\nexport { EntityBase, ControllerBase, FieldType, getFields, ValueListFieldType, getValueList, ValueListInfo, CaptionTransformer, } from './src/remult3/RepositoryImplementation.js';\nexport { Entity } from './src/remult3/entity.js';\nexport { getEntityRef } from './src/remult3/getEntityRef.js';\nexport { Field, Fields, Relations, } from './src/remult3/Fields.js';\nexport { IdEntity } from './src/remult3/IdEntity.js';\nexport { describeClass, describeBackendMethods, describeEntity, } from './src/remult3/classDescribers.js';\nexport { RestDataProvider } from './src/data-providers/rest-data-provider.js'; //V\nexport { InMemoryDataProvider } from './src/data-providers/in-memory-database.js'; //V\nexport { WebSqlDataProvider } from './src/data-providers/web-sql-data-provider.js'; //V\nexport { SqlDatabase } from './src/data-providers/sql-database.js'; //V\nexport { CustomSqlFilterBuilder, dbNamesOf, } from './src/filter/filter-consumer-bridge-to-sql-request.js';\nexport { JsonDataProvider, } from './src/data-providers/json-data-provider.js'; //V\nexport { JsonEntityOpfsStorage } from './src/data-providers/json-entity-opfs-storage.js';\n//export * from './src/data-api'; //reconsider if to make internal\nexport { Controller, BackendMethod, ProgressListener, ForbiddenError, } from './src/server-action.js';\nexport { Allow, Remult, withRemult, isBackend, EventSource, } from './src/context.js';\nexport { Sort } from './src/sort.js';\nexport { CompoundIdField } from './src/CompoundIdField.js';\nexport { Filter, } from './src/filter/filter-interfaces.js';\nexport { UrlBuilder } from './urlBuilder.js';\nexport { Validators, valueValidator, createValidator, createValidatorWithArgs, createValueValidatorWithArgs, createValueValidator, } from './src/validators.js';\nexport { ValueConverters } from './src/valueConverters.js';\nexport { remult } from './src/remult-proxy.js';\nimport { remult } from './src/remult-proxy.js';\n//export { getId } from './src/remult3/getId';\nexport { InMemoryLiveQueryStorage, } from './src/live-query/SubscriptionServer.js';\nexport { SubscriptionChannel, } from './src/live-query/SubscriptionChannel.js';\n/**\n * A convenient shortcut function to quickly obtain a repository for a specific entity type in Remult.\n *\n * @param entity The entity class type for which you want to get a repository.\n * @returns A repository instance for the specified entity type.\n *\n * Example usage:\n * ```ts\n * await repo(Task).find()\n * await repo(Customer).insert()\n * ```\n */\nexport function repo(entity, dataProvider) {\n    return remult.repo(entity, dataProvider);\n}\n"],
  "mappings": "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",
  "names": ["x", "x", "createId", "createId", "x", "repo", "remult", "field", "x", "key", "remult", "f", "r", "add", "val", "addFilter", "x", "f", "x", "repo", "x", "self", "x", "x", "data", "y", "fetch", "URL", "x", "x", "x", "field", "key", "x", "repo", "remult", "x", "repo", "x", "remult", "EventSource", "x", "x", "x", "validate", "e", "message", "x", "f", "repo", "row", "x", "ref2", "ref", "result", "r", "remult", "key", "val", "self", "entityInfo", "validate", "x", "x", "f", "repo", "r", "x", "f", "x", "repo", "repo", "x", "f", "x", "f", "remult", "x", "options", "remult", "c", "Reflect", "hasOwn", "x", "f", "MapIterator", "Map", "Set", "WeakMap", "remult", "serverAction", "self", "x", "repo", "classOptions", "x", "x", "entityDbName", "x", "q"]
}
